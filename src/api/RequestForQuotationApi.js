/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BillOfMaterialIDs', 'model/BillOfMaterialsResponse', 'model/DocumentIDs', 'model/DocumentsResponse', 'model/ErrorResponse', 'model/QuotationIDs', 'model/QuotationsResponse', 'model/RequestForQuotationRequest', 'model/RequestForQuotationResponse', 'model/RequestForQuotationStatusResponse', 'model/RequestForQuotationsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BillOfMaterialIDs'), require('../model/BillOfMaterialsResponse'), require('../model/DocumentIDs'), require('../model/DocumentsResponse'), require('../model/ErrorResponse'), require('../model/QuotationIDs'), require('../model/QuotationsResponse'), require('../model/RequestForQuotationRequest'), require('../model/RequestForQuotationResponse'), require('../model/RequestForQuotationStatusResponse'), require('../model/RequestForQuotationsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.RequestForQuotationApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.BillOfMaterialIDs, root.NetilionApiDocumentation.BillOfMaterialsResponse, root.NetilionApiDocumentation.DocumentIDs, root.NetilionApiDocumentation.DocumentsResponse, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.QuotationIDs, root.NetilionApiDocumentation.QuotationsResponse, root.NetilionApiDocumentation.RequestForQuotationRequest, root.NetilionApiDocumentation.RequestForQuotationResponse, root.NetilionApiDocumentation.RequestForQuotationStatusResponse, root.NetilionApiDocumentation.RequestForQuotationsResponse);
  }
}(this, function(ApiClient, BillOfMaterialIDs, BillOfMaterialsResponse, DocumentIDs, DocumentsResponse, ErrorResponse, QuotationIDs, QuotationsResponse, RequestForQuotationRequest, RequestForQuotationResponse, RequestForQuotationStatusResponse, RequestForQuotationsResponse) {
  'use strict';

  /**
   * RequestForQuotation service.
   * @module api/RequestForQuotationApi
   * @version 01.00.00
   */

  /**
   * Constructs a new RequestForQuotationApi. 
   * @alias module:api/RequestForQuotationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add bill of materials to a request for quotation
     * Add one or more bill of materials to a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation to which the bill of materials will be added
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addBillOfMaterialsToRequestForQuotationWithHttpInfo = function(requestForQuotationId, body) {
      var postBody = body;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling addBillOfMaterialsToRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addBillOfMaterialsToRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/bill_of_materials', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add bill of materials to a request for quotation
     * Add one or more bill of materials to a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation to which the bill of materials will be added
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addBillOfMaterialsToRequestForQuotation = function(requestForQuotationId, body) {
      return this.addBillOfMaterialsToRequestForQuotationWithHttpInfo(requestForQuotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to a request for quotation
     * Add one or more documents to a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addDocumentsToRequestForQuotationWithHttpInfo = function(requestForQuotationId, body) {
      var postBody = body;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling addDocumentsToRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDocumentsToRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a request for quotation
     * Add one or more documents to a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addDocumentsToRequestForQuotation = function(requestForQuotationId, body) {
      return this.addDocumentsToRequestForQuotationWithHttpInfo(requestForQuotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add quotations to a request for quotation
     * Add one or more quotations to a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation to which the quotations will be added
     * @param {module:model/QuotationIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addQuotationsToRequestForQuotationWithHttpInfo = function(requestForQuotationId, body) {
      var postBody = body;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling addQuotationsToRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addQuotationsToRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/quotations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add quotations to a request for quotation
     * Add one or more quotations to a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation to which the quotations will be added
     * @param {module:model/QuotationIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addQuotationsToRequestForQuotation = function(requestForQuotationId, body) {
      return this.addQuotationsToRequestForQuotationWithHttpInfo(requestForQuotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new request for quotation
     * Create a new request for quotation.
     * @param {module:model/RequestForQuotationRequest} body Object body that will be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationResponse} and HTTP response
     */
    this.createRequestForQuotationWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRequestForQuotation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RequestForQuotationResponse;

      return this.apiClient.callApi(
        '/request_for_quotations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new request for quotation
     * Create a new request for quotation.
     * @param {module:model/RequestForQuotationRequest} body Object body that will be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationResponse}
     */
    this.createRequestForQuotation = function(body) {
      return this.createRequestForQuotationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove bill of materials from a request for quotation
     * Remove one or more bill of materials from a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation from which the bill of materials will be removed
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteBillOfMaterialsFromRequestForQuotationWithHttpInfo = function(requestForQuotationId, body) {
      var postBody = body;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling deleteBillOfMaterialsFromRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteBillOfMaterialsFromRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/bill_of_materials', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove bill of materials from a request for quotation
     * Remove one or more bill of materials from a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation from which the bill of materials will be removed
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteBillOfMaterialsFromRequestForQuotation = function(requestForQuotationId, body) {
      return this.deleteBillOfMaterialsFromRequestForQuotationWithHttpInfo(requestForQuotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a request for quotation
     * Remove one or more documents from a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteDocumentsOfRequestForQuotationWithHttpInfo = function(requestForQuotationId, body) {
      var postBody = body;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling deleteDocumentsOfRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteDocumentsOfRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/documents', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a request for quotation
     * Remove one or more documents from a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteDocumentsOfRequestForQuotation = function(requestForQuotationId, body) {
      return this.deleteDocumentsOfRequestForQuotationWithHttpInfo(requestForQuotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove quotations from a request for quotation
     * Remove one or more quotations from a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation from which the quotations will be removed
     * @param {module:model/QuotationIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteQuotationsFromRequestForQuotationWithHttpInfo = function(requestForQuotationId, body) {
      var postBody = body;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling deleteQuotationsFromRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteQuotationsFromRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/quotations', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove quotations from a request for quotation
     * Remove one or more quotations from a request for quotation.
     * @param {Number} requestForQuotationId Id of the request for quotation from which the quotations will be removed
     * @param {module:model/QuotationIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteQuotationsFromRequestForQuotation = function(requestForQuotationId, body) {
      return this.deleteQuotationsFromRequestForQuotationWithHttpInfo(requestForQuotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a request for quotation
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the request for quotation to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRequestForQuotationWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRequestForQuotation");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a request for quotation
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the request for quotation to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRequestForQuotation = function(id) {
      return this.deleteRequestForQuotationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all bill of materials of one request for quotation
     * Returns a list of all bill of materials that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} requestForQuotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialsResponse} and HTTP response
     */
    this.getBillOfMaterialsOfRequestForQuotationWithHttpInfo = function(requestForQuotationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling getBillOfMaterialsOfRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'author': opts['author'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BillOfMaterialsResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/bill_of_materials', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all bill of materials of one request for quotation
     * Returns a list of all bill of materials that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} requestForQuotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialsResponse}
     */
    this.getBillOfMaterialsOfRequestForQuotation = function(requestForQuotationId, opts) {
      return this.getBillOfMaterialsOfRequestForQuotationWithHttpInfo(requestForQuotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of one request for quotation
     * Returns a list of documents. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} requestForQuotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    this.getDocumentsOfRequestForQuotationWithHttpInfo = function(requestForQuotationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling getDocumentsOfRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of one request for quotation
     * Returns a list of documents. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} requestForQuotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    this.getDocumentsOfRequestForQuotation = function(requestForQuotationId, opts) {
      return this.getDocumentsOfRequestForQuotationWithHttpInfo(requestForQuotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all quotations of one request for quotation
     * Returns a list of all quotations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} requestForQuotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuotationsResponse} and HTTP response
     */
    this.getQuotationsOfRequestForQuotationWithHttpInfo = function(requestForQuotationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling getQuotationsOfRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuotationsResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/quotations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all quotations of one request for quotation
     * Returns a list of all quotations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} requestForQuotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuotationsResponse}
     */
    this.getQuotationsOfRequestForQuotation = function(requestForQuotationId, opts) {
      return this.getQuotationsOfRequestForQuotationWithHttpInfo(requestForQuotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single request for quotation
     * Get a specific request for quotation identified by the id in the URL.
     * @param {Number} id Id of the request for quotation to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationResponse} and HTTP response
     */
    this.getRequestForQuotationByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRequestForQuotationById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RequestForQuotationResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single request for quotation
     * Get a specific request for quotation identified by the id in the URL.
     * @param {Number} id Id of the request for quotation to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationResponse}
     */
    this.getRequestForQuotationById = function(id) {
      return this.getRequestForQuotationByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific request for quotation
     * Returns the status of the request for quotation. Needed if only permission on request for quotation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Number} requestForQuotationId Id of the specified request for quotation
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationStatusResponse} and HTTP response
     */
    this.getRequestForQuotationIdStatusWithHttpInfo = function(requestForQuotationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling getRequestForQuotationIdStatus");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RequestForQuotationStatusResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific request for quotation
     * Returns the status of the request for quotation. Needed if only permission on request for quotation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Number} requestForQuotationId Id of the specified request for quotation
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationStatusResponse}
     */
    this.getRequestForQuotationIdStatus = function(requestForQuotationId, opts) {
      return this.getRequestForQuotationIdStatusWithHttpInfo(requestForQuotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of request for quotations
     * Returns a list of request for quotations. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationsResponse} and HTTP response
     */
    this.getRequestForQuotationsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'author': opts['author'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RequestForQuotationsResponse;

      return this.apiClient.callApi(
        '/request_for_quotations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of request for quotations
     * Returns a list of request for quotations. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationsResponse}
     */
    this.getRequestForQuotations = function(opts) {
      return this.getRequestForQuotationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the bill of materials of a request for quotation
     * Replaces all bill of materials belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} requestForQuotationId Id of the request for quotation of which the bill of materials will be replaced
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceBillOfMaterialsOfRequestForQuotationWithHttpInfo = function(requestForQuotationId, body) {
      var postBody = body;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling replaceBillOfMaterialsOfRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceBillOfMaterialsOfRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/bill_of_materials', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the bill of materials of a request for quotation
     * Replaces all bill of materials belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} requestForQuotationId Id of the request for quotation of which the bill of materials will be replaced
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceBillOfMaterialsOfRequestForQuotation = function(requestForQuotationId, body) {
      return this.replaceBillOfMaterialsOfRequestForQuotationWithHttpInfo(requestForQuotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a request for quotation
     * Replaces all documents belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} requestForQuotationId Id of the request for quotation of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceDocumentsOfRequestForQuotationWithHttpInfo = function(requestForQuotationId, body) {
      var postBody = body;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling replaceDocumentsOfRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceDocumentsOfRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/documents', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a request for quotation
     * Replaces all documents belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} requestForQuotationId Id of the request for quotation of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceDocumentsOfRequestForQuotation = function(requestForQuotationId, body) {
      return this.replaceDocumentsOfRequestForQuotationWithHttpInfo(requestForQuotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the quotations of a request for quotation
     * Replaces all quotations belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} requestForQuotationId Id of the request for quotation of which the quotations will be replaced
     * @param {module:model/QuotationIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceQuotationsOfRequestForQuotationWithHttpInfo = function(requestForQuotationId, body) {
      var postBody = body;

      // verify the required parameter 'requestForQuotationId' is set
      if (requestForQuotationId === undefined || requestForQuotationId === null) {
        throw new Error("Missing the required parameter 'requestForQuotationId' when calling replaceQuotationsOfRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceQuotationsOfRequestForQuotation");
      }


      var pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/quotations', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the quotations of a request for quotation
     * Replaces all quotations belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} requestForQuotationId Id of the request for quotation of which the quotations will be replaced
     * @param {module:model/QuotationIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceQuotationsOfRequestForQuotation = function(requestForQuotationId, body) {
      return this.replaceQuotationsOfRequestForQuotationWithHttpInfo(requestForQuotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a request for quotation
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the request for quotation to update
     * @param {module:model/RequestForQuotationRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateRequestForQuotationWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRequestForQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRequestForQuotation");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a request for quotation
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the request for quotation to update
     * @param {module:model/RequestForQuotationRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateRequestForQuotation = function(id, body) {
      return this.updateRequestForQuotationWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
