/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BillOfMaterialIDs from '../model/BillOfMaterialIDs';
import BillOfMaterialsResponse from '../model/BillOfMaterialsResponse';
import DocumentIDs from '../model/DocumentIDs';
import DocumentsResponse from '../model/DocumentsResponse';
import ErrorResponse from '../model/ErrorResponse';
import QuotationIDs from '../model/QuotationIDs';
import QuotationsResponse from '../model/QuotationsResponse';
import RequestForQuotationRequest from '../model/RequestForQuotationRequest';
import RequestForQuotationResponse from '../model/RequestForQuotationResponse';
import RequestForQuotationStatusResponse from '../model/RequestForQuotationStatusResponse';
import RequestForQuotationsResponse from '../model/RequestForQuotationsResponse';

/**
* RequestForQuotation service.
* @module api/RequestForQuotationApi
* @version 01.00.00
*/
export default class RequestForQuotationApi {

    /**
    * Constructs a new RequestForQuotationApi. 
    * @alias module:api/RequestForQuotationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add bill of materials to a request for quotation
     * Add one or more bill of materials to a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addBillOfMaterialsToRequestForQuotationWithHttpInfo(body, requestForQuotationId) {
      let postBody = body;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/bill_of_materials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add bill of materials to a request for quotation
     * Add one or more bill of materials to a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addBillOfMaterialsToRequestForQuotation(body, requestForQuotationId) {
      return this.addBillOfMaterialsToRequestForQuotationWithHttpInfo(body, requestForQuotationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to a request for quotation
     * Add one or more documents to a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDocumentsToRequestForQuotationWithHttpInfo(body, requestForQuotationId) {
      let postBody = body;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a request for quotation
     * Add one or more documents to a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDocumentsToRequestForQuotation(body, requestForQuotationId) {
      return this.addDocumentsToRequestForQuotationWithHttpInfo(body, requestForQuotationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add quotations to a request for quotation
     * Add one or more quotations to a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addQuotationsToRequestForQuotationWithHttpInfo(body, requestForQuotationId) {
      let postBody = body;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/quotations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add quotations to a request for quotation
     * Add one or more quotations to a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addQuotationsToRequestForQuotation(body, requestForQuotationId) {
      return this.addQuotationsToRequestForQuotationWithHttpInfo(body, requestForQuotationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new request for quotation
     * Create a new request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationResponse} and HTTP response
     */
    createRequestForQuotationWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RequestForQuotationResponse;

      return this.apiClient.callApi(
        '/request_for_quotations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new request for quotation
     * Create a new request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationResponse}
     */
    createRequestForQuotation(body) {
      return this.createRequestForQuotationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove bill of materials from a request for quotation
     * Remove one or more bill of materials from a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBillOfMaterialsFromRequestForQuotationWithHttpInfo(body, requestForQuotationId) {
      let postBody = body;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/bill_of_materials', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove bill of materials from a request for quotation
     * Remove one or more bill of materials from a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBillOfMaterialsFromRequestForQuotation(body, requestForQuotationId) {
      return this.deleteBillOfMaterialsFromRequestForQuotationWithHttpInfo(body, requestForQuotationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a request for quotation
     * Remove one or more documents from a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDocumentsOfRequestForQuotationWithHttpInfo(body, requestForQuotationId) {
      let postBody = body;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a request for quotation
     * Remove one or more documents from a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDocumentsOfRequestForQuotation(body, requestForQuotationId) {
      return this.deleteDocumentsOfRequestForQuotationWithHttpInfo(body, requestForQuotationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove quotations from a request for quotation
     * Remove one or more quotations from a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteQuotationsFromRequestForQuotationWithHttpInfo(body, requestForQuotationId) {
      let postBody = body;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/quotations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove quotations from a request for quotation
     * Remove one or more quotations from a request for quotation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteQuotationsFromRequestForQuotation(body, requestForQuotationId) {
      return this.deleteQuotationsFromRequestForQuotationWithHttpInfo(body, requestForQuotationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a request for quotation
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRequestForQuotationWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a request for quotation
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRequestForQuotation(id) {
      return this.deleteRequestForQuotationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all bill of materials of one request for quotation
     * Returns a list of all bill of materials that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialsResponse} and HTTP response
     */
    getBillOfMaterialsOfRequestForQuotationWithHttpInfo(requestForQuotationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'author': opts['author'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BillOfMaterialsResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/bill_of_materials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all bill of materials of one request for quotation
     * Returns a list of all bill of materials that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialsResponse}
     */
    getBillOfMaterialsOfRequestForQuotation(requestForQuotationId, opts) {
      return this.getBillOfMaterialsOfRequestForQuotationWithHttpInfo(requestForQuotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of one request for quotation
     * Returns a list of documents. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    getDocumentsOfRequestForQuotationWithHttpInfo(requestForQuotationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'valid_from': opts['validFrom'],
        'valid_until': opts['validUntil'],
        'valid_at': opts['validAt'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of one request for quotation
     * Returns a list of documents. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    getDocumentsOfRequestForQuotation(requestForQuotationId, opts) {
      return this.getDocumentsOfRequestForQuotationWithHttpInfo(requestForQuotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all quotations of one request for quotation
     * Returns a list of all quotations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuotationsResponse} and HTTP response
     */
    getQuotationsOfRequestForQuotationWithHttpInfo(requestForQuotationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuotationsResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/quotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all quotations of one request for quotation
     * Returns a list of all quotations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuotationsResponse}
     */
    getQuotationsOfRequestForQuotation(requestForQuotationId, opts) {
      return this.getQuotationsOfRequestForQuotationWithHttpInfo(requestForQuotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single request for quotation
     * Get a specific request for quotation identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationResponse} and HTTP response
     */
    getRequestForQuotationByIdWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestForQuotationResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single request for quotation
     * Get a specific request for quotation identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationResponse}
     */
    getRequestForQuotationById(id) {
      return this.getRequestForQuotationByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific request for quotation
     * Returns the status of the request for quotation. Needed if only permission on request for quotation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationStatusResponse} and HTTP response
     */
    getRequestForQuotationIdStatusWithHttpInfo(requestForQuotationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestForQuotationStatusResponse;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific request for quotation
     * Returns the status of the request for quotation. Needed if only permission on request for quotation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationStatusResponse}
     */
    getRequestForQuotationIdStatus(requestForQuotationId, opts) {
      return this.getRequestForQuotationIdStatusWithHttpInfo(requestForQuotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of request for quotations
     * Returns a list of request for quotations. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationsResponse} and HTTP response
     */
    getRequestForQuotationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'author': opts['author'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestForQuotationsResponse;

      return this.apiClient.callApi(
        '/request_for_quotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of request for quotations
     * Returns a list of request for quotations. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationsResponse}
     */
    getRequestForQuotations(opts) {
      return this.getRequestForQuotationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the bill of materials of a request for quotation
     * Replaces all bill of materials belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceBillOfMaterialsOfRequestForQuotationWithHttpInfo(body, requestForQuotationId) {
      let postBody = body;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/bill_of_materials', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the bill of materials of a request for quotation
     * Replaces all bill of materials belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceBillOfMaterialsOfRequestForQuotation(body, requestForQuotationId) {
      return this.replaceBillOfMaterialsOfRequestForQuotationWithHttpInfo(body, requestForQuotationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a request for quotation
     * Replaces all documents belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceDocumentsOfRequestForQuotationWithHttpInfo(body, requestForQuotationId) {
      let postBody = body;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/documents', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a request for quotation
     * Replaces all documents belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceDocumentsOfRequestForQuotation(body, requestForQuotationId) {
      return this.replaceDocumentsOfRequestForQuotationWithHttpInfo(body, requestForQuotationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the quotations of a request for quotation
     * Replaces all quotations belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceQuotationsOfRequestForQuotationWithHttpInfo(body, requestForQuotationId) {
      let postBody = body;

      let pathParams = {
        'request_for_quotation_id': requestForQuotationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{request_for_quotation_id}/quotations', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the quotations of a request for quotation
     * Replaces all quotations belonging to a request for quotation. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceQuotationsOfRequestForQuotation(body, requestForQuotationId) {
      return this.replaceQuotationsOfRequestForQuotationWithHttpInfo(body, requestForQuotationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a request for quotation
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateRequestForQuotationWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/request_for_quotations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a request for quotation
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateRequestForQuotation(body, id) {
      return this.updateRequestForQuotationWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
