/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/PermissionRequestCreateRequest', 'model/PermissionRequestResponse', 'model/PermissionRequestUpdateRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/PermissionRequestCreateRequest'), require('../model/PermissionRequestResponse'), require('../model/PermissionRequestUpdateRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.PermissionRequestApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.PermissionRequestCreateRequest, root.NetilionApiDocumentation.PermissionRequestResponse, root.NetilionApiDocumentation.PermissionRequestUpdateRequest);
  }
}(this, function(ApiClient, ErrorResponse, PermissionRequestCreateRequest, PermissionRequestResponse, PermissionRequestUpdateRequest) {
  'use strict';

  /**
   * PermissionRequest service.
   * @module api/PermissionRequestApi
   * @version 01.00.00
   */

  /**
   * Constructs a new PermissionRequestApi. 
   * @alias module:api/PermissionRequestApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new permission request
     * Permissions must have a permission_type, assignable and permitable.
     * @param {module:model/PermissionRequestCreateRequest} body Permission object that needs to be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionRequestResponse} and HTTP response
     */
    this.createPermissionRequestWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPermissionRequest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionRequestResponse;

      return this.apiClient.callApi(
        '/permission_requests', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new permission request
     * Permissions must have a permission_type, assignable and permitable.
     * @param {module:model/PermissionRequestCreateRequest} body Permission object that needs to be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionRequestResponse}
     */
    this.createPermissionRequest = function(body) {
      return this.createPermissionRequestWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a permission request
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the permission request to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deletePermissionRequestWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePermissionRequest");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/permission_requests/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a permission request
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the permission request to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deletePermissionRequest = function(id) {
      return this.deletePermissionRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single permissionRequest
     * Get a specific permission request identified by the id in the URL.
     * @param {Number} id Id of the permission request to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionRequestResponse} and HTTP response
     */
    this.getPermissionRequestByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPermissionRequestById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionRequestResponse;

      return this.apiClient.callApi(
        '/permission_requests/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single permissionRequest
     * Get a specific permission request identified by the id in the URL.
     * @param {Number} id Id of the permission request to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionRequestResponse}
     */
    this.getPermissionRequestById = function(id) {
      return this.getPermissionRequestByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a permission request
     * Update accessible parameters of the requested resource in your accessible scope.
     * @param {Number} id Id of the permission request to update
     * @param {module:model/PermissionRequestUpdateRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updatePermissionRequestWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePermissionRequest");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePermissionRequest");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/permission_requests/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a permission request
     * Update accessible parameters of the requested resource in your accessible scope.
     * @param {Number} id Id of the permission request to update
     * @param {module:model/PermissionRequestUpdateRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updatePermissionRequest = function(id, body) {
      return this.updatePermissionRequestWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
