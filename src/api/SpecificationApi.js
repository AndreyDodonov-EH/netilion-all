/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/SpecificationHistoryResponse', 'model/SpecificationsDelete', 'model/SpecificationsRename', 'model/SpecificationsRequest', 'model/SpecificationsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/SpecificationHistoryResponse'), require('../model/SpecificationsDelete'), require('../model/SpecificationsRename'), require('../model/SpecificationsRequest'), require('../model/SpecificationsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.SpecificationApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.SpecificationHistoryResponse, root.NetilionApiDocumentation.SpecificationsDelete, root.NetilionApiDocumentation.SpecificationsRename, root.NetilionApiDocumentation.SpecificationsRequest, root.NetilionApiDocumentation.SpecificationsResponse);
  }
}(this, function(ApiClient, ErrorResponse, SpecificationHistoryResponse, SpecificationsDelete, SpecificationsRename, SpecificationsRequest, SpecificationsResponse) {
  'use strict';

  /**
   * Specification service.
   * @module api/SpecificationApi
   * @version 01.00.00
   */

  /**
   * Constructs a new SpecificationApi. 
   * @alias module:api/SpecificationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete specifications of an asset
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} assetId Id of the specified asset
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSpecificationsOfAssetWithHttpInfo = function(assetId, body) {
      var postBody = body;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling deleteSpecificationsOfAsset");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteSpecificationsOfAsset");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of an asset
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} assetId Id of the specified asset
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSpecificationsOfAsset = function(assetId, body) {
      return this.deleteSpecificationsOfAssetWithHttpInfo(assetId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the history of one specification attribute of an asset.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Number} assetId Id of the specified asset
     * @param {String} key the exact key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {Date} opts.sourceTimestampFrom source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.sourceTimestampTo source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtFrom updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtTo updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationHistoryResponse} and HTTP response
     */
    this.getSpecificationHistoryOfAssetWithHttpInfo = function(assetId, key, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getSpecificationHistoryOfAsset");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSpecificationHistoryOfAsset");
      }


      var pathParams = {
        'asset_id': assetId,
        'key': key
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'source_timestamp_from': opts['sourceTimestampFrom'],
        'source_timestamp_to': opts['sourceTimestampTo'],
        'updated_at_from': opts['updatedAtFrom'],
        'updated_at_to': opts['updatedAtTo'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationHistoryResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications/{key}/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the history of one specification attribute of an asset.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Number} assetId Id of the specified asset
     * @param {String} key the exact key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {Date} opts.sourceTimestampFrom source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.sourceTimestampTo source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtFrom updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtTo updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationHistoryResponse}
     */
    this.getSpecificationHistoryOfAsset = function(assetId, key, opts) {
      return this.getSpecificationHistoryOfAssetWithHttpInfo(assetId, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the history of one specification attribute of an instrumentation.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {String} key the exact key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {Date} opts.sourceTimestampFrom source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.sourceTimestampTo source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtFrom updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtTo updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationHistoryResponse} and HTTP response
     */
    this.getSpecificationHistoryOfInstrumentationWithHttpInfo = function(instrumentationId, key, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getSpecificationHistoryOfInstrumentation");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSpecificationHistoryOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'key': key
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'source_timestamp_from': opts['sourceTimestampFrom'],
        'source_timestamp_to': opts['sourceTimestampTo'],
        'updated_at_from': opts['updatedAtFrom'],
        'updated_at_to': opts['updatedAtTo'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationHistoryResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications/{key}/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the history of one specification attribute of an instrumentation.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {String} key the exact key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {Date} opts.sourceTimestampFrom source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.sourceTimestampTo source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtFrom updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtTo updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationHistoryResponse}
     */
    this.getSpecificationHistoryOfInstrumentation = function(instrumentationId, key, opts) {
      return this.getSpecificationHistoryOfInstrumentationWithHttpInfo(instrumentationId, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of an asset
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} assetId Id of the specified asset
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    this.getSpecificationsOfAssetWithHttpInfo = function(assetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getSpecificationsOfAsset");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of an asset
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} assetId Id of the specified asset
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    this.getSpecificationsOfAsset = function(assetId, opts) {
      return this.getSpecificationsOfAssetWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of an event
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} eventId Id of the specified event
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    this.getSpecificationsOfEventWithHttpInfo = function(eventId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getSpecificationsOfEvent");
      }


      var pathParams = {
        'event_id': eventId
      };
      var queryParams = {
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/events/{event_id}/specifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of an event
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} eventId Id of the specified event
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    this.getSpecificationsOfEvent = function(eventId, opts) {
      return this.getSpecificationsOfEventWithHttpInfo(eventId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of an instrumentation
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    this.getSpecificationsOfInstrumentationWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getSpecificationsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of an instrumentation
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    this.getSpecificationsOfInstrumentation = function(instrumentationId, opts) {
      return this.getSpecificationsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of a node
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} nodeId Id of the specified node
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    this.getSpecificationsOfNodeWithHttpInfo = function(nodeId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling getSpecificationsOfNode");
      }


      var pathParams = {
        'node_id': nodeId
      };
      var queryParams = {
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/nodes/{node_id}/specifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of a node
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} nodeId Id of the specified node
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    this.getSpecificationsOfNode = function(nodeId, opts) {
      return this.getSpecificationsOfNodeWithHttpInfo(nodeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of a product
     * Returns the specification of an object. If no specifications are defined, this is just an empty object.
     * @param {Number} productId Id of the specified product
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    this.getSpecificationsOfProductWithHttpInfo = function(productId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getSpecificationsOfProduct");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/products/{product_id}/specifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of a product
     * Returns the specification of an object. If no specifications are defined, this is just an empty object.
     * @param {Number} productId Id of the specified product
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    this.getSpecificationsOfProduct = function(productId, opts) {
      return this.getSpecificationsOfProductWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of a subscription
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} subscriptionId Id of the specified subscription
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    this.getSpecificationsOfSubscriptionWithHttpInfo = function(subscriptionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling getSpecificationsOfSubscription");
      }


      var pathParams = {
        'subscription_id': subscriptionId
      };
      var queryParams = {
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/subscriptions/{subscription_id}/specifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of a subscription
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} subscriptionId Id of the specified subscription
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    this.getSpecificationsOfSubscription = function(subscriptionId, opts) {
      return this.getSpecificationsOfSubscriptionWithHttpInfo(subscriptionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of a user
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} userId Id of the specified user
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    this.getSpecificationsOfUserWithHttpInfo = function(userId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getSpecificationsOfUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of a user
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} userId Id of the specified user
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    this.getSpecificationsOfUser = function(userId, opts) {
      return this.getSpecificationsOfUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of an event
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} eventId Id of the specified event
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeSpecificationsFromEventWithHttpInfo = function(eventId, body) {
      var postBody = body;

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling removeSpecificationsFromEvent");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeSpecificationsFromEvent");
      }


      var pathParams = {
        'event_id': eventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/events/{event_id}/specifications', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of an event
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} eventId Id of the specified event
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeSpecificationsFromEvent = function(eventId, body) {
      return this.removeSpecificationsFromEventWithHttpInfo(eventId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of an instrumentation
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeSpecificationsFromInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling removeSpecificationsFromInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeSpecificationsFromInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of an instrumentation
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeSpecificationsFromInstrumentation = function(instrumentationId, body) {
      return this.removeSpecificationsFromInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of a node
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @param {Number} nodeId Id of the specified node
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeSpecificationsFromNodeWithHttpInfo = function(nodeId, body) {
      var postBody = body;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling removeSpecificationsFromNode");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeSpecificationsFromNode");
      }


      var pathParams = {
        'node_id': nodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/specifications', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of a node
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @param {Number} nodeId Id of the specified node
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeSpecificationsFromNode = function(nodeId, body) {
      return this.removeSpecificationsFromNodeWithHttpInfo(nodeId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of a product
     * The specification keys in the body will be removed. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} productId Id of the specified product
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeSpecificationsFromProductWithHttpInfo = function(productId, body) {
      var postBody = body;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling removeSpecificationsFromProduct");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeSpecificationsFromProduct");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/specifications', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of a product
     * The specification keys in the body will be removed. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} productId Id of the specified product
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeSpecificationsFromProduct = function(productId, body) {
      return this.removeSpecificationsFromProductWithHttpInfo(productId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of a subscription
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @param {Number} subscriptionId Id of the specified subscription
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeSpecificationsFromSubscriptionsWithHttpInfo = function(subscriptionId, body) {
      var postBody = body;

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling removeSpecificationsFromSubscriptions");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeSpecificationsFromSubscriptions");
      }


      var pathParams = {
        'subscription_id': subscriptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/subscriptions/{subscription_id}/specifications', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of a subscription
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @param {Number} subscriptionId Id of the specified subscription
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeSpecificationsFromSubscriptions = function(subscriptionId, body) {
      return this.removeSpecificationsFromSubscriptionsWithHttpInfo(subscriptionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of a user
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeSpecificationsFromUsersWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeSpecificationsFromUsers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeSpecificationsFromUsers");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of a user
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeSpecificationsFromUsers = function(userId, body) {
      return this.removeSpecificationsFromUsersWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
     * @param {Number} assetId Id of the specified asset
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameSpecificationsOfAssetWithHttpInfo = function(assetId, body) {
      var postBody = body;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling renameSpecificationsOfAsset");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameSpecificationsOfAsset");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
     * @param {Number} assetId Id of the specified asset
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameSpecificationsOfAsset = function(assetId, body) {
      return this.renameSpecificationsOfAssetWithHttpInfo(assetId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of an event in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} eventId Id of the specified node
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameSpecificationsOfEventWithHttpInfo = function(eventId, body) {
      var postBody = body;

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling renameSpecificationsOfEvent");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameSpecificationsOfEvent");
      }


      var pathParams = {
        'event_id': eventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/events/{event_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of an event in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} eventId Id of the specified node
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameSpecificationsOfEvent = function(eventId, body) {
      return this.renameSpecificationsOfEventWithHttpInfo(eventId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of an instrumentation in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameSpecificationsOfInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling renameSpecificationsOfInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameSpecificationsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of an instrumentation in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameSpecificationsOfInstrumentation = function(instrumentationId, body) {
      return this.renameSpecificationsOfInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of a node in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} nodeId Id of the specified node
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameSpecificationsOfNodeWithHttpInfo = function(nodeId, body) {
      var postBody = body;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling renameSpecificationsOfNode");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameSpecificationsOfNode");
      }


      var pathParams = {
        'node_id': nodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of a node in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} nodeId Id of the specified node
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameSpecificationsOfNode = function(nodeId, body) {
      return this.renameSpecificationsOfNodeWithHttpInfo(nodeId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * rename a key in the specification.
     * Rename a key of the specification object of a product. Instead of delete and recreate again, this is to preserve the key´s value history. Also the new keys can only consist of a-z A-Z 0-9 . - _ all uppercase A-Z are converted to lower-case a-z. Only one key can be changed per request
     * @param {Number} productId Id of the specified product
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameSpecificationsOfProductWithHttpInfo = function(productId, body) {
      var postBody = body;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling renameSpecificationsOfProduct");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameSpecificationsOfProduct");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * rename a key in the specification.
     * Rename a key of the specification object of a product. Instead of delete and recreate again, this is to preserve the key´s value history. Also the new keys can only consist of a-z A-Z 0-9 . - _ all uppercase A-Z are converted to lower-case a-z. Only one key can be changed per request
     * @param {Number} productId Id of the specified product
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameSpecificationsOfProduct = function(productId, body) {
      return this.renameSpecificationsOfProductWithHttpInfo(productId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of a subscription in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} subscriptionId Id of the specified subscription
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameSpecificationsOfSubscriptionsWithHttpInfo = function(subscriptionId, body) {
      var postBody = body;

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling renameSpecificationsOfSubscriptions");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameSpecificationsOfSubscriptions");
      }


      var pathParams = {
        'subscription_id': subscriptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/subscriptions/{subscription_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of a subscription in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} subscriptionId Id of the specified subscription
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameSpecificationsOfSubscriptions = function(subscriptionId, body) {
      return this.renameSpecificationsOfSubscriptionsWithHttpInfo(subscriptionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of a user in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameSpecificationsOfUsersWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling renameSpecificationsOfUsers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameSpecificationsOfUsers");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of a user in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameSpecificationsOfUsers = function(userId, body) {
      return this.renameSpecificationsOfUsersWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of an asset
     * Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#39;vector&#39; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
     * @param {Number} assetId Id of the specified asset
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSpecificationsOfAssetWithHttpInfo = function(assetId, body) {
      var postBody = body;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling updateSpecificationsOfAsset");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpecificationsOfAsset");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of an asset
     * Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#39;vector&#39; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
     * @param {Number} assetId Id of the specified asset
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSpecificationsOfAsset = function(assetId, body) {
      return this.updateSpecificationsOfAssetWithHttpInfo(assetId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of an event
     * Update the specification object of an event in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of a-z A-Z 0-9 . - _ all uppercase A-Z are converted to lower-case a-z. For a key that is send mutliple times in the request body, only the last key-value is saved.
     * @param {Number} eventId Id of the specified event
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSpecificationsOfEventWithHttpInfo = function(eventId, body) {
      var postBody = body;

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling updateSpecificationsOfEvent");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpecificationsOfEvent");
      }


      var pathParams = {
        'event_id': eventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/events/{event_id}/specifications', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of an event
     * Update the specification object of an event in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of a-z A-Z 0-9 . - _ all uppercase A-Z are converted to lower-case a-z. For a key that is send mutliple times in the request body, only the last key-value is saved.
     * @param {Number} eventId Id of the specified event
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSpecificationsOfEvent = function(eventId, body) {
      return this.updateSpecificationsOfEventWithHttpInfo(eventId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of an instrumentation
     * Update the specification object of an instrumentation in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSpecificationsOfInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling updateSpecificationsOfInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpecificationsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of an instrumentation
     * Update the specification object of an instrumentation in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSpecificationsOfInstrumentation = function(instrumentationId, body) {
      return this.updateSpecificationsOfInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of a node
     * Update the specification object of a node in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} nodeId Id of the specified node
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSpecificationsOfNodeWithHttpInfo = function(nodeId, body) {
      var postBody = body;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling updateSpecificationsOfNode");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpecificationsOfNode");
      }


      var pathParams = {
        'node_id': nodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/specifications', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of a node
     * Update the specification object of a node in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} nodeId Id of the specified node
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSpecificationsOfNode = function(nodeId, body) {
      return this.updateSpecificationsOfNodeWithHttpInfo(nodeId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of a product
     * Update the specification object of a product. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. If a key occurs more than once in the request body, the last key-value will be saved.
     * @param {Number} productId Id of the specified product
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSpecificationsOfProductWithHttpInfo = function(productId, body) {
      var postBody = body;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling updateSpecificationsOfProduct");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpecificationsOfProduct");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/specifications', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of a product
     * Update the specification object of a product. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. If a key occurs more than once in the request body, the last key-value will be saved.
     * @param {Number} productId Id of the specified product
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSpecificationsOfProduct = function(productId, body) {
      return this.updateSpecificationsOfProductWithHttpInfo(productId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of a subscription
     * Update the specification object of a subscription in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} subscriptionId Id of the specified subscription
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSpecificationsOfSubscriptionsWithHttpInfo = function(subscriptionId, body) {
      var postBody = body;

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling updateSpecificationsOfSubscriptions");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpecificationsOfSubscriptions");
      }


      var pathParams = {
        'subscription_id': subscriptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/subscriptions/{subscription_id}/specifications', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of a subscription
     * Update the specification object of a subscription in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} subscriptionId Id of the specified subscription
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSpecificationsOfSubscriptions = function(subscriptionId, body) {
      return this.updateSpecificationsOfSubscriptionsWithHttpInfo(subscriptionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of a user
     * Update the specification object of a user in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSpecificationsOfUsersWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateSpecificationsOfUsers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpecificationsOfUsers");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of a user
     * Update the specification object of a user in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSpecificationsOfUsers = function(userId, body) {
      return this.updateSpecificationsOfUsersWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
