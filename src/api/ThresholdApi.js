/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ThresholdRequest from '../model/ThresholdRequest';
import ThresholdResponse from '../model/ThresholdResponse';
import ThresholdsResponse from '../model/ThresholdsResponse';

/**
* Threshold service.
* @module api/ThresholdApi
* @version 01.00.00
*/
export default class ThresholdApi {

    /**
    * Constructs a new ThresholdApi. 
    * @alias module:api/ThresholdApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an instrumentation threshold
     * Create a new instrumentation threshold. Thresholds value order must be &#x60;&#x60;&#x60;low_low &lt; low &lt; high &lt; high_high&#x60;&#x60;&#x60;. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    createInstrumentationThresholdWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an instrumentation threshold
     * Create a new instrumentation threshold. Thresholds value order must be &#x60;&#x60;&#x60;low_low &lt; low &lt; high &lt; high_high&#x60;&#x60;&#x60;. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    createInstrumentationThreshold(body, instrumentationId) {
      return this.createInstrumentationThresholdWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an instrumentation threshold
     * Delete an instrumentation threshold.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteInstrumentationThresholdWithHttpInfo(instrumentationId, id) {
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an instrumentation threshold
     * Delete an instrumentation threshold.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteInstrumentationThreshold(instrumentationId, id) {
      return this.deleteInstrumentationThresholdWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an instrumentation threshold
     * Get a single threshold of an instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    getInstrumentationThresholdWithHttpInfo(instrumentationId, id) {
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an instrumentation threshold
     * Get a single threshold of an instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    getInstrumentationThreshold(instrumentationId, id) {
      return this.getInstrumentationThresholdWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get instrumentation thresholds
     * Get all thresholds of an instrumentation.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdsResponse} and HTTP response
     */
    getInstrumentationThresholdsWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'key': opts['key'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThresholdsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get instrumentation thresholds
     * Get all thresholds of an instrumentation.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdsResponse}
     */
    getInstrumentationThresholds(instrumentationId, opts) {
      return this.getInstrumentationThresholdsWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation threshold
     * Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_udpate&#x60; permission on the instrumentation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    updateInstrumentationThresholdWithHttpInfo(body, instrumentationId, id) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation threshold
     * Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_udpate&#x60; permission on the instrumentation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    updateInstrumentationThreshold(body, instrumentationId, id) {
      return this.updateInstrumentationThresholdWithHttpInfo(body, instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
