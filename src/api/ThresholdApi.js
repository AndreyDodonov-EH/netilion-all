/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/ThresholdRequest', 'model/ThresholdResponse', 'model/ThresholdsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/ThresholdRequest'), require('../model/ThresholdResponse'), require('../model/ThresholdsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.ThresholdApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.ThresholdRequest, root.NetilionApiDocumentation.ThresholdResponse, root.NetilionApiDocumentation.ThresholdsResponse);
  }
}(this, function(ApiClient, ErrorResponse, ThresholdRequest, ThresholdResponse, ThresholdsResponse) {
  'use strict';

  /**
   * Threshold service.
   * @module api/ThresholdApi
   * @version 01.00.00
   */

  /**
   * Constructs a new ThresholdApi. 
   * @alias module:api/ThresholdApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an instrumentation threshold
     * Create a new instrumentation threshold. Thresholds value order must be &#x60;&#x60;&#x60;low_low &lt; low &lt; high &lt; high_high&#x60;&#x60;&#x60;. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/ThresholdRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    this.createInstrumentationThresholdWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling createInstrumentationThreshold");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInstrumentationThreshold");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an instrumentation threshold
     * Create a new instrumentation threshold. Thresholds value order must be &#x60;&#x60;&#x60;low_low &lt; low &lt; high &lt; high_high&#x60;&#x60;&#x60;. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/ThresholdRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    this.createInstrumentationThreshold = function(instrumentationId, body) {
      return this.createInstrumentationThresholdWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an instrumentation threshold
     * Delete an instrumentation threshold.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteInstrumentationThresholdWithHttpInfo = function(instrumentationId, id) {
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling deleteInstrumentationThreshold");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInstrumentationThreshold");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an instrumentation threshold
     * Delete an instrumentation threshold.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteInstrumentationThreshold = function(instrumentationId, id) {
      return this.deleteInstrumentationThresholdWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an instrumentation threshold
     * Get a single threshold of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    this.getInstrumentationThresholdWithHttpInfo = function(instrumentationId, id) {
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getInstrumentationThreshold");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentationThreshold");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an instrumentation threshold
     * Get a single threshold of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    this.getInstrumentationThreshold = function(instrumentationId, id) {
      return this.getInstrumentationThresholdWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get instrumentation thresholds
     * Get all thresholds of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.key filter by key
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;key&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdsResponse} and HTTP response
     */
    this.getInstrumentationThresholdsWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getInstrumentationThresholds");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'key': opts['key'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThresholdsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get instrumentation thresholds
     * Get all thresholds of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.key filter by key
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;key&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdsResponse}
     */
    this.getInstrumentationThresholds = function(instrumentationId, opts) {
      return this.getInstrumentationThresholdsWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation threshold
     * Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_udpate&#x60; permission on the instrumentation
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @param {module:model/ThresholdRequest} body Object body that will be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    this.updateInstrumentationThresholdWithHttpInfo = function(instrumentationId, id, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling updateInstrumentationThreshold");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstrumentationThreshold");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInstrumentationThreshold");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation threshold
     * Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_udpate&#x60; permission on the instrumentation
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @param {module:model/ThresholdRequest} body Object body that will be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    this.updateInstrumentationThreshold = function(instrumentationId, id, body) {
      return this.updateInstrumentationThresholdWithHttpInfo(instrumentationId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
