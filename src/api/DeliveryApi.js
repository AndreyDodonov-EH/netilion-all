/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AssetIDs', 'model/AssetsResponse', 'model/DeliveriesResponse', 'model/DeliveryRequest', 'model/DeliveryResponse', 'model/DeliveryStatusResponse', 'model/DocumentIDs', 'model/DocumentsResponse', 'model/ErrorResponse', 'model/PurchaseOrderIDs', 'model/PurchaseOrdersResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AssetIDs'), require('../model/AssetsResponse'), require('../model/DeliveriesResponse'), require('../model/DeliveryRequest'), require('../model/DeliveryResponse'), require('../model/DeliveryStatusResponse'), require('../model/DocumentIDs'), require('../model/DocumentsResponse'), require('../model/ErrorResponse'), require('../model/PurchaseOrderIDs'), require('../model/PurchaseOrdersResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.DeliveryApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.AssetIDs, root.NetilionApiDocumentation.AssetsResponse, root.NetilionApiDocumentation.DeliveriesResponse, root.NetilionApiDocumentation.DeliveryRequest, root.NetilionApiDocumentation.DeliveryResponse, root.NetilionApiDocumentation.DeliveryStatusResponse, root.NetilionApiDocumentation.DocumentIDs, root.NetilionApiDocumentation.DocumentsResponse, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.PurchaseOrderIDs, root.NetilionApiDocumentation.PurchaseOrdersResponse);
  }
}(this, function(ApiClient, AssetIDs, AssetsResponse, DeliveriesResponse, DeliveryRequest, DeliveryResponse, DeliveryStatusResponse, DocumentIDs, DocumentsResponse, ErrorResponse, PurchaseOrderIDs, PurchaseOrdersResponse) {
  'use strict';

  /**
   * Delivery service.
   * @module api/DeliveryApi
   * @version 01.00.00
   */

  /**
   * Constructs a new DeliveryApi. 
   * @alias module:api/DeliveryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add assets to a delivery
     * Add one or more assets to a delivery.
     * @param {Number} deliveryId Id of the delivery to which the assets will be added
     * @param {module:model/AssetIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addAssetsToDeliveryWithHttpInfo = function(deliveryId, body) {
      var postBody = body;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling addAssetsToDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addAssetsToDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/assets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add assets to a delivery
     * Add one or more assets to a delivery.
     * @param {Number} deliveryId Id of the delivery to which the assets will be added
     * @param {module:model/AssetIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addAssetsToDelivery = function(deliveryId, body) {
      return this.addAssetsToDeliveryWithHttpInfo(deliveryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to a delivery
     * Add one or more documents to a delivery.
     * @param {Number} deliveryId Id of the delivery to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addDocumentsToDeliveryWithHttpInfo = function(deliveryId, body) {
      var postBody = body;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling addDocumentsToDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDocumentsToDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a delivery
     * Add one or more documents to a delivery.
     * @param {Number} deliveryId Id of the delivery to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addDocumentsToDelivery = function(deliveryId, body) {
      return this.addDocumentsToDeliveryWithHttpInfo(deliveryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add all purchase oders to a delivery
     * Add one or more all purchase oders to a delivery.
     * @param {Number} deliveryId Id of the delivery to which the all purchase oders will be added
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addPurchaseOrdersToDeliveryWithHttpInfo = function(deliveryId, body) {
      var postBody = body;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling addPurchaseOrdersToDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPurchaseOrdersToDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/purchase_orders', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add all purchase oders to a delivery
     * Add one or more all purchase oders to a delivery.
     * @param {Number} deliveryId Id of the delivery to which the all purchase oders will be added
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addPurchaseOrdersToDelivery = function(deliveryId, body) {
      return this.addPurchaseOrdersToDeliveryWithHttpInfo(deliveryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new delivery
     * Delivery must have a name, number, sender, receiver and a status.
     * @param {module:model/DeliveryRequest} body Delivery to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveryResponse} and HTTP response
     */
    this.createDeliveryWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDelivery");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeliveryResponse;

      return this.apiClient.callApi(
        '/deliveries', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new delivery
     * Delivery must have a name, number, sender, receiver and a status.
     * @param {module:model/DeliveryRequest} body Delivery to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveryResponse}
     */
    this.createDelivery = function(body) {
      return this.createDeliveryWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a delivery
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the delivery to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteDeliveryWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDelivery");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a delivery
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the delivery to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteDelivery = function(id) {
      return this.deleteDeliveryWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all assets of one delivery
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant, product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Number} deliveryId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.serialNumber Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.productId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.manufacturerId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {Date} opts.productionDate Expected date format is YYYY-MM-DD
     * @param {Date} opts.productionDateFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.productionDateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetsResponse} and HTTP response
     */
    this.getAssetsOfDeliveryWithHttpInfo = function(deliveryId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling getAssetsOfDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'serial_number': opts['serialNumber'],
        'product_id': opts['productId'],
        'category_id': opts['categoryId'],
        'parent_id': opts['parentId'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'status_code': opts['statusCode'],
        'production_date': opts['productionDate'],
        'production_date_from': opts['productionDateFrom'],
        'production_date_to': opts['productionDateTo'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetsResponse;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/assets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all assets of one delivery
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant, product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Number} deliveryId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.serialNumber Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.productId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.manufacturerId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {Date} opts.productionDate Expected date format is YYYY-MM-DD
     * @param {Date} opts.productionDateFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.productionDateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetsResponse}
     */
    this.getAssetsOfDelivery = function(deliveryId, opts) {
      return this.getAssetsOfDeliveryWithHttpInfo(deliveryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of deliveries
     * Returns a list of deliveries in your accessible scope. If the query has no matches, the response is an empty list. Only deliveries on which the user has the can_read permission are loaded
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {Date} opts.dateOfShipment Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveriesResponse} and HTTP response
     */
    this.getDeliveriesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'number': opts['_number'],
        'name': opts['name'],
        'status_id': opts['statusId'],
        'date_of_shipment': opts['dateOfShipment'],
        'date_of_shipment_from': opts['dateOfShipmentFrom'],
        'date_of_shipment_to': opts['dateOfShipmentTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeliveriesResponse;

      return this.apiClient.callApi(
        '/deliveries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of deliveries
     * Returns a list of deliveries in your accessible scope. If the query has no matches, the response is an empty list. Only deliveries on which the user has the can_read permission are loaded
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {Date} opts.dateOfShipment Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveriesResponse}
     */
    this.getDeliveries = function(opts) {
      return this.getDeliveriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single delivery
     * Get a specific delivery in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the delivery to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveryResponse} and HTTP response
     */
    this.getDeliveryByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeliveryById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeliveryResponse;

      return this.apiClient.callApi(
        '/deliveries/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single delivery
     * Get a specific delivery in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the delivery to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveryResponse}
     */
    this.getDeliveryById = function(id) {
      return this.getDeliveryByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific delivery
     * Returns the status of the delivery. You can apply the query parameters listed below to get a filtered list. Required Permissions: &#x60;&#x60;&#x60;can_read&#x60;&#x60;&#x60; Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Number} deliveryId Id of the specified delivery
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveryStatusResponse} and HTTP response
     */
    this.getDeliveryIdStatusWithHttpInfo = function(deliveryId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling getDeliveryIdStatus");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeliveryStatusResponse;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific delivery
     * Returns the status of the delivery. You can apply the query parameters listed below to get a filtered list. Required Permissions: &#x60;&#x60;&#x60;can_read&#x60;&#x60;&#x60; Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Number} deliveryId Id of the specified delivery
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveryStatusResponse}
     */
    this.getDeliveryIdStatus = function(deliveryId, opts) {
      return this.getDeliveryIdStatusWithHttpInfo(deliveryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of one delivery
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} deliveryId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    this.getDocumentsOfDeliveryWithHttpInfo = function(deliveryId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling getDocumentsOfDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of one delivery
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} deliveryId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    this.getDocumentsOfDelivery = function(deliveryId, opts) {
      return this.getDocumentsOfDeliveryWithHttpInfo(deliveryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all purchase orders of one delivery
     * Returns a list of all all purchase oder that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} deliveryId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.quotationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrdersResponse} and HTTP response
     */
    this.getPurchaseOrdersOfDeliveryWithHttpInfo = function(deliveryId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling getPurchaseOrdersOfDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'quotation_id': opts['quotationId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseOrdersResponse;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/purchase_orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all purchase orders of one delivery
     * Returns a list of all all purchase oder that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} deliveryId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.quotationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrdersResponse}
     */
    this.getPurchaseOrdersOfDelivery = function(deliveryId, opts) {
      return this.getPurchaseOrdersOfDeliveryWithHttpInfo(deliveryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove assets from a delivery
     * Remove one or more assets from a delivery in your accessible scope.
     * @param {Number} deliveryId Id of the delivery from which the assets will be removed
     * @param {module:model/AssetIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeAssetsFromDeliveryWithHttpInfo = function(deliveryId, body) {
      var postBody = body;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling removeAssetsFromDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeAssetsFromDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/assets', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove assets from a delivery
     * Remove one or more assets from a delivery in your accessible scope.
     * @param {Number} deliveryId Id of the delivery from which the assets will be removed
     * @param {module:model/AssetIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeAssetsFromDelivery = function(deliveryId, body) {
      return this.removeAssetsFromDeliveryWithHttpInfo(deliveryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a delivery
     * Remove one or more documents from a delivery in your accessible scope.
     * @param {Number} deliveryId Id of the delivery from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeDocumentsFromDeliveryWithHttpInfo = function(deliveryId, body) {
      var postBody = body;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling removeDocumentsFromDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeDocumentsFromDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/documents', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a delivery
     * Remove one or more documents from a delivery in your accessible scope.
     * @param {Number} deliveryId Id of the delivery from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeDocumentsFromDelivery = function(deliveryId, body) {
      return this.removeDocumentsFromDeliveryWithHttpInfo(deliveryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove purchase orders from a delivery
     * Remove one or more purchase orders from a delivery in your accessible scope.
     * @param {Number} deliveryId Id of the delivery from which the purchase orders will be removed
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removePurchaseOrdersFromDeliveryWithHttpInfo = function(deliveryId, body) {
      var postBody = body;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling removePurchaseOrdersFromDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removePurchaseOrdersFromDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/purchase_orders', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove purchase orders from a delivery
     * Remove one or more purchase orders from a delivery in your accessible scope.
     * @param {Number} deliveryId Id of the delivery from which the purchase orders will be removed
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removePurchaseOrdersFromDelivery = function(deliveryId, body) {
      return this.removePurchaseOrdersFromDeliveryWithHttpInfo(deliveryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the assets of a delivery
     * Replaces all assets belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @param {Number} deliveryId Id of the delivery of which the assets will be replaced
     * @param {module:model/AssetIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceAssetsOfDeliveryWithHttpInfo = function(deliveryId, body) {
      var postBody = body;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling replaceAssetsOfDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAssetsOfDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/assets', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the assets of a delivery
     * Replaces all assets belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @param {Number} deliveryId Id of the delivery of which the assets will be replaced
     * @param {module:model/AssetIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceAssetsOfDelivery = function(deliveryId, body) {
      return this.replaceAssetsOfDeliveryWithHttpInfo(deliveryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a delivery
     * Replaces all documents belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @param {Number} deliveryId Id of the delivery of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceDocumentsOfDeliveryWithHttpInfo = function(deliveryId, body) {
      var postBody = body;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling replaceDocumentsOfDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceDocumentsOfDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/documents', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a delivery
     * Replaces all documents belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @param {Number} deliveryId Id of the delivery of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceDocumentsOfDelivery = function(deliveryId, body) {
      return this.replaceDocumentsOfDeliveryWithHttpInfo(deliveryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the purchase orders of a delivery
     * Replaces all purchase orders belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @param {Number} deliveryId Id of the delivery of which the purchase orders will be replaced
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replacePurchaseOrdersOfDeliveryWithHttpInfo = function(deliveryId, body) {
      var postBody = body;

      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling replacePurchaseOrdersOfDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replacePurchaseOrdersOfDelivery");
      }


      var pathParams = {
        'delivery_id': deliveryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/purchase_orders', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the purchase orders of a delivery
     * Replaces all purchase orders belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @param {Number} deliveryId Id of the delivery of which the purchase orders will be replaced
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replacePurchaseOrdersOfDelivery = function(deliveryId, body) {
      return this.replacePurchaseOrdersOfDeliveryWithHttpInfo(deliveryId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a delivery
     * Update accessible parameters of the requested resource in your accessible scope.
     * @param {Number} id Id of the delivery to update
     * @param {module:model/DeliveryRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateDeliveryWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDelivery");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDelivery");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a delivery
     * Update accessible parameters of the requested resource in your accessible scope.
     * @param {Number} id Id of the delivery to update
     * @param {module:model/DeliveryRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateDelivery = function(id, body) {
      return this.updateDeliveryWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
