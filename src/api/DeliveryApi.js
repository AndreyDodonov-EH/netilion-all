/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AssetIDs from '../model/AssetIDs';
import AssetsResponse from '../model/AssetsResponse';
import DeliveriesResponse from '../model/DeliveriesResponse';
import DeliveryRequest from '../model/DeliveryRequest';
import DeliveryResponse from '../model/DeliveryResponse';
import DeliveryStatusResponse from '../model/DeliveryStatusResponse';
import DocumentIDs from '../model/DocumentIDs';
import DocumentsResponse from '../model/DocumentsResponse';
import ErrorResponse from '../model/ErrorResponse';
import PurchaseOrderIDs from '../model/PurchaseOrderIDs';
import PurchaseOrdersResponse from '../model/PurchaseOrdersResponse';

/**
* Delivery service.
* @module api/DeliveryApi
* @version 01.00.00
*/
export default class DeliveryApi {

    /**
    * Constructs a new DeliveryApi. 
    * @alias module:api/DeliveryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add assets to a delivery
     * Add one or more assets to a delivery.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addAssetsToDeliveryWithHttpInfo(body, deliveryId) {
      let postBody = body;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add assets to a delivery
     * Add one or more assets to a delivery.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addAssetsToDelivery(body, deliveryId) {
      return this.addAssetsToDeliveryWithHttpInfo(body, deliveryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to a delivery
     * Add one or more documents to a delivery.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDocumentsToDeliveryWithHttpInfo(body, deliveryId) {
      let postBody = body;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a delivery
     * Add one or more documents to a delivery.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDocumentsToDelivery(body, deliveryId) {
      return this.addDocumentsToDeliveryWithHttpInfo(body, deliveryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add all purchase oders to a delivery
     * Add one or more all purchase oders to a delivery.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addPurchaseOrdersToDeliveryWithHttpInfo(body, deliveryId) {
      let postBody = body;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/purchase_orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add all purchase oders to a delivery
     * Add one or more all purchase oders to a delivery.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addPurchaseOrdersToDelivery(body, deliveryId) {
      return this.addPurchaseOrdersToDeliveryWithHttpInfo(body, deliveryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new delivery
     * Delivery must have a name, number, sender, receiver and a status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveryResponse} and HTTP response
     */
    createDeliveryWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeliveryResponse;

      return this.apiClient.callApi(
        '/deliveries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new delivery
     * Delivery must have a name, number, sender, receiver and a status.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveryResponse}
     */
    createDelivery(body) {
      return this.createDeliveryWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a delivery
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDeliveryWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a delivery
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDelivery(id) {
      return this.deleteDeliveryWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all assets of one delivery
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant, product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetsResponse} and HTTP response
     */
    getAssetsOfDeliveryWithHttpInfo(deliveryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'serial_number': opts['serialNumber'],
        'product_id': opts['productId'],
        'category_id': opts['categoryId'],
        'parent_id': opts['parentId'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'status_code': opts['statusCode'],
        'production_date': opts['productionDate'],
        'production_date_from': opts['productionDateFrom'],
        'production_date_to': opts['productionDateTo'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetsResponse;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all assets of one delivery
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant, product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetsResponse}
     */
    getAssetsOfDelivery(deliveryId, opts) {
      return this.getAssetsOfDeliveryWithHttpInfo(deliveryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of deliveries
     * Returns a list of deliveries in your accessible scope. If the query has no matches, the response is an empty list. Only deliveries on which the user has the can_read permission are loaded
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveriesResponse} and HTTP response
     */
    getDeliveriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'number': opts['_number'],
        'name': opts['name'],
        'status_id': opts['statusId'],
        'date_of_shipment': opts['dateOfShipment'],
        'date_of_shipment_from': opts['dateOfShipmentFrom'],
        'date_of_shipment_to': opts['dateOfShipmentTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeliveriesResponse;

      return this.apiClient.callApi(
        '/deliveries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of deliveries
     * Returns a list of deliveries in your accessible scope. If the query has no matches, the response is an empty list. Only deliveries on which the user has the can_read permission are loaded
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveriesResponse}
     */
    getDeliveries(opts) {
      return this.getDeliveriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single delivery
     * Get a specific delivery in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveryResponse} and HTTP response
     */
    getDeliveryByIdWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeliveryResponse;

      return this.apiClient.callApi(
        '/deliveries/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single delivery
     * Get a specific delivery in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveryResponse}
     */
    getDeliveryById(id) {
      return this.getDeliveryByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific delivery
     * Returns the status of the delivery. You can apply the query parameters listed below to get a filtered list. Required Permissions: &#x60;&#x60;&#x60;can_read&#x60;&#x60;&#x60; Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveryStatusResponse} and HTTP response
     */
    getDeliveryIdStatusWithHttpInfo(deliveryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeliveryStatusResponse;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific delivery
     * Returns the status of the delivery. You can apply the query parameters listed below to get a filtered list. Required Permissions: &#x60;&#x60;&#x60;can_read&#x60;&#x60;&#x60; Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveryStatusResponse}
     */
    getDeliveryIdStatus(deliveryId, opts) {
      return this.getDeliveryIdStatusWithHttpInfo(deliveryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of one delivery
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    getDocumentsOfDeliveryWithHttpInfo(deliveryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'valid_from': opts['validFrom'],
        'valid_until': opts['validUntil'],
        'valid_at': opts['validAt'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of one delivery
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    getDocumentsOfDelivery(deliveryId, opts) {
      return this.getDocumentsOfDeliveryWithHttpInfo(deliveryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all purchase orders of one delivery
     * Returns a list of all all purchase oder that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrdersResponse} and HTTP response
     */
    getPurchaseOrdersOfDeliveryWithHttpInfo(deliveryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'quotation_id': opts['quotationId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PurchaseOrdersResponse;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/purchase_orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all purchase orders of one delivery
     * Returns a list of all all purchase oder that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrdersResponse}
     */
    getPurchaseOrdersOfDelivery(deliveryId, opts) {
      return this.getPurchaseOrdersOfDeliveryWithHttpInfo(deliveryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove assets from a delivery
     * Remove one or more assets from a delivery in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeAssetsFromDeliveryWithHttpInfo(body, deliveryId) {
      let postBody = body;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/assets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove assets from a delivery
     * Remove one or more assets from a delivery in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeAssetsFromDelivery(body, deliveryId) {
      return this.removeAssetsFromDeliveryWithHttpInfo(body, deliveryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a delivery
     * Remove one or more documents from a delivery in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDocumentsFromDeliveryWithHttpInfo(body, deliveryId) {
      let postBody = body;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a delivery
     * Remove one or more documents from a delivery in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDocumentsFromDelivery(body, deliveryId) {
      return this.removeDocumentsFromDeliveryWithHttpInfo(body, deliveryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove purchase orders from a delivery
     * Remove one or more purchase orders from a delivery in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removePurchaseOrdersFromDeliveryWithHttpInfo(body, deliveryId) {
      let postBody = body;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/purchase_orders', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove purchase orders from a delivery
     * Remove one or more purchase orders from a delivery in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removePurchaseOrdersFromDelivery(body, deliveryId) {
      return this.removePurchaseOrdersFromDeliveryWithHttpInfo(body, deliveryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the assets of a delivery
     * Replaces all assets belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceAssetsOfDeliveryWithHttpInfo(body, deliveryId) {
      let postBody = body;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/assets', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the assets of a delivery
     * Replaces all assets belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceAssetsOfDelivery(body, deliveryId) {
      return this.replaceAssetsOfDeliveryWithHttpInfo(body, deliveryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a delivery
     * Replaces all documents belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceDocumentsOfDeliveryWithHttpInfo(body, deliveryId) {
      let postBody = body;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/documents', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a delivery
     * Replaces all documents belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceDocumentsOfDelivery(body, deliveryId) {
      return this.replaceDocumentsOfDeliveryWithHttpInfo(body, deliveryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the purchase orders of a delivery
     * Replaces all purchase orders belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replacePurchaseOrdersOfDeliveryWithHttpInfo(body, deliveryId) {
      let postBody = body;

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{delivery_id}/purchase_orders', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the purchase orders of a delivery
     * Replaces all purchase orders belonging to a delivery. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replacePurchaseOrdersOfDelivery(body, deliveryId) {
      return this.replacePurchaseOrdersOfDeliveryWithHttpInfo(body, deliveryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a delivery
     * Update accessible parameters of the requested resource in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateDeliveryWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deliveries/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a delivery
     * Update accessible parameters of the requested resource in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateDelivery(body, id) {
      return this.updateDeliveryWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
