/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DocumentIDs', 'model/DocumentsResponse', 'model/ErrorResponse', 'model/ProductIDs', 'model/ProductQuantity', 'model/ProductsResponse', 'model/PurchaseOrderIDs', 'model/PurchaseOrdersResponse', 'model/QuotationRequest', 'model/QuotationResponse', 'model/QuotationStatusResponse', 'model/QuotationsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DocumentIDs'), require('../model/DocumentsResponse'), require('../model/ErrorResponse'), require('../model/ProductIDs'), require('../model/ProductQuantity'), require('../model/ProductsResponse'), require('../model/PurchaseOrderIDs'), require('../model/PurchaseOrdersResponse'), require('../model/QuotationRequest'), require('../model/QuotationResponse'), require('../model/QuotationStatusResponse'), require('../model/QuotationsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.QuotationApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.DocumentIDs, root.NetilionApiDocumentation.DocumentsResponse, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.ProductIDs, root.NetilionApiDocumentation.ProductQuantity, root.NetilionApiDocumentation.ProductsResponse, root.NetilionApiDocumentation.PurchaseOrderIDs, root.NetilionApiDocumentation.PurchaseOrdersResponse, root.NetilionApiDocumentation.QuotationRequest, root.NetilionApiDocumentation.QuotationResponse, root.NetilionApiDocumentation.QuotationStatusResponse, root.NetilionApiDocumentation.QuotationsResponse);
  }
}(this, function(ApiClient, DocumentIDs, DocumentsResponse, ErrorResponse, ProductIDs, ProductQuantity, ProductsResponse, PurchaseOrderIDs, PurchaseOrdersResponse, QuotationRequest, QuotationResponse, QuotationStatusResponse, QuotationsResponse) {
  'use strict';

  /**
   * Quotation service.
   * @module api/QuotationApi
   * @version 01.00.00
   */

  /**
   * Constructs a new QuotationApi. 
   * @alias module:api/QuotationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add documents to a quotation
     * Add one or more documents to a quotation.
     * @param {Number} quotationId Id of the quotation to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addDocumentsToQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling addDocumentsToQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDocumentsToQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a quotation
     * Add one or more documents to a quotation.
     * @param {Number} quotationId Id of the quotation to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addDocumentsToQuotation = function(quotationId, body) {
      return this.addDocumentsToQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add products to a quotation
     * Add one or more products to a quotation.
     * @param {Number} quotationId Id of the quotation to which the products will be added
     * @param {module:model/ProductIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addProductsToQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling addProductsToQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addProductsToQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/products', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add products to a quotation
     * Add one or more products to a quotation.
     * @param {Number} quotationId Id of the quotation to which the products will be added
     * @param {module:model/ProductIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addProductsToQuotation = function(quotationId, body) {
      return this.addProductsToQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add purchase orders to a quotation
     * Add one or more purchase orders to a quotation.
     * @param {Number} quotationId Id of the quotation to which the purchase orders will be added
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addPurchaseOrdersToQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling addPurchaseOrdersToQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPurchaseOrdersToQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/purchase_orders', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add purchase orders to a quotation
     * Add one or more purchase orders to a quotation.
     * @param {Number} quotationId Id of the quotation to which the purchase orders will be added
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addPurchaseOrdersToQuotation = function(quotationId, body) {
      return this.addPurchaseOrdersToQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new quotation
     * Create a new quotation with a sender and a receiver.
     * @param {module:model/QuotationRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuotationResponse} and HTTP response
     */
    this.createQuotationWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createQuotation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuotationResponse;

      return this.apiClient.callApi(
        '/quotations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new quotation
     * Create a new quotation with a sender and a receiver.
     * @param {module:model/QuotationRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuotationResponse}
     */
    this.createQuotation = function(body) {
      return this.createQuotationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a quotation
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the quotation to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteQuotationWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQuotation");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a quotation
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the quotation to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteQuotation = function(id) {
      return this.deleteQuotationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of one quotation
     * Returns a list of documents. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} quotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {Date} opts.validFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntil Expected date format is YYYY-MM-DD
     * @param {Date} opts.validAt Expected date format is YYYY-MM-DD or YYYY-MM or YYYY
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    this.getDocumentsOfQuotationWithHttpInfo = function(quotationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling getDocumentsOfQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'valid_from': opts['validFrom'],
        'valid_until': opts['validUntil'],
        'valid_at': opts['validAt'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of one quotation
     * Returns a list of documents. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} quotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {Date} opts.validFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntil Expected date format is YYYY-MM-DD
     * @param {Date} opts.validAt Expected date format is YYYY-MM-DD or YYYY-MM or YYYY
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    this.getDocumentsOfQuotation = function(quotationId, opts) {
      return this.getDocumentsOfQuotationWithHttpInfo(quotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all products of one quotation
     * Returns a list of all products that are available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Number} quotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.productCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.manufacturerId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductsResponse} and HTTP response
     */
    this.getProductsOfQuotationWithHttpInfo = function(quotationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling getProductsOfQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'product_code': opts['productCode'],
        'name': opts['name'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'parent_id': opts['parentId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductsResponse;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/products', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all products of one quotation
     * Returns a list of all products that are available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Number} quotationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.productCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.manufacturerId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductsResponse}
     */
    this.getProductsOfQuotation = function(quotationId, opts) {
      return this.getProductsOfQuotationWithHttpInfo(quotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all purchase orders of one quotation
     * Returns a list of all purchase orders that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @param {String} opts.quotationId One or multiple ids (comma list). Expected id format is integer
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrdersResponse} and HTTP response
     */
    this.getPurchaseOrdersOfQuotationWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'quotation_id': opts['quotationId'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'status_id': opts['statusId'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseOrdersResponse;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/purchase_orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all purchase orders of one quotation
     * Returns a list of all purchase orders that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @param {String} opts.quotationId One or multiple ids (comma list). Expected id format is integer
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrdersResponse}
     */
    this.getPurchaseOrdersOfQuotation = function(opts) {
      return this.getPurchaseOrdersOfQuotationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single quotation
     * Get a specific quotation identified by the id in the URL.
     * @param {Number} id Id of the quotation to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuotationResponse} and HTTP response
     */
    this.getQuotationByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuotationById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuotationResponse;

      return this.apiClient.callApi(
        '/quotations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single quotation
     * Get a specific quotation identified by the id in the URL.
     * @param {Number} id Id of the quotation to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuotationResponse}
     */
    this.getQuotationById = function(id) {
      return this.getQuotationByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific quotation
     * Returns the status of the quotation. Needed if only permission on quotation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Number} quotationId Id of the specified quotation
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuotationStatusResponse} and HTTP response
     */
    this.getQuotationIdStatusWithHttpInfo = function(quotationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling getQuotationIdStatus");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuotationStatusResponse;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific quotation
     * Returns the status of the quotation. Needed if only permission on quotation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Number} quotationId Id of the specified quotation
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuotationStatusResponse}
     */
    this.getQuotationIdStatus = function(quotationId, opts) {
      return this.getQuotationIdStatusWithHttpInfo(quotationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of quotations
     * Returns a list of quotations. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.requestForQuotationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuotationsResponse} and HTTP response
     */
    this.getQuotationsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'request_for_quotation_id': opts['requestForQuotationId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuotationsResponse;

      return this.apiClient.callApi(
        '/quotations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of quotations
     * Returns a list of quotations. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.requestForQuotationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuotationsResponse}
     */
    this.getQuotations = function(opts) {
      return this.getQuotationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a quotation
     * Remove one or more documents from a quotation.
     * @param {Number} quotationId Id of the quotation from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeDocumentsFromQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling removeDocumentsFromQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeDocumentsFromQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/documents', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a quotation
     * Remove one or more documents from a quotation.
     * @param {Number} quotationId Id of the quotation from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeDocumentsFromQuotation = function(quotationId, body) {
      return this.removeDocumentsFromQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove products from a quotation
     * Remove one or more products from a quotation.
     * @param {Number} quotationId Id of the quotation from which the products will be removed
     * @param {module:model/ProductIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeProductsFromQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling removeProductsFromQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeProductsFromQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/products', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove products from a quotation
     * Remove one or more products from a quotation.
     * @param {Number} quotationId Id of the quotation from which the products will be removed
     * @param {module:model/ProductIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeProductsFromQuotation = function(quotationId, body) {
      return this.removeProductsFromQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove purchase orders from a quotation
     * Remove one or more purchase orders from a quotation.
     * @param {Number} quotationId Id of the quotation from which the purchase orders will be removed
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removePurchaseOrdersFromQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling removePurchaseOrdersFromQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removePurchaseOrdersFromQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/purchase_orders', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove purchase orders from a quotation
     * Remove one or more purchase orders from a quotation.
     * @param {Number} quotationId Id of the quotation from which the purchase orders will be removed
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removePurchaseOrdersFromQuotation = function(quotationId, body) {
      return this.removePurchaseOrdersFromQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a quotation
     * Replaces all documents belonging to a quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} quotationId Id of the quotation of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceDocumentsOfQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling replaceDocumentsOfQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceDocumentsOfQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/documents', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a quotation
     * Replaces all documents belonging to a quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} quotationId Id of the quotation of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceDocumentsOfQuotation = function(quotationId, body) {
      return this.replaceDocumentsOfQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the products of a quotation
     * Replaces all products belonging to a quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} quotationId Id of the quotation of which the products will be replaced
     * @param {module:model/ProductIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceProductsOfQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling replaceProductsOfQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceProductsOfQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/products', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the products of a quotation
     * Replaces all products belonging to a quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} quotationId Id of the quotation of which the products will be replaced
     * @param {module:model/ProductIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceProductsOfQuotation = function(quotationId, body) {
      return this.replaceProductsOfQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the purchase orders of a quotation
     * Replaces all purchase orders belonging to a quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} quotationId Id of the quotation of which the purchase orders will be replaced
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replacePurchaseOrdersOfQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling replacePurchaseOrdersOfQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replacePurchaseOrdersOfQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/purchase_orders', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the purchase orders of a quotation
     * Replaces all purchase orders belonging to a quotation. You can send a list of resources that will replace all previous values.
     * @param {Number} quotationId Id of the quotation of which the purchase orders will be replaced
     * @param {module:model/PurchaseOrderIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replacePurchaseOrdersOfQuotation = function(quotationId, body) {
      return this.replacePurchaseOrdersOfQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change the product quantity in a quotation
     * Sets a new quantity of a product in a quotation or deletes the line in case quantity is zero.
     * @param {Number} quotationId Id of the quotation of which the change will be done
     * @param {module:model/ProductQuantity} body Resources that shall be changed or removed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateProductQuantitiesOfQuotationWithHttpInfo = function(quotationId, body) {
      var postBody = body;

      // verify the required parameter 'quotationId' is set
      if (quotationId === undefined || quotationId === null) {
        throw new Error("Missing the required parameter 'quotationId' when calling updateProductQuantitiesOfQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProductQuantitiesOfQuotation");
      }


      var pathParams = {
        'quotation_id': quotationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{quotation_id}/products/quantity', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change the product quantity in a quotation
     * Sets a new quantity of a product in a quotation or deletes the line in case quantity is zero.
     * @param {Number} quotationId Id of the quotation of which the change will be done
     * @param {module:model/ProductQuantity} body Resources that shall be changed or removed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateProductQuantitiesOfQuotation = function(quotationId, body) {
      return this.updateProductQuantitiesOfQuotationWithHttpInfo(quotationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a quotation
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the quotation to update
     * @param {module:model/QuotationRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateQuotationWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateQuotation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateQuotation");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quotations/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a quotation
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the quotation to update
     * @param {module:model/QuotationRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateQuotation = function(id, body) {
      return this.updateQuotationWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
