/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/PermissionInheritanceRequest', 'model/PermissionInheritanceResponse', 'model/PermissionInheritances', 'model/PermissionRequest', 'model/PermissionResponse', 'model/Permissions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/PermissionInheritanceRequest'), require('../model/PermissionInheritanceResponse'), require('../model/PermissionInheritances'), require('../model/PermissionRequest'), require('../model/PermissionResponse'), require('../model/Permissions'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.PermissionApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.PermissionInheritanceRequest, root.NetilionApiDocumentation.PermissionInheritanceResponse, root.NetilionApiDocumentation.PermissionInheritances, root.NetilionApiDocumentation.PermissionRequest, root.NetilionApiDocumentation.PermissionResponse, root.NetilionApiDocumentation.Permissions);
  }
}(this, function(ApiClient, ErrorResponse, PermissionInheritanceRequest, PermissionInheritanceResponse, PermissionInheritances, PermissionRequest, PermissionResponse, Permissions) {
  'use strict';

  /**
   * Permission service.
   * @module api/PermissionApi
   * @version 01.00.00
   */

  /**
   * Constructs a new PermissionApi. 
   * @alias module:api/PermissionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new permission inheritance
     * Create a new permission inheritance, only needed if default permission inheritance should be overwritten.
     * @param {module:model/PermissionInheritanceRequest} body Permission object that needs to be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionInheritanceResponse} and HTTP response
     */
    this.createPermissionInheritanceWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPermissionInheritance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionInheritanceResponse;

      return this.apiClient.callApi(
        '/permission_inheritances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new permission inheritance
     * Create a new permission inheritance, only needed if default permission inheritance should be overwritten.
     * @param {module:model/PermissionInheritanceRequest} body Permission object that needs to be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionInheritanceResponse}
     */
    this.createPermissionInheritance = function(body) {
      return this.createPermissionInheritanceWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new permission
     * Permissions must have a permission_type, assignable and permitable. To create multiple permissions at ones, multiple permission_types can be passed as array. In this case the API will return an array of the created permissions.
     * @param {module:model/PermissionRequest} body Permission object that needs to be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionResponse} and HTTP response
     */
    this.createPermissionsWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPermissions");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionResponse;

      return this.apiClient.callApi(
        '/permissions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new permission
     * Permissions must have a permission_type, assignable and permitable. To create multiple permissions at ones, multiple permission_types can be passed as array. In this case the API will return an array of the created permissions.
     * @param {module:model/PermissionRequest} body Permission object that needs to be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionResponse}
     */
    this.createPermissions = function(body) {
      return this.createPermissionsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a permission
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the permission to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deletePermissionWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePermission");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/permissions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a permission
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the permission to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deletePermission = function(id) {
      return this.deletePermissionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a permission inheritance
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the permission inheritance to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deletePermissionInheritanceWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePermissionInheritance");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/permission_inheritances/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a permission inheritance
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the permission inheritance to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deletePermissionInheritance = function(id) {
      return this.deletePermissionInheritanceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single permission
     * Get a specific permission identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;assignable, permitable&#x60;&#x60;&#x60;
     * @param {Number} id Id of the permission to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionResponse} and HTTP response
     */
    this.getPermissionByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPermissionById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionResponse;

      return this.apiClient.callApi(
        '/permissions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single permission
     * Get a specific permission identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;assignable, permitable&#x60;&#x60;&#x60;
     * @param {Number} id Id of the permission to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionResponse}
     */
    this.getPermissionById = function(id, opts) {
      return this.getPermissionByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single permission inheritance
     * Get a specific permission inheritance identified by the id in the URL.
     * @param {Number} id Id of the permission inheritance to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionInheritanceResponse} and HTTP response
     */
    this.getPermissionInheritanceByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPermissionInheritanceById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionInheritanceResponse;

      return this.apiClient.callApi(
        '/permission_inheritances/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single permission inheritance
     * Get a specific permission inheritance identified by the id in the URL.
     * @param {Number} id Id of the permission inheritance to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionInheritanceResponse}
     */
    this.getPermissionInheritanceById = function(id) {
      return this.getPermissionInheritanceByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of permission inheritances
     * Returns a list of all permission inheritances that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.permissionType filter by one of the permission_types (&#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60;)
     * @param {Number} opts.permissionInheritableId filter by id of permitable
     * @param {String} opts.permissionInheritableType filter by a specific type of permitables eg. &#x60;Event&#x60;
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionInheritances} and HTTP response
     */
    this.getPermissionInheritancesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'permission_type': opts['permissionType'],
        'permission_inheritable_id': opts['permissionInheritableId'],
        'permission_inheritable_type': opts['permissionInheritableType'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PermissionInheritances;

      return this.apiClient.callApi(
        '/permission_inheritances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of permission inheritances
     * Returns a list of all permission inheritances that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.permissionType filter by one of the permission_types (&#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60;)
     * @param {Number} opts.permissionInheritableId filter by id of permitable
     * @param {String} opts.permissionInheritableType filter by a specific type of permitables eg. &#x60;Event&#x60;
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionInheritances}
     */
    this.getPermissionInheritances = function(opts) {
      return this.getPermissionInheritancesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of permissions
     * Returns a list of all permissions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;assignable, permitable&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.permissionType one or multiple permission_types (comma list). Allowed values are &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60; and &#x60;can_permit&#x60;
     * @param {Number} opts.assignableId filter by an assignable id
     * @param {String} opts.assignableType filter by a specific type of assignables eg. &#x60;User&#x60; or &#x60;Usergroup&#x60;.
     * @param {Number} opts.permitableId filter by a permitable id
     * @param {String} opts.permitableType filter by a specific type of permitables eg. &#x60;Asset&#x60; or &#x60;Node&#x60;
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Permissions} and HTTP response
     */
    this.getPermissionsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'permission_type': opts['permissionType'],
        'assignable_id': opts['assignableId'],
        'assignable_type': opts['assignableType'],
        'permitable_id': opts['permitableId'],
        'permitable_type': opts['permitableType'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permissions;

      return this.apiClient.callApi(
        '/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of permissions
     * Returns a list of all permissions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;assignable, permitable&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.permissionType one or multiple permission_types (comma list). Allowed values are &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60; and &#x60;can_permit&#x60;
     * @param {Number} opts.assignableId filter by an assignable id
     * @param {String} opts.assignableType filter by a specific type of assignables eg. &#x60;User&#x60; or &#x60;Usergroup&#x60;.
     * @param {Number} opts.permitableId filter by a permitable id
     * @param {String} opts.permitableType filter by a specific type of permitables eg. &#x60;Asset&#x60; or &#x60;Node&#x60;
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Permissions}
     */
    this.getPermissions = function(opts) {
      return this.getPermissionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
