/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import UserGroupRequest from '../model/UserGroupRequest';
import UserGroupResponse from '../model/UserGroupResponse';
import UserGroupsWithUsers from '../model/UserGroupsWithUsers';
import UserIDs from '../model/UserIDs';
import UsersPublicResponse from '../model/UsersPublicResponse';

/**
* UserGroup service.
* @module api/UserGroupApi
* @version 01.00.00
*/
export default class UserGroupApi {

    /**
    * Constructs a new UserGroupApi. 
    * @alias module:api/UserGroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add users to a user group
     * Add one or more users to a user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addUsersToUserGroupWithHttpInfo(body, usergroupId) {
      let postBody = body;

      let pathParams = {
        'usergroup_id': usergroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{usergroup_id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add users to a user group
     * Add one or more users to a user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addUsersToUserGroup(body, usergroupId) {
      return this.addUsersToUserGroupWithHttpInfo(body, usergroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new user group
     * A user group can have many users and users can belong to several groups.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserGroupResponse} and HTTP response
     */
    createUserGroupWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserGroupResponse;

      return this.apiClient.callApi(
        '/usergroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new user group
     * A user group can have many users and users can belong to several groups.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserGroupResponse}
     */
    createUserGroup(body) {
      return this.createUserGroupWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user group
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUserGroupWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a user group
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUserGroup(id) {
      return this.deleteUserGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single user group
     * Get a specific user group identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserGroupResponse} and HTTP response
     */
    getUserGroupByIdWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserGroupResponse;

      return this.apiClient.callApi(
        '/usergroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single user group
     * Get a specific user group identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserGroupResponse}
     */
    getUserGroupById(id) {
      return this.getUserGroupByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of user groups
     * Returns a list of all user group that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserGroupsWithUsers} and HTTP response
     */
    getUserGroupsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserGroupsWithUsers;

      return this.apiClient.callApi(
        '/usergroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of user groups
     * Returns a list of all user group that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserGroupsWithUsers}
     */
    getUserGroups(opts) {
      return this.getUserGroupsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the users of a user group
     * Returns a list of all users of a specific user group identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersPublicResponse} and HTTP response
     */
    getUsersOfUserGroupWithHttpInfo(usergroupId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'usergroup_id': usergroupId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPublicResponse;

      return this.apiClient.callApi(
        '/usergroups/{usergroup_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the users of a user group
     * Returns a list of all users of a specific user group identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersPublicResponse}
     */
    getUsersOfUserGroup(usergroupId, opts) {
      return this.getUsersOfUserGroupWithHttpInfo(usergroupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove users from a user group
     * Remove one or more users from a user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeUsersFromUserGroupWithHttpInfo(body, usergroupId) {
      let postBody = body;

      let pathParams = {
        'usergroup_id': usergroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{usergroup_id}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove users from a user group
     * Remove one or more users from a user group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeUsersFromUserGroup(body, usergroupId) {
      return this.removeUsersFromUserGroupWithHttpInfo(body, usergroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the users of a user group
     * Replaces all users belonging to a user group. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceUsersOfUserGroupWithHttpInfo(body, usergroupId) {
      let postBody = body;

      let pathParams = {
        'usergroup_id': usergroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{usergroup_id}/users', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the users of a user group
     * Replaces all users belonging to a user group. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceUsersOfUserGroup(body, usergroupId) {
      return this.replaceUsersOfUserGroupWithHttpInfo(body, usergroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user group
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUserGroupWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a user group
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUserGroup(body, id) {
      return this.updateUserGroupWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
