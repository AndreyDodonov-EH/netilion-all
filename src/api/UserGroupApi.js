/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/UserGroupRequest', 'model/UserGroupResponse', 'model/UserGroupsWithUsers', 'model/UserIDs', 'model/UsersPublicResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/UserGroupRequest'), require('../model/UserGroupResponse'), require('../model/UserGroupsWithUsers'), require('../model/UserIDs'), require('../model/UsersPublicResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.UserGroupApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.UserGroupRequest, root.NetilionApiDocumentation.UserGroupResponse, root.NetilionApiDocumentation.UserGroupsWithUsers, root.NetilionApiDocumentation.UserIDs, root.NetilionApiDocumentation.UsersPublicResponse);
  }
}(this, function(ApiClient, ErrorResponse, UserGroupRequest, UserGroupResponse, UserGroupsWithUsers, UserIDs, UsersPublicResponse) {
  'use strict';

  /**
   * UserGroup service.
   * @module api/UserGroupApi
   * @version 01.00.00
   */

  /**
   * Constructs a new UserGroupApi. 
   * @alias module:api/UserGroupApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add users to a user group
     * Add one or more users to a user group.
     * @param {Number} usergroupId Id of the user group to which the users will be added
     * @param {module:model/UserIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addUsersToUserGroupWithHttpInfo = function(usergroupId, body) {
      var postBody = body;

      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling addUsersToUserGroup");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addUsersToUserGroup");
      }


      var pathParams = {
        'usergroup_id': usergroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{usergroup_id}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add users to a user group
     * Add one or more users to a user group.
     * @param {Number} usergroupId Id of the user group to which the users will be added
     * @param {module:model/UserIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addUsersToUserGroup = function(usergroupId, body) {
      return this.addUsersToUserGroupWithHttpInfo(usergroupId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new user group
     * A user group can have many users and users can belong to several groups.
     * @param {module:model/UserGroupRequest} body User group to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserGroupResponse} and HTTP response
     */
    this.createUserGroupWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUserGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroupResponse;

      return this.apiClient.callApi(
        '/usergroups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new user group
     * A user group can have many users and users can belong to several groups.
     * @param {module:model/UserGroupRequest} body User group to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserGroupResponse}
     */
    this.createUserGroup = function(body) {
      return this.createUserGroupWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user group
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the user group to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteUserGroupWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserGroup");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a user group
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the user group to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteUserGroup = function(id) {
      return this.deleteUserGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single user group
     * Get a specific user group identified by the id in the URL.
     * @param {Number} id Id of the user group to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserGroupResponse} and HTTP response
     */
    this.getUserGroupByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserGroupById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroupResponse;

      return this.apiClient.callApi(
        '/usergroups/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single user group
     * Get a specific user group identified by the id in the URL.
     * @param {Number} id Id of the user group to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserGroupResponse}
     */
    this.getUserGroupById = function(id) {
      return this.getUserGroupByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of user groups
     * Returns a list of all user group that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#39;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserGroupsWithUsers} and HTTP response
     */
    this.getUserGroupsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroupsWithUsers;

      return this.apiClient.callApi(
        '/usergroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of user groups
     * Returns a list of all user group that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#39;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserGroupsWithUsers}
     */
    this.getUserGroups = function(opts) {
      return this.getUserGroupsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the users of a user group
     * Returns a list of all users of a specific user group identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} usergroupId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.firstName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.lastName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersPublicResponse} and HTTP response
     */
    this.getUsersOfUserGroupWithHttpInfo = function(usergroupId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling getUsersOfUserGroup");
      }


      var pathParams = {
        'usergroup_id': usergroupId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersPublicResponse;

      return this.apiClient.callApi(
        '/usergroups/{usergroup_id}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the users of a user group
     * Returns a list of all users of a specific user group identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} usergroupId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.firstName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.lastName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersPublicResponse}
     */
    this.getUsersOfUserGroup = function(usergroupId, opts) {
      return this.getUsersOfUserGroupWithHttpInfo(usergroupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove users from a user group
     * Remove one or more users from a user group.
     * @param {Number} usergroupId Id of the user group from which the users will be removed
     * @param {module:model/UserIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeUsersFromUserGroupWithHttpInfo = function(usergroupId, body) {
      var postBody = body;

      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling removeUsersFromUserGroup");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeUsersFromUserGroup");
      }


      var pathParams = {
        'usergroup_id': usergroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{usergroup_id}/users', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove users from a user group
     * Remove one or more users from a user group.
     * @param {Number} usergroupId Id of the user group from which the users will be removed
     * @param {module:model/UserIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeUsersFromUserGroup = function(usergroupId, body) {
      return this.removeUsersFromUserGroupWithHttpInfo(usergroupId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the users of a user group
     * Replaces all users belonging to a user group. You can send a list of resources that will replace all previous values.
     * @param {Number} usergroupId Id of the user group of which the users will be replaced
     * @param {module:model/UserIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceUsersOfUserGroupWithHttpInfo = function(usergroupId, body) {
      var postBody = body;

      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling replaceUsersOfUserGroup");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceUsersOfUserGroup");
      }


      var pathParams = {
        'usergroup_id': usergroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{usergroup_id}/users', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the users of a user group
     * Replaces all users belonging to a user group. You can send a list of resources that will replace all previous values.
     * @param {Number} usergroupId Id of the user group of which the users will be replaced
     * @param {module:model/UserIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceUsersOfUserGroup = function(usergroupId, body) {
      return this.replaceUsersOfUserGroupWithHttpInfo(usergroupId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user group
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the user group to update
     * @param {module:model/UserGroupRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUserGroupWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserGroup");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUserGroup");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/usergroups/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a user group
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the user group to update
     * @param {module:model/UserGroupRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUserGroup = function(id, body) {
      return this.updateUserGroupWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
