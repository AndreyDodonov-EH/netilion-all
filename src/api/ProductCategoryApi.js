/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CategoryIDs from '../model/CategoryIDs';
import ErrorResponse from '../model/ErrorResponse';
import ProductCategoriesResponse from '../model/ProductCategoriesResponse';
import ProductCategoryRequest from '../model/ProductCategoryRequest';
import ProductCategoryResponse from '../model/ProductCategoryResponse';
import ProductIDs from '../model/ProductIDs';
import ProductsResponse from '../model/ProductsResponse';

/**
* ProductCategory service.
* @module api/ProductCategoryApi
* @version 01.00.00
*/
export default class ProductCategoryApi {

    /**
    * Constructs a new ProductCategoryApi. 
    * @alias module:api/ProductCategoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add categories to a product
     * Add one or more categories to a product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addCategoriesToProductWithHttpInfo(body, productId) {
      let postBody = body;

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add categories to a product
     * Add one or more categories to a product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addCategoriesToProduct(body, productId) {
      return this.addCategoriesToProductWithHttpInfo(body, productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add products to a category
     * Add one or more products to a category identified by id in the url.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addProductsToProductCategoryWithHttpInfo(body, categoryId) {
      let postBody = body;

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/product/categories/{category_id}/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add products to a category
     * Add one or more products to a category identified by id in the url.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addProductsToProductCategory(body, categoryId) {
      return this.addProductsToProductCategoryWithHttpInfo(body, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new product category
     * Code must be unique. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. POST sets values in default language: en.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductCategoryResponse} and HTTP response
     */
    createProductCategoryWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCategoryResponse;

      return this.apiClient.callApi(
        '/product/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new product category
     * Code must be unique. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. POST sets values in default language: en.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductCategoryResponse}
     */
    createProductCategory(body) {
      return this.createProductCategoryWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all products of a product category
     * Get all products of a specific product category identified by the id in the URL. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductsResponse} and HTTP response
     */
    createProductsOfProductCategoryWithHttpInfo(categoryId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'product_code': opts['productCode'],
        'name': opts['name'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductsResponse;

      return this.apiClient.callApi(
        '/product/categories/{category_id}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all products of a product category
     * Get all products of a specific product category identified by the id in the URL. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductsResponse}
     */
    createProductsOfProductCategory(categoryId, opts) {
      return this.createProductsOfProductCategoryWithHttpInfo(categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove categories from a product
     * Remove one or more categories from a product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCategoriesFromProductWithHttpInfo(body, productId) {
      let postBody = body;

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/categories', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove categories from a product
     * Remove one or more categories from a product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCategoriesFromProduct(body, productId) {
      return this.deleteCategoriesFromProductWithHttpInfo(body, productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a product category
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductCategoryWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/product/categories/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a product category
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductCategory(id) {
      return this.deleteProductCategoryWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all categories of a product
     * Get all categories for the specific product identified by the id in the URL. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductCategoriesResponse} and HTTP response
     */
    getCategoriesOfProductWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'code': opts['code'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCategoriesResponse;

      return this.apiClient.callApi(
        '/products/{product_id}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all categories of a product
     * Get all categories for the specific product identified by the id in the URL. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductCategoriesResponse}
     */
    getCategoriesOfProduct(productId, opts) {
      return this.getCategoriesOfProductWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all categories of one product
     * Returns a list of all possible categories for the specific product available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60; \&quot;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductCategoriesResponse} and HTTP response
     */
    getCategoriesOptionsOfProductWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'code': opts['code'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCategoriesResponse;

      return this.apiClient.callApi(
        '/products/{product_id}/categories-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all categories of one product
     * Returns a list of all possible categories for the specific product available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60; \&quot;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductCategoriesResponse}
     */
    getCategoriesOptionsOfProduct(productId, opts) {
      return this.getCategoriesOptionsOfProductWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of product categories
     * Returns a list of all product categories that are available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductCategoriesResponse} and HTTP response
     */
    getProductCategoriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'code': opts['code'],
        'name': opts['name'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCategoriesResponse;

      return this.apiClient.callApi(
        '/product/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of product categories
     * Returns a list of all product categories that are available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductCategoriesResponse}
     */
    getProductCategories(opts) {
      return this.getProductCategoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single product category
     * Get a specific product category identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductCategoryResponse} and HTTP response
     */
    getProductCategoryByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCategoryResponse;

      return this.apiClient.callApi(
        '/product/categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single product category
     * Get a specific product category identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductCategoryResponse}
     */
    getProductCategoryById(id, opts) {
      return this.getProductCategoryByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove products from a category
     * Remove one or more products from a category identified by id in the url.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeProductsFromProductCategoryWithHttpInfo(body, categoryId) {
      let postBody = body;

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/product/categories/{category_id}/products', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove products from a category
     * Remove one or more products from a category identified by id in the url.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeProductsFromProductCategory(body, categoryId) {
      return this.removeProductsFromProductCategoryWithHttpInfo(body, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace all categories of a product
     * Replaces all categories belonging to a product. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceCategoriesOfProductWithHttpInfo(body, productId) {
      let postBody = body;

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/categories', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace all categories of a product
     * Replaces all categories belonging to a product. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceCategoriesOfProduct(body, productId) {
      return this.replaceCategoriesOfProductWithHttpInfo(body, productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace products of a category
     * Replaces all products belonging to a category. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceProductsOfProductCategoryWithHttpInfo(body, categoryId) {
      let postBody = body;

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/product/categories/{category_id}/products', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace products of a category
     * Replaces all products belonging to a category. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceProductsOfProductCategory(body, categoryId) {
      return this.replaceProductsOfProductCategoryWithHttpInfo(body, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a product category
     * Update accessible parameters of the requested resource. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateProductCategoryWithHttpInfo(body, id, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Language': opts['contentLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/product/categories/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a product category
     * Update accessible parameters of the requested resource. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateProductCategory(body, id, opts) {
      return this.updateProductCategoryWithHttpInfo(body, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
