/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import APISubscriptionRequest from '../model/APISubscriptionRequest';
import APISubscriptionResponse from '../model/APISubscriptionResponse';
import APISubscriptionsResponse from '../model/APISubscriptionsResponse';
import EdgeDeviceResponse from '../model/EdgeDeviceResponse';
import EdgeDevicesIds from '../model/EdgeDevicesIds';
import ErrorResponse from '../model/ErrorResponse';

/**
* APISubscription service.
* @module api/APISubscriptionApi
* @version 01.00.00
*/
export default class APISubscriptionApi {

    /**
    * Constructs a new APISubscriptionApi. 
    * @alias module:api/APISubscriptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add edge devices to an api subscription
     * Add one or more edge devices to an api subscription.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addEdgeDevicesToApiSubscriptionWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}/edge_devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add edge devices to an api subscription
     * Add one or more edge devices to an api subscription.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addEdgeDevicesToApiSubscription(body, id) {
      return this.addEdgeDevicesToApiSubscriptionWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new api subscription
     * Creates a new api subscription. Only available for technical_users of the ID application and admins. Setting a successor or predecessor is not possible.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APISubscriptionResponse} and HTTP response
     */
    createAPISubscriptionWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = APISubscriptionResponse;

      return this.apiClient.callApi(
        '/api_subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new api subscription
     * Creates a new api subscription. Only available for technical_users of the ID application and admins. Setting a successor or predecessor is not possible.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APISubscriptionResponse}
     */
    createAPISubscription(body) {
      return this.createAPISubscriptionWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an api subscription
     * Delete a specific api subscription identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAPISubscriptionWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an api subscription
     * Delete a specific api subscription identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAPISubscription(id) {
      return this.deleteAPISubscriptionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single api subscription
     * Get a specific api subscription identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;user&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APISubscriptionResponse} and HTTP response
     */
    getAPISubscriptionByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APISubscriptionResponse;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single api subscription
     * Get a specific api subscription identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;user&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APISubscriptionResponse}
     */
    getAPISubscriptionById(id, opts) {
      return this.getAPISubscriptionByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of api subscriptions
     * Returns a list of api subscriptions.  Possible include values: &#x60;&#x60;&#x60;user&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APISubscriptionsResponse} and HTTP response
     */
    getAPISubscriptionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'user_id': opts['userId'],
        'client_application_id': opts['clientApplicationId'],
        'external_reference': opts['externalReference'],
        'status': opts['status'],
        'subscription_type': opts['subscriptionType'],
        'notification_status': opts['notificationStatus'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APISubscriptionsResponse;

      return this.apiClient.callApi(
        '/api_subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of api subscriptions
     * Returns a list of api subscriptions.  Possible include values: &#x60;&#x60;&#x60;user&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APISubscriptionsResponse}
     */
    getAPISubscriptions(opts) {
      return this.getAPISubscriptionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all edge devices of an api subscription
     * Returns a list of all edge devices that are assigned to an api subscription. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status type tenant technical_user order_user software_version usergroup specifications api_subscription api_subscription.user&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EdgeDeviceResponse} and HTTP response
     */
    getEdgeDevicesOfAPISubscriptionWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'serial_number': opts['serialNumber'],
        'name': opts['name'],
        'type_id': opts['typeId'],
        'status_id': opts['statusId'],
        'software_version_id': opts['softwareVersionId'],
        'tenant_id': opts['tenantId'],
        'technical_user_id': opts['technicalUserId'],
        'order_user_id': opts['orderUserId'],
        'log_level': opts['logLevel'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EdgeDeviceResponse;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}/edge_devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all edge devices of an api subscription
     * Returns a list of all edge devices that are assigned to an api subscription. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status type tenant technical_user order_user software_version usergroup specifications api_subscription api_subscription.user&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EdgeDeviceResponse}
     */
    getEdgeDevicesOfAPISubscription(id, opts) {
      return this.getEdgeDevicesOfAPISubscriptionWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove edge devices from an api subscription
     * Remove one or more edge devices from an api subscription in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeEdgeDevicesFromApiSubscriptionWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}/edge_devices', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove edge devices from an api subscription
     * Remove one or more edge devices from an api subscription in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeEdgeDevicesFromApiSubscription(body, id) {
      return this.removeEdgeDevicesFromApiSubscriptionWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the edge devices of an api subscription
     * Replaces all edge devices belonging to an api subscription in your accessible scope. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceEdgeDevicesOfApiSubscriptionWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}/edge_devices', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the edge devices of an api subscription
     * Replaces all edge devices belonging to an api subscription in your accessible scope. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceEdgeDevicesOfApiSubscription(body, id) {
      return this.replaceEdgeDevicesOfApiSubscriptionWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an api subscription
     * Update accessible parameters of the requested resource. Setting a successor or predecessor is not possible.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateAPISubscriptionWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an api subscription
     * Update accessible parameters of the requested resource. Setting a successor or predecessor is not possible.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateAPISubscription(body, id) {
      return this.updateAPISubscriptionWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
