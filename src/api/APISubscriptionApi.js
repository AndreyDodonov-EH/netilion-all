/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/APISubscriptionRequest', 'model/APISubscriptionResponse', 'model/APISubscriptionsResponse', 'model/EdgeDeviceResponse', 'model/EdgeDevicesIds', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/APISubscriptionRequest'), require('../model/APISubscriptionResponse'), require('../model/APISubscriptionsResponse'), require('../model/EdgeDeviceResponse'), require('../model/EdgeDevicesIds'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.APISubscriptionApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.APISubscriptionRequest, root.NetilionApiDocumentation.APISubscriptionResponse, root.NetilionApiDocumentation.APISubscriptionsResponse, root.NetilionApiDocumentation.EdgeDeviceResponse, root.NetilionApiDocumentation.EdgeDevicesIds, root.NetilionApiDocumentation.ErrorResponse);
  }
}(this, function(ApiClient, APISubscriptionRequest, APISubscriptionResponse, APISubscriptionsResponse, EdgeDeviceResponse, EdgeDevicesIds, ErrorResponse) {
  'use strict';

  /**
   * APISubscription service.
   * @module api/APISubscriptionApi
   * @version 01.00.00
   */

  /**
   * Constructs a new APISubscriptionApi. 
   * @alias module:api/APISubscriptionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add edge devices to an api subscription
     * Add one or more edge devices to an api subscription.
     * @param {Number} id Id of the api subscription to which the edge devices will be added
     * @param {module:model/EdgeDevicesIds} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addEdgeDevicesToApiSubscriptionWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addEdgeDevicesToApiSubscription");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addEdgeDevicesToApiSubscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}/edge_devices', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add edge devices to an api subscription
     * Add one or more edge devices to an api subscription.
     * @param {Number} id Id of the api subscription to which the edge devices will be added
     * @param {module:model/EdgeDevicesIds} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addEdgeDevicesToApiSubscription = function(id, body) {
      return this.addEdgeDevicesToApiSubscriptionWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new api subscription
     * Creates a new api subscription. Only available for technical_users of the ID application and admins. Setting a successor or predecessor is not possible.
     * @param {module:model/APISubscriptionRequest} body api subscription body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APISubscriptionResponse} and HTTP response
     */
    this.createAPISubscriptionWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAPISubscription");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = APISubscriptionResponse;

      return this.apiClient.callApi(
        '/api_subscriptions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new api subscription
     * Creates a new api subscription. Only available for technical_users of the ID application and admins. Setting a successor or predecessor is not possible.
     * @param {module:model/APISubscriptionRequest} body api subscription body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APISubscriptionResponse}
     */
    this.createAPISubscription = function(body) {
      return this.createAPISubscriptionWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an api subscription
     * Delete a specific api subscription identified by the id in the URL.
     * @param {Number} id Id of the api subscription
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAPISubscriptionWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAPISubscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an api subscription
     * Delete a specific api subscription identified by the id in the URL.
     * @param {Number} id Id of the api subscription
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAPISubscription = function(id) {
      return this.deleteAPISubscriptionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single api subscription
     * Get a specific api subscription identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;user&#x60;&#x60;&#x60; 
     * @param {Number} id Id of the api subscription to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APISubscriptionResponse} and HTTP response
     */
    this.getAPISubscriptionByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAPISubscriptionById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = APISubscriptionResponse;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single api subscription
     * Get a specific api subscription identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;user&#x60;&#x60;&#x60; 
     * @param {Number} id Id of the api subscription to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APISubscriptionResponse}
     */
    this.getAPISubscriptionById = function(id, opts) {
      return this.getAPISubscriptionByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of api subscriptions
     * Returns a list of api subscriptions.  Possible include values: &#x60;&#x60;&#x60;user&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {Number} opts.userId One or multiple ids (comma list). Expected id format is integer
     * @param {Number} opts.clientApplicationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.externalReference Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.status one or multiple statuses (comma list). Allowed values are &#x60;open&#x60;, &#x60;payment_required&#x60;, &#x60;confirmed&#x60;, &#x60;scheduled_update&#x60;, &#x60;non_renewing&#x60; and &#x60;cancelled&#x60;
     * @param {String} opts.subscriptionType Filter by subscription type - no wildcard support
     * @param {String} opts.notificationStatus Filter by notification status - no wildcard support
     * @param {Date} opts.startDate Expected date format is YYYY-MM-DD
     * @param {Date} opts.endDate Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APISubscriptionsResponse} and HTTP response
     */
    this.getAPISubscriptionsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'user_id': opts['userId'],
        'client_application_id': opts['clientApplicationId'],
        'external_reference': opts['externalReference'],
        'status': opts['status'],
        'subscription_type': opts['subscriptionType'],
        'notification_status': opts['notificationStatus'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = APISubscriptionsResponse;

      return this.apiClient.callApi(
        '/api_subscriptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of api subscriptions
     * Returns a list of api subscriptions.  Possible include values: &#x60;&#x60;&#x60;user&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {Number} opts.userId One or multiple ids (comma list). Expected id format is integer
     * @param {Number} opts.clientApplicationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.externalReference Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.status one or multiple statuses (comma list). Allowed values are &#x60;open&#x60;, &#x60;payment_required&#x60;, &#x60;confirmed&#x60;, &#x60;scheduled_update&#x60;, &#x60;non_renewing&#x60; and &#x60;cancelled&#x60;
     * @param {String} opts.subscriptionType Filter by subscription type - no wildcard support
     * @param {String} opts.notificationStatus Filter by notification status - no wildcard support
     * @param {Date} opts.startDate Expected date format is YYYY-MM-DD
     * @param {Date} opts.endDate Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APISubscriptionsResponse}
     */
    this.getAPISubscriptions = function(opts) {
      return this.getAPISubscriptionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all edge devices of an api subscription
     * Returns a list of all edge devices that are assigned to an api subscription. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status type tenant technical_user order_user software_version usergroup specifications api_subscription api_subscription.user&#x60;&#x60;&#x60;
     * @param {Number} id Get a list of edge devices assigned to the api subscription identified by this id.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.serialNumber Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.softwareVersionId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.technicalUserId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderUserId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.logLevel Filter accepts trace, debug, info, warning, error, critical, off
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, &#x60;name&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EdgeDeviceResponse} and HTTP response
     */
    this.getEdgeDevicesOfAPISubscriptionWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEdgeDevicesOfAPISubscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'serial_number': opts['serialNumber'],
        'name': opts['name'],
        'type_id': opts['typeId'],
        'status_id': opts['statusId'],
        'software_version_id': opts['softwareVersionId'],
        'tenant_id': opts['tenantId'],
        'technical_user_id': opts['technicalUserId'],
        'order_user_id': opts['orderUserId'],
        'log_level': opts['logLevel'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EdgeDeviceResponse;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}/edge_devices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all edge devices of an api subscription
     * Returns a list of all edge devices that are assigned to an api subscription. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status type tenant technical_user order_user software_version usergroup specifications api_subscription api_subscription.user&#x60;&#x60;&#x60;
     * @param {Number} id Get a list of edge devices assigned to the api subscription identified by this id.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.serialNumber Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.softwareVersionId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.technicalUserId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderUserId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.logLevel Filter accepts trace, debug, info, warning, error, critical, off
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, &#x60;name&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EdgeDeviceResponse}
     */
    this.getEdgeDevicesOfAPISubscription = function(id, opts) {
      return this.getEdgeDevicesOfAPISubscriptionWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove edge devices from an api subscription
     * Remove one or more edge devices from an api subscription in your accessible scope.
     * @param {Number} id Id of the api subscription from which the edge devices will be removed
     * @param {module:model/EdgeDevicesIds} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeEdgeDevicesFromApiSubscriptionWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeEdgeDevicesFromApiSubscription");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeEdgeDevicesFromApiSubscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}/edge_devices', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove edge devices from an api subscription
     * Remove one or more edge devices from an api subscription in your accessible scope.
     * @param {Number} id Id of the api subscription from which the edge devices will be removed
     * @param {module:model/EdgeDevicesIds} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeEdgeDevicesFromApiSubscription = function(id, body) {
      return this.removeEdgeDevicesFromApiSubscriptionWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the edge devices of an api subscription
     * Replaces all edge devices belonging to an api subscription in your accessible scope. You can send a list of resources that will replace all previous values.
     * @param {Number} id Id of the api subscription of which the edge devices will be replaced
     * @param {module:model/EdgeDevicesIds} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceEdgeDevicesOfApiSubscriptionWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replaceEdgeDevicesOfApiSubscription");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceEdgeDevicesOfApiSubscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}/edge_devices', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the edge devices of an api subscription
     * Replaces all edge devices belonging to an api subscription in your accessible scope. You can send a list of resources that will replace all previous values.
     * @param {Number} id Id of the api subscription of which the edge devices will be replaced
     * @param {module:model/EdgeDevicesIds} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceEdgeDevicesOfApiSubscription = function(id, body) {
      return this.replaceEdgeDevicesOfApiSubscriptionWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an api subscription
     * Update accessible parameters of the requested resource. Setting a successor or predecessor is not possible.
     * @param {Number} id Id of the api subscription to update
     * @param {module:model/APISubscriptionRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateAPISubscriptionWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAPISubscription");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAPISubscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api_subscriptions/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an api subscription
     * Update accessible parameters of the requested resource. Setting a successor or predecessor is not possible.
     * @param {Number} id Id of the api subscription to update
     * @param {module:model/APISubscriptionRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateAPISubscription = function(id, body) {
      return this.updateAPISubscriptionWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
