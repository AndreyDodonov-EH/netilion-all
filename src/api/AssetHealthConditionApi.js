/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AssetHealthConditionsCalculateRequest', 'model/AssetHealthConditionsRequest', 'model/AssetHealthConditionsResponse', 'model/AssetHealthConditionsTimemachineResponse', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AssetHealthConditionsCalculateRequest'), require('../model/AssetHealthConditionsRequest'), require('../model/AssetHealthConditionsResponse'), require('../model/AssetHealthConditionsTimemachineResponse'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.AssetHealthConditionApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.AssetHealthConditionsCalculateRequest, root.NetilionApiDocumentation.AssetHealthConditionsRequest, root.NetilionApiDocumentation.AssetHealthConditionsResponse, root.NetilionApiDocumentation.AssetHealthConditionsTimemachineResponse, root.NetilionApiDocumentation.ErrorResponse);
  }
}(this, function(ApiClient, AssetHealthConditionsCalculateRequest, AssetHealthConditionsRequest, AssetHealthConditionsResponse, AssetHealthConditionsTimemachineResponse, ErrorResponse) {
  'use strict';

  /**
   * AssetHealthCondition service.
   * @module api/AssetHealthConditionApi
   * @version 01.00.00
   */

  /**
   * Constructs a new AssetHealthConditionApi. 
   * @alias module:api/AssetHealthConditionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add health conditions to an asset
     * Add one or more health conditions to an asset.
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetHealthConditionsRequest} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addHealthConditionsToAssetWithHttpInfo = function(assetId, body) {
      var postBody = body;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling addHealthConditionsToAsset");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addHealthConditionsToAsset");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add health conditions to an asset
     * Add one or more health conditions to an asset.
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetHealthConditionsRequest} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addHealthConditionsToAsset = function(assetId, body) {
      return this.addHealthConditionsToAssetWithHttpInfo(assetId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Calculate health conditions of an asset
     * Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
     * @param {Number} assetId The resource defined in the URL
     * @param {String} protocol Filter accepts &#39;PROFIBUS&#39;, &#39;HART&#39; or &#39;MODBUS&#39;
     * @param {String} diagnosisMessage diagnosis message of an asset
     * @param {String} deviceIdent device_ident of the asset
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.protocolVersion definition of the protocol version. For example 5, 6 or 7 for HART
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetHealthConditionsResponse} and HTTP response
     */
    this.calculateAssetHealthConditionsWithHttpInfo = function(assetId, protocol, diagnosisMessage, deviceIdent, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling calculateAssetHealthConditions");
      }

      // verify the required parameter 'protocol' is set
      if (protocol === undefined || protocol === null) {
        throw new Error("Missing the required parameter 'protocol' when calling calculateAssetHealthConditions");
      }

      // verify the required parameter 'diagnosisMessage' is set
      if (diagnosisMessage === undefined || diagnosisMessage === null) {
        throw new Error("Missing the required parameter 'diagnosisMessage' when calling calculateAssetHealthConditions");
      }

      // verify the required parameter 'deviceIdent' is set
      if (deviceIdent === undefined || deviceIdent === null) {
        throw new Error("Missing the required parameter 'deviceIdent' when calling calculateAssetHealthConditions");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'protocol': protocol,
        'protocol_version': opts['protocolVersion'],
        'diagnosis_message': diagnosisMessage,
        'device_ident': deviceIdent,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetHealthConditionsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions/calculate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Calculate health conditions of an asset
     * Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
     * @param {Number} assetId The resource defined in the URL
     * @param {String} protocol Filter accepts &#39;PROFIBUS&#39;, &#39;HART&#39; or &#39;MODBUS&#39;
     * @param {String} diagnosisMessage diagnosis message of an asset
     * @param {String} deviceIdent device_ident of the asset
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.protocolVersion definition of the protocol version. For example 5, 6 or 7 for HART
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetHealthConditionsResponse}
     */
    this.calculateAssetHealthConditions = function(assetId, protocol, diagnosisMessage, deviceIdent, opts) {
      return this.calculateAssetHealthConditionsWithHttpInfo(assetId, protocol, diagnosisMessage, deviceIdent, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Calculate health conditions of an asset and update asset with this health conditions
     * Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetHealthConditionsCalculateRequest} body Resources that shall be replaced.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.calculateAssetHealthConditionsAndUpdateAssetWithHttpInfo = function(assetId, body) {
      var postBody = body;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling calculateAssetHealthConditionsAndUpdateAsset");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling calculateAssetHealthConditionsAndUpdateAsset");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions/calculate', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Calculate health conditions of an asset and update asset with this health conditions
     * Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetHealthConditionsCalculateRequest} body Resources that shall be replaced.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.calculateAssetHealthConditionsAndUpdateAsset = function(assetId, body) {
      return this.calculateAssetHealthConditionsAndUpdateAssetWithHttpInfo(assetId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all health conditions assigned to an asset
     * Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
     * @param {Number} assetId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.healthConditionId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.diagnosisCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.assetStatusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetHealthConditionsResponse} and HTTP response
     */
    this.getAssetHealthConditionsWithHttpInfo = function(assetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getAssetHealthConditions");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'health_condition_id': opts['healthConditionId'],
        'diagnosis_code': opts['diagnosisCode'],
        'asset_status_id': opts['assetStatusId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetHealthConditionsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all health conditions assigned to an asset
     * Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
     * @param {Number} assetId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.healthConditionId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.diagnosisCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.assetStatusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetHealthConditionsResponse}
     */
    this.getAssetHealthConditions = function(assetId, opts) {
      return this.getAssetHealthConditionsWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all health_conditions historical evolution the given asset had assigned
     * Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} assetId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {Date} opts.from Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.to End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetHealthConditionsTimemachineResponse} and HTTP response
     */
    this.getHealthConditionsOfAssetTimemachineWithHttpInfo = function(assetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getHealthConditionsOfAssetTimemachine");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'from': opts['from'],
        'to': opts['to'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetHealthConditionsTimemachineResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions/timemachine', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all health_conditions historical evolution the given asset had assigned
     * Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} assetId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {Date} opts.from Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.to End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetHealthConditionsTimemachineResponse}
     */
    this.getHealthConditionsOfAssetTimemachine = function(assetId, opts) {
      return this.getHealthConditionsOfAssetTimemachineWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace health conditions of an asset
     * Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetHealthConditionsRequest} body Resources that shall be replaced.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.reaplaceHealthConditionsOfAssetWithHttpInfo = function(assetId, body) {
      var postBody = body;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling reaplaceHealthConditionsOfAsset");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reaplaceHealthConditionsOfAsset");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace health conditions of an asset
     * Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetHealthConditionsRequest} body Resources that shall be replaced.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.reaplaceHealthConditionsOfAsset = function(assetId, body) {
      return this.reaplaceHealthConditionsOfAssetWithHttpInfo(assetId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove health conditions of an asset
     * Remove one or more health conditions from an asset.
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetHealthConditionsRequest} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeHealthConditionsOfAssetWithHttpInfo = function(assetId, body) {
      var postBody = body;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling removeHealthConditionsOfAsset");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeHealthConditionsOfAsset");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove health conditions of an asset
     * Remove one or more health conditions from an asset.
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetHealthConditionsRequest} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeHealthConditionsOfAsset = function(assetId, body) {
      return this.removeHealthConditionsOfAssetWithHttpInfo(assetId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
