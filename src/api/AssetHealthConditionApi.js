/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AssetHealthConditionsCalculateRequest from '../model/AssetHealthConditionsCalculateRequest';
import AssetHealthConditionsRequest from '../model/AssetHealthConditionsRequest';
import AssetHealthConditionsResponse from '../model/AssetHealthConditionsResponse';
import AssetHealthConditionsTimemachineResponse from '../model/AssetHealthConditionsTimemachineResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* AssetHealthCondition service.
* @module api/AssetHealthConditionApi
* @version 01.00.00
*/
export default class AssetHealthConditionApi {

    /**
    * Constructs a new AssetHealthConditionApi. 
    * @alias module:api/AssetHealthConditionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add health conditions to an asset
     * Add one or more health conditions to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addHealthConditionsToAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add health conditions to an asset
     * Add one or more health conditions to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addHealthConditionsToAsset(body, assetId) {
      return this.addHealthConditionsToAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Calculate health conditions of an asset
     * Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetHealthConditionsResponse} and HTTP response
     */
    calculateAssetHealthConditionsWithHttpInfo(assetId, protocol, diagnosisMessage, deviceIdent, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'protocol': protocol,
        'protocol_version': opts['protocolVersion'],
        'diagnosis_message': diagnosisMessage,
        'device_ident': deviceIdent
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetHealthConditionsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions/calculate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Calculate health conditions of an asset
     * Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetHealthConditionsResponse}
     */
    calculateAssetHealthConditions(assetId, protocol, diagnosisMessage, deviceIdent, opts) {
      return this.calculateAssetHealthConditionsWithHttpInfo(assetId, protocol, diagnosisMessage, deviceIdent, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Calculate health conditions of an asset and update asset with this health conditions
     * Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    calculateAssetHealthConditionsAndUpdateAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions/calculate', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Calculate health conditions of an asset and update asset with this health conditions
     * Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    calculateAssetHealthConditionsAndUpdateAsset(body, assetId) {
      return this.calculateAssetHealthConditionsAndUpdateAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all health conditions assigned to an asset
     * Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetHealthConditionsResponse} and HTTP response
     */
    getAssetHealthConditionsWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'health_condition_id': opts['healthConditionId'],
        'diagnosis_code': opts['diagnosisCode'],
        'asset_status_id': opts['assetStatusId']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetHealthConditionsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all health conditions assigned to an asset
     * Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetHealthConditionsResponse}
     */
    getAssetHealthConditions(assetId, opts) {
      return this.getAssetHealthConditionsWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all health_conditions historical evolution the given asset had assigned
     * Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetHealthConditionsTimemachineResponse} and HTTP response
     */
    getHealthConditionsOfAssetTimemachineWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'from': opts['from'],
        'to': opts['to'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetHealthConditionsTimemachineResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions/timemachine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all health_conditions historical evolution the given asset had assigned
     * Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetHealthConditionsTimemachineResponse}
     */
    getHealthConditionsOfAssetTimemachine(assetId, opts) {
      return this.getHealthConditionsOfAssetTimemachineWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace health conditions of an asset
     * Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reaplaceHealthConditionsOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace health conditions of an asset
     * Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reaplaceHealthConditionsOfAsset(body, assetId) {
      return this.reaplaceHealthConditionsOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove health conditions of an asset
     * Remove one or more health conditions from an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeHealthConditionsOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/health_conditions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove health conditions of an asset
     * Remove one or more health conditions from an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeHealthConditionsOfAsset(body, assetId) {
      return this.removeHealthConditionsOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
