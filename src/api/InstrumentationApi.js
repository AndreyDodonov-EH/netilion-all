/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AssetIDs', 'model/AssetsResponse', 'model/BillOfMaterialIDs', 'model/BillOfMaterialsResponse', 'model/DocumentIDs', 'model/DocumentsResponse', 'model/ErrorResponse', 'model/EventRequestNoInstrumentations', 'model/EventResponse', 'model/Events1', 'model/EventsResponse', 'model/InstrumentationAssetsHistoryResponse', 'model/InstrumentationRequest', 'model/InstrumentationResponse', 'model/InstrumentationStatusResponse', 'model/InstrumentationStatuses', 'model/InstrumentationTypeResponse', 'model/InstrumentationTypes', 'model/InstrumentationsResponse', 'model/NodeIDs', 'model/NodesResponse', 'model/PictureLinkRequest', 'model/PictureResponse', 'model/PicturesResponse', 'model/SpecificationHistoryResponse', 'model/SpecificationsDelete', 'model/SpecificationsRename', 'model/SpecificationsRequest', 'model/SpecificationsResponse', 'model/ThresholdRequest', 'model/ThresholdResponse', 'model/ThresholdsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AssetIDs'), require('../model/AssetsResponse'), require('../model/BillOfMaterialIDs'), require('../model/BillOfMaterialsResponse'), require('../model/DocumentIDs'), require('../model/DocumentsResponse'), require('../model/ErrorResponse'), require('../model/EventRequestNoInstrumentations'), require('../model/EventResponse'), require('../model/Events1'), require('../model/EventsResponse'), require('../model/InstrumentationAssetsHistoryResponse'), require('../model/InstrumentationRequest'), require('../model/InstrumentationResponse'), require('../model/InstrumentationStatusResponse'), require('../model/InstrumentationStatuses'), require('../model/InstrumentationTypeResponse'), require('../model/InstrumentationTypes'), require('../model/InstrumentationsResponse'), require('../model/NodeIDs'), require('../model/NodesResponse'), require('../model/PictureLinkRequest'), require('../model/PictureResponse'), require('../model/PicturesResponse'), require('../model/SpecificationHistoryResponse'), require('../model/SpecificationsDelete'), require('../model/SpecificationsRename'), require('../model/SpecificationsRequest'), require('../model/SpecificationsResponse'), require('../model/ThresholdRequest'), require('../model/ThresholdResponse'), require('../model/ThresholdsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.InstrumentationApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.AssetIDs, root.NetilionApiDocumentation.AssetsResponse, root.NetilionApiDocumentation.BillOfMaterialIDs, root.NetilionApiDocumentation.BillOfMaterialsResponse, root.NetilionApiDocumentation.DocumentIDs, root.NetilionApiDocumentation.DocumentsResponse, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.EventRequestNoInstrumentations, root.NetilionApiDocumentation.EventResponse, root.NetilionApiDocumentation.Events1, root.NetilionApiDocumentation.EventsResponse, root.NetilionApiDocumentation.InstrumentationAssetsHistoryResponse, root.NetilionApiDocumentation.InstrumentationRequest, root.NetilionApiDocumentation.InstrumentationResponse, root.NetilionApiDocumentation.InstrumentationStatusResponse, root.NetilionApiDocumentation.InstrumentationStatuses, root.NetilionApiDocumentation.InstrumentationTypeResponse, root.NetilionApiDocumentation.InstrumentationTypes, root.NetilionApiDocumentation.InstrumentationsResponse, root.NetilionApiDocumentation.NodeIDs, root.NetilionApiDocumentation.NodesResponse, root.NetilionApiDocumentation.PictureLinkRequest, root.NetilionApiDocumentation.PictureResponse, root.NetilionApiDocumentation.PicturesResponse, root.NetilionApiDocumentation.SpecificationHistoryResponse, root.NetilionApiDocumentation.SpecificationsDelete, root.NetilionApiDocumentation.SpecificationsRename, root.NetilionApiDocumentation.SpecificationsRequest, root.NetilionApiDocumentation.SpecificationsResponse, root.NetilionApiDocumentation.ThresholdRequest, root.NetilionApiDocumentation.ThresholdResponse, root.NetilionApiDocumentation.ThresholdsResponse);
  }
}(this, function(ApiClient, AssetIDs, AssetsResponse, BillOfMaterialIDs, BillOfMaterialsResponse, DocumentIDs, DocumentsResponse, ErrorResponse, EventRequestNoInstrumentations, EventResponse, Events1, EventsResponse, InstrumentationAssetsHistoryResponse, InstrumentationRequest, InstrumentationResponse, InstrumentationStatusResponse, InstrumentationStatuses, InstrumentationTypeResponse, InstrumentationTypes, InstrumentationsResponse, NodeIDs, NodesResponse, PictureLinkRequest, PictureResponse, PicturesResponse, SpecificationHistoryResponse, SpecificationsDelete, SpecificationsRename, SpecificationsRequest, SpecificationsResponse, ThresholdRequest, ThresholdResponse, ThresholdsResponse) {
  'use strict';

  /**
   * Instrumentation service.
   * @module api/InstrumentationApi
   * @version 01.00.00
   */

  /**
   * Constructs a new InstrumentationApi. 
   * @alias module:api/InstrumentationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add assets to an instrumentation
     * Add one or more assets to an instrumentation. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @param {Number} instrumentationId Id of the instrumentation to which the assets will be added
     * @param {module:model/AssetIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addAssetsToInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling addAssetsToInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addAssetsToInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add assets to an instrumentation
     * Add one or more assets to an instrumentation. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @param {Number} instrumentationId Id of the instrumentation to which the assets will be added
     * @param {module:model/AssetIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addAssetsToInstrumentation = function(instrumentationId, body) {
      return this.addAssetsToInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add bill of materials to an instrumentation
     * Add one or more bill of materials to an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation to which the bill of materials will be added
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addBillOfMaterialsToInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling addBillOfMaterialsToInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addBillOfMaterialsToInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/bill_of_materials', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add bill of materials to an instrumentation
     * Add one or more bill of materials to an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation to which the bill of materials will be added
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addBillOfMaterialsToInstrumentation = function(instrumentationId, body) {
      return this.addBillOfMaterialsToInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to an instrumentation
     * Add one or more documents to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @param {Number} instrumentationId Id of the instrumentation to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addDocumentsToInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling addDocumentsToInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDocumentsToInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to an instrumentation
     * Add one or more documents to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @param {Number} instrumentationId Id of the instrumentation to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addDocumentsToInstrumentation = function(instrumentationId, body) {
      return this.addDocumentsToInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a link as instrumentation picture
     * Add an external resource as instrumentation picture.
     * @param {Number} id Id of the instrumentation
     * @param {module:model/PictureLinkRequest} body Picture link object to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    this.addInstrumentationPictureLinkWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addInstrumentationPictureLink");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addInstrumentationPictureLink");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{id}/pictures/links', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a link as instrumentation picture
     * Add an external resource as instrumentation picture.
     * @param {Number} id Id of the instrumentation
     * @param {module:model/PictureLinkRequest} body Picture link object to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    this.addInstrumentationPictureLink = function(id, body) {
      return this.addInstrumentationPictureLinkWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add nodes to an instrumentation
     * Add one or more nodes to an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @param {Number} instrumentationId Id of the instrumentation to which the nodes will be added
     * @param {module:model/NodeIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addNodesToInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling addNodesToInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addNodesToInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/nodes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add nodes to an instrumentation
     * Add one or more nodes to an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @param {Number} instrumentationId Id of the instrumentation to which the nodes will be added
     * @param {module:model/NodeIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addNodesToInstrumentation = function(instrumentationId, body) {
      return this.addNodesToInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new event for an instrumentation
     * Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {module:model/EventRequestNoInstrumentations} body Object to be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventResponse} and HTTP response
     */
    this.createEventForInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling createEventForInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEventForInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/events', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new event for an instrumentation
     * Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {module:model/EventRequestNoInstrumentations} body Object to be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventResponse}
     */
    this.createEventForInstrumentation = function(instrumentationId, body) {
      return this.createEventForInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new instrumentation
     * Create a new instrumentation. The tag of the given instrumentation needs to be unique within its parent. The instrumentation will not be created when this constraint is violated.  To assign a parent instrumentation the user needs &#x60;can_permit&#x60; permission on the parent.
     * @param {module:model/InstrumentationRequest} body Instrumentation object that needs to be created. tag, instrumentation status and instrumentation type are required
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationResponse} and HTTP response
     */
    this.createInstrumentationWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInstrumentation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstrumentationResponse;

      return this.apiClient.callApi(
        '/instrumentations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new instrumentation
     * Create a new instrumentation. The tag of the given instrumentation needs to be unique within its parent. The instrumentation will not be created when this constraint is violated.  To assign a parent instrumentation the user needs &#x60;can_permit&#x60; permission on the parent.
     * @param {module:model/InstrumentationRequest} body Instrumentation object that needs to be created. tag, instrumentation status and instrumentation type are required
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationResponse}
     */
    this.createInstrumentation = function(body) {
      return this.createInstrumentationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an instrumentation threshold
     * Create a new instrumentation threshold. Thresholds value order must be &#x60;&#x60;&#x60;low_low &lt; low &lt; high &lt; high_high&#x60;&#x60;&#x60;. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/ThresholdRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    this.createInstrumentationThresholdWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling createInstrumentationThreshold");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInstrumentationThreshold");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an instrumentation threshold
     * Create a new instrumentation threshold. Thresholds value order must be &#x60;&#x60;&#x60;low_low &lt; low &lt; high &lt; high_high&#x60;&#x60;&#x60;. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/ThresholdRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    this.createInstrumentationThreshold = function(instrumentationId, body) {
      return this.createInstrumentationThresholdWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an instrumentation
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the instrumentation to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteInstrumentationWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInstrumentation");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an instrumentation
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the instrumentation to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteInstrumentation = function(id) {
      return this.deleteInstrumentationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an instrumentation picture
     * Delete an instrumentation picture.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteInstrumentationPictureWithHttpInfo = function(instrumentationId, id) {
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling deleteInstrumentationPicture");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInstrumentationPicture");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an instrumentation picture
     * Delete an instrumentation picture.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteInstrumentationPicture = function(instrumentationId, id) {
      return this.deleteInstrumentationPictureWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an instrumentation threshold
     * Delete an instrumentation threshold.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteInstrumentationThresholdWithHttpInfo = function(instrumentationId, id) {
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling deleteInstrumentationThreshold");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInstrumentationThreshold");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an instrumentation threshold
     * Delete an instrumentation threshold.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteInstrumentationThreshold = function(instrumentationId, id) {
      return this.deleteInstrumentationThresholdWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download an instrumentation picture
     * Download an instrumentation picture.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.downloadInstrumentationPictureWithHttpInfo = function(instrumentationId, id) {
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling downloadInstrumentationPicture");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadInstrumentationPicture");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/{id}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download an instrumentation picture
     * Download an instrumentation picture.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.downloadInstrumentationPicture = function(instrumentationId, id) {
      return this.downloadInstrumentationPictureWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all assets of one instrumentation
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,                             product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.serialNumber Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.productId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.productCategoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.manufacturerId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {Date} opts.productionDate Expected date format is YYYY-MM-DD
     * @param {Date} opts.productionDateFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.productionDateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.nodeId One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetsResponse} and HTTP response
     */
    this.getAssetsOfInstrumentationWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getAssetsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'serial_number': opts['serialNumber'],
        'product_id': opts['productId'],
        'product_category_id': opts['productCategoryId'],
        'parent_id': opts['parentId'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'status_code': opts['statusCode'],
        'tenant_id': opts['tenantId'],
        'production_date': opts['productionDate'],
        'production_date_from': opts['productionDateFrom'],
        'production_date_to': opts['productionDateTo'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'node_id': opts['nodeId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all assets of one instrumentation
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,                             product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.serialNumber Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.productId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.productCategoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.manufacturerId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {Date} opts.productionDate Expected date format is YYYY-MM-DD
     * @param {Date} opts.productionDateFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.productionDateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.nodeId One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetsResponse}
     */
    this.getAssetsOfInstrumentation = function(instrumentationId, opts) {
      return this.getAssetsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all assets an instrumentation was assigned to
     * Returns a list of all assets history available in your scope which have been assigned to the specified instrumentation. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.assetId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.event Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60;
     * @param {Date} opts.eventDatetimeFrom Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.eventDatetimeTo Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationAssetsHistoryResponse} and HTTP response
     */
    this.getAssetsOfInstrumentationHistoryWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getAssetsOfInstrumentationHistory");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'asset_id': opts['assetId'],
        'event': opts['event'],
        'event_datetime_from': opts['eventDatetimeFrom'],
        'event_datetime_to': opts['eventDatetimeTo'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstrumentationAssetsHistoryResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all assets an instrumentation was assigned to
     * Returns a list of all assets history available in your scope which have been assigned to the specified instrumentation. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.assetId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.event Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60;
     * @param {Date} opts.eventDatetimeFrom Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.eventDatetimeTo Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationAssetsHistoryResponse}
     */
    this.getAssetsOfInstrumentationHistory = function(instrumentationId, opts) {
      return this.getAssetsOfInstrumentationHistoryWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all bill of materials of an instrumentation
     * Returns a list of all bill of materials that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialsResponse} and HTTP response
     */
    this.getBillOfMaterialsOfInstrumentationWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getBillOfMaterialsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'author': opts['author'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BillOfMaterialsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/bill_of_materials', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all bill of materials of an instrumentation
     * Returns a list of all bill of materials that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialsResponse}
     */
    this.getBillOfMaterialsOfInstrumentation = function(instrumentationId, opts) {
      return this.getBillOfMaterialsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of an instrumentation
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {Date} opts.validFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntil Expected date format is YYYY-MM-DD
     * @param {Date} opts.validAt Expected date format is YYYY-MM-DD or YYYY-MM or YYYY
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    this.getDocumentsOfInstrumentationWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getDocumentsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'valid_from': opts['validFrom'],
        'valid_until': opts['validUntil'],
        'valid_at': opts['validAt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of an instrumentation
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {Date} opts.validFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntil Expected date format is YYYY-MM-DD
     * @param {Date} opts.validAt Expected date format is YYYY-MM-DD or YYYY-MM or YYYY
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    this.getDocumentsOfInstrumentation = function(instrumentationId, opts) {
      return this.getDocumentsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all events of one instrumentation
     * Returns a list of all events belonging to an instrumentation in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.startDatetime Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.startDatetimeFrom Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.startDatetimeTo Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.endDatetime Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.endDatetimeFrom Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.endDatetimeTo Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsResponse} and HTTP response
     */
    this.getEventsOfInstrumentationWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getEventsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'type_id': opts['typeId'],
        'status_id': opts['statusId'],
        'start_datetime': opts['startDatetime'],
        'start_datetime_from': opts['startDatetimeFrom'],
        'start_datetime_to': opts['startDatetimeTo'],
        'end_datetime': opts['endDatetime'],
        'end_datetime_from': opts['endDatetimeFrom'],
        'end_datetime_to': opts['endDatetimeTo'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all events of one instrumentation
     * Returns a list of all events belonging to an instrumentation in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.startDatetime Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.startDatetimeFrom Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.startDatetimeTo Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.endDatetime Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.endDatetimeFrom Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.endDatetimeTo Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventsResponse}
     */
    this.getEventsOfInstrumentation = function(instrumentationId, opts) {
      return this.getEventsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single instrumentation
     * Get a specific instrumentation in your accessible scope, identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type, type.parent, type.tenant, values, values.unit, values.asset &#x60;&#x60;&#x60; 
     * @param {Number} id Id of the instrumentation to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationResponse} and HTTP response
     */
    this.getInstrumentationByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentationById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstrumentationResponse;

      return this.apiClient.callApi(
        '/instrumentations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single instrumentation
     * Get a specific instrumentation in your accessible scope, identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type, type.parent, type.tenant, values, values.unit, values.asset &#x60;&#x60;&#x60; 
     * @param {Number} id Id of the instrumentation to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationResponse}
     */
    this.getInstrumentationById = function(id, opts) {
      return this.getInstrumentationByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific instrumentation
     * Returns the status of the instrumentation. Needed if only permission on instrumentation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationStatusResponse} and HTTP response
     */
    this.getInstrumentationIdStatusWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getInstrumentationIdStatus");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstrumentationStatusResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific instrumentation
     * Returns the status of the instrumentation. Needed if only permission on instrumentation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationStatusResponse}
     */
    this.getInstrumentationIdStatus = function(instrumentationId, opts) {
      return this.getInstrumentationIdStatusWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the type of the specific instrumentation
     * Returns the type of the instrumentation. Needed if only permission on instrumentation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;parent&#x60;&#x60;&#x60;
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationTypeResponse} and HTTP response
     */
    this.getInstrumentationIdTypeWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getInstrumentationIdType");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstrumentationTypeResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/type', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the type of the specific instrumentation
     * Returns the type of the instrumentation. Needed if only permission on instrumentation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;parent&#x60;&#x60;&#x60;
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationTypeResponse}
     */
    this.getInstrumentationIdType = function(instrumentationId, opts) {
      return this.getInstrumentationIdTypeWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an instrumentation picture
     * Get a single picture of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    this.getInstrumentationPictureWithHttpInfo = function(instrumentationId, id) {
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getInstrumentationPicture");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentationPicture");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an instrumentation picture
     * Get a single picture of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    this.getInstrumentationPicture = function(instrumentationId, id) {
      return this.getInstrumentationPictureWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get instrumentation pictures
     * Get all pictures of an instrumentation.
     * @param {Number} id Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {Number} opts.width filter by width
     * @param {Number} opts.widthFrom filter by width_from
     * @param {Number} opts.widthTo filter by width_to
     * @param {Number} opts.height filter by height
     * @param {Number} opts.heightFrom filter by height_from
     * @param {Number} opts.heightTo filter by height_to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PicturesResponse} and HTTP response
     */
    this.getInstrumentationPicturesWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentationPictures");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'width': opts['width'],
        'width_from': opts['widthFrom'],
        'width_to': opts['widthTo'],
        'height': opts['height'],
        'height_from': opts['heightFrom'],
        'height_to': opts['heightTo'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PicturesResponse;

      return this.apiClient.callApi(
        '/instrumentations/{id}/pictures', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get instrumentation pictures
     * Get all pictures of an instrumentation.
     * @param {Number} id Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {Number} opts.width filter by width
     * @param {Number} opts.widthFrom filter by width_from
     * @param {Number} opts.widthTo filter by width_to
     * @param {Number} opts.height filter by height
     * @param {Number} opts.heightFrom filter by height_from
     * @param {Number} opts.heightTo filter by height_to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PicturesResponse}
     */
    this.getInstrumentationPictures = function(id, opts) {
      return this.getInstrumentationPicturesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible statuses of the specified instrumentation
     * Returns a list of all possible instrumentation statuses for the specified instrument. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.code Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationStatuses} and HTTP response
     */
    this.getInstrumentationStatusesOptionsWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getInstrumentationStatusesOptions");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'tenant_id': opts['tenantId'],
        'name': opts['name'],
        'code': opts['code'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstrumentationStatuses;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/status-options', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible statuses of the specified instrumentation
     * Returns a list of all possible instrumentation statuses for the specified instrument. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.code Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationStatuses}
     */
    this.getInstrumentationStatusesOptions = function(instrumentationId, opts) {
      return this.getInstrumentationStatusesOptionsWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an instrumentation threshold
     * Get a single threshold of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    this.getInstrumentationThresholdWithHttpInfo = function(instrumentationId, id) {
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getInstrumentationThreshold");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentationThreshold");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an instrumentation threshold
     * Get a single threshold of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    this.getInstrumentationThreshold = function(instrumentationId, id) {
      return this.getInstrumentationThresholdWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get instrumentation thresholds
     * Get all thresholds of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.key filter by key
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;key&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdsResponse} and HTTP response
     */
    this.getInstrumentationThresholdsWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getInstrumentationThresholds");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'key': opts['key'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThresholdsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get instrumentation thresholds
     * Get all thresholds of an instrumentation.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.key filter by key
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;key&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdsResponse}
     */
    this.getInstrumentationThresholds = function(instrumentationId, opts) {
      return this.getInstrumentationThresholdsWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible types of the specified instrumentation
     * Returns a list of all possible instrumentation types for the specified instrument. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.code Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationTypes} and HTTP response
     */
    this.getInstrumentationTypesOptionsWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getInstrumentationTypesOptions");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'tenant_id': opts['tenantId'],
        'name': opts['name'],
        'code': opts['code'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstrumentationTypes;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/type-options', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible types of the specified instrumentation
     * Returns a list of all possible instrumentation types for the specified instrument. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.code Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationTypes}
     */
    this.getInstrumentationTypesOptions = function(instrumentationId, opts) {
      return this.getInstrumentationTypesOptionsWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of instrumentations
     * Returns a list of instrumentations in your accessible scope. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type, type.tenant, type.parent, values, values.unit&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.tag Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.criticality Filter accepts undefined, low, medium or high
     * @param {String} opts.accessibility Filter accepts undefined, easy, moderate or difficult
     * @param {String} opts.nodeId One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node
     * @param {String} opts.assetId One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node
     * @param {String} opts.assetStatusId One or multiple ids (comma list). Expected id format is integer. This retrieves all Instrumentations where at least one of its assets has one of the given statuses.
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationsResponse} and HTTP response
     */
    this.getInstrumentationsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'tag': opts['tag'],
        'status_id': opts['statusId'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'criticality': opts['criticality'],
        'accessibility': opts['accessibility'],
        'node_id': opts['nodeId'],
        'asset_id': opts['assetId'],
        'asset_status_id': opts['assetStatusId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstrumentationsResponse;

      return this.apiClient.callApi(
        '/instrumentations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of instrumentations
     * Returns a list of instrumentations in your accessible scope. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type, type.tenant, type.parent, values, values.unit&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.tag Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.criticality Filter accepts undefined, low, medium or high
     * @param {String} opts.accessibility Filter accepts undefined, easy, moderate or difficult
     * @param {String} opts.nodeId One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node
     * @param {String} opts.assetId One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node
     * @param {String} opts.assetStatusId One or multiple ids (comma list). Expected id format is integer. This retrieves all Instrumentations where at least one of its assets has one of the given statuses.
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationsResponse}
     */
    this.getInstrumentations = function(opts) {
      return this.getInstrumentationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all nodes of one Instrumentation
     * Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {Boolean} opts.hidden Filter accepts true or false
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodesResponse} and HTTP response
     */
    this.getNodesOfInstrumentationWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getNodesOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'hidden': opts['hidden'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NodesResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/nodes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all nodes of one Instrumentation
     * Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} instrumentationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {Boolean} opts.hidden Filter accepts true or false
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodesResponse}
     */
    this.getNodesOfInstrumentation = function(instrumentationId, opts) {
      return this.getNodesOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the history of one specification attribute of an instrumentation.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {String} key the exact key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {Date} opts.sourceTimestampFrom source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.sourceTimestampTo source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtFrom updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtTo updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationHistoryResponse} and HTTP response
     */
    this.getSpecificationHistoryOfInstrumentationWithHttpInfo = function(instrumentationId, key, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getSpecificationHistoryOfInstrumentation");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSpecificationHistoryOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'key': key
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'source_timestamp_from': opts['sourceTimestampFrom'],
        'source_timestamp_to': opts['sourceTimestampTo'],
        'updated_at_from': opts['updatedAtFrom'],
        'updated_at_to': opts['updatedAtTo'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationHistoryResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications/{key}/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the history of one specification attribute of an instrumentation.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {String} key the exact key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {Date} opts.sourceTimestampFrom source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.sourceTimestampTo source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtFrom updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.updatedAtTo updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationHistoryResponse}
     */
    this.getSpecificationHistoryOfInstrumentation = function(instrumentationId, key, opts) {
      return this.getSpecificationHistoryOfInstrumentationWithHttpInfo(instrumentationId, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of an instrumentation
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    this.getSpecificationsOfInstrumentationWithHttpInfo = function(instrumentationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling getSpecificationsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of an instrumentation
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    this.getSpecificationsOfInstrumentation = function(instrumentationId, opts) {
      return this.getSpecificationsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove assets from an instrumentation
     * Remove one or more assets from an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @param {Number} instrumentationId Id of the instrumentation from which the assets will be removed
     * @param {module:model/AssetIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeAssetsFromInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling removeAssetsFromInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeAssetsFromInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove assets from an instrumentation
     * Remove one or more assets from an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @param {Number} instrumentationId Id of the instrumentation from which the assets will be removed
     * @param {module:model/AssetIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeAssetsFromInstrumentation = function(instrumentationId, body) {
      return this.removeAssetsFromInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove bill of materials from an instrumentation
     * Remove one or more bill of materials from an instrumentation in your accessible scope.
     * @param {Number} instrumentationId Id of the instrumentation from which the bill of materials will be removed
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeBillOfMaterialsFromInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling removeBillOfMaterialsFromInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeBillOfMaterialsFromInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/bill_of_materials', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove bill of materials from an instrumentation
     * Remove one or more bill of materials from an instrumentation in your accessible scope.
     * @param {Number} instrumentationId Id of the instrumentation from which the bill of materials will be removed
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeBillOfMaterialsFromInstrumentation = function(instrumentationId, body) {
      return this.removeBillOfMaterialsFromInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from an instrumentation
     * Remove one or more documents from an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @param {Number} instrumentationId Id of the instrumentation from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeDocumentsFromInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling removeDocumentsFromInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeDocumentsFromInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/documents', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from an instrumentation
     * Remove one or more documents from an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @param {Number} instrumentationId Id of the instrumentation from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeDocumentsFromInstrumentation = function(instrumentationId, body) {
      return this.removeDocumentsFromInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove events from an instrumentation
     * Remove one or more events from an instrumentation in your accessible scope. If the event has no more related instrumentations, the event will be deleted
     * @param {Number} instrumentationId Id of the instrumentation from which the events will removed.
     * @param {module:model/Events1} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeEventFromInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling removeEventFromInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeEventFromInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/events', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove events from an instrumentation
     * Remove one or more events from an instrumentation in your accessible scope. If the event has no more related instrumentations, the event will be deleted
     * @param {Number} instrumentationId Id of the instrumentation from which the events will removed.
     * @param {module:model/Events1} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeEventFromInstrumentation = function(instrumentationId, body) {
      return this.removeEventFromInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove nodes from an instrumentation
     * Remove one or more nodes from an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @param {Number} instrumentationId Id of the instrumentation from which the nodes will be removed
     * @param {module:model/NodeIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeNodesFromInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling removeNodesFromInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeNodesFromInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/nodes', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove nodes from an instrumentation
     * Remove one or more nodes from an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @param {Number} instrumentationId Id of the instrumentation from which the nodes will be removed
     * @param {module:model/NodeIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeNodesFromInstrumentation = function(instrumentationId, body) {
      return this.removeNodesFromInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of an instrumentation
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeSpecificationsFromInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling removeSpecificationsFromInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeSpecificationsFromInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of an instrumentation
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeSpecificationsFromInstrumentation = function(instrumentationId, body) {
      return this.removeSpecificationsFromInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of an instrumentation in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameSpecificationsOfInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling renameSpecificationsOfInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameSpecificationsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of an instrumentation in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameSpecificationsOfInstrumentation = function(instrumentationId, body) {
      return this.renameSpecificationsOfInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the assets of an instrumentation
     * Replaces all assets belonging to an instrumentation. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @param {Number} instrumentationId Id of the instrumentation of which the assets will be replaced
     * @param {module:model/AssetIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceAssetsOfInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling replaceAssetsOfInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAssetsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the assets of an instrumentation
     * Replaces all assets belonging to an instrumentation. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @param {Number} instrumentationId Id of the instrumentation of which the assets will be replaced
     * @param {module:model/AssetIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceAssetsOfInstrumentation = function(instrumentationId, body) {
      return this.replaceAssetsOfInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the bill of materials of an instrumentation
     * Replaces all bill of materials belonging to an instrumentation. You can send a list of resources that will replace all previous values.
     * @param {Number} instrumentationId Id of the instrumentation of which the bill of materials will be replaced
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceBillOfMaterialsOfInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling replaceBillOfMaterialsOfInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceBillOfMaterialsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/bill_of_materials', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the bill of materials of an instrumentation
     * Replaces all bill of materials belonging to an instrumentation. You can send a list of resources that will replace all previous values.
     * @param {Number} instrumentationId Id of the instrumentation of which the bill of materials will be replaced
     * @param {module:model/BillOfMaterialIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceBillOfMaterialsOfInstrumentation = function(instrumentationId, body) {
      return this.replaceBillOfMaterialsOfInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of an instrumentation
     * Replaces all documents belonging to an instrumentation. You can send a list of resources that will replace all previous values. This action requires &#x60;can_udpate&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @param {Number} instrumentationId Id of the instrumentation of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceDocumentsOfInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling replaceDocumentsOfInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceDocumentsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/documents', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of an instrumentation
     * Replaces all documents belonging to an instrumentation. You can send a list of resources that will replace all previous values. This action requires &#x60;can_udpate&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @param {Number} instrumentationId Id of the instrumentation of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceDocumentsOfInstrumentation = function(instrumentationId, body) {
      return this.replaceDocumentsOfInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the nodes of an instrumentation
     * Replaces all nodes belonging to an instrumentation in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @param {Number} instrumentationId Id of the instrumentation of which the nodes will be replaced
     * @param {module:model/NodeIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceNodesOfInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling replaceNodesOfInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceNodesOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/nodes', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the nodes of an instrumentation
     * Replaces all nodes belonging to an instrumentation in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @param {Number} instrumentationId Id of the instrumentation of which the nodes will be replaced
     * @param {module:model/NodeIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceNodesOfInstrumentation = function(instrumentationId, body) {
      return this.replaceNodesOfInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation
     * Update accessible parameters of the requested resource in your accessible scope. To assign a parent instrumentation the user needs &#x60;can_permit&#x60; permission on the parent and on the current instrumentation.
     * @param {Number} id Id of the instrumentation to update
     * @param {module:model/InstrumentationRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateInstrumentationWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInstrumentation");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation
     * Update accessible parameters of the requested resource in your accessible scope. To assign a parent instrumentation the user needs &#x60;can_permit&#x60; permission on the parent and on the current instrumentation.
     * @param {Number} id Id of the instrumentation to update
     * @param {module:model/InstrumentationRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateInstrumentation = function(id, body) {
      return this.updateInstrumentationWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation picture
     * Upload a new instrumentation picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @param {File} image the image to upload (up to 1 MB)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    this.updateInstrumentationPictureWithHttpInfo = function(instrumentationId, id, image) {
      var postBody = null;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling updateInstrumentationPicture");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstrumentationPicture");
      }

      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling updateInstrumentationPicture");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image': image
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation picture
     * Upload a new instrumentation picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @param {File} image the image to upload (up to 1 MB)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    this.updateInstrumentationPicture = function(instrumentationId, id, image) {
      return this.updateInstrumentationPictureWithHttpInfo(instrumentationId, id, image)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation picture link
     * Update an instrumentation picture link.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @param {module:model/PictureLinkRequest} body Picture link object to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    this.updateInstrumentationPictureLinkWithHttpInfo = function(instrumentationId, id, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling updateInstrumentationPictureLink");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstrumentationPictureLink");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInstrumentationPictureLink");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/links/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation picture link
     * Update an instrumentation picture link.
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation picture
     * @param {module:model/PictureLinkRequest} body Picture link object to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    this.updateInstrumentationPictureLink = function(instrumentationId, id, body) {
      return this.updateInstrumentationPictureLinkWithHttpInfo(instrumentationId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation threshold
     * Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_udpate&#x60; permission on the instrumentation
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @param {module:model/ThresholdRequest} body Object body that will be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    this.updateInstrumentationThresholdWithHttpInfo = function(instrumentationId, id, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling updateInstrumentationThreshold");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInstrumentationThreshold");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInstrumentationThreshold");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation threshold
     * Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_udpate&#x60; permission on the instrumentation
     * @param {Number} instrumentationId Id of the instrumentation
     * @param {Number} id Id of the instrumentation threshold
     * @param {module:model/ThresholdRequest} body Object body that will be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    this.updateInstrumentationThreshold = function(instrumentationId, id, body) {
      return this.updateInstrumentationThresholdWithHttpInfo(instrumentationId, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of an instrumentation
     * Update the specification object of an instrumentation in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSpecificationsOfInstrumentationWithHttpInfo = function(instrumentationId, body) {
      var postBody = body;

      // verify the required parameter 'instrumentationId' is set
      if (instrumentationId === undefined || instrumentationId === null) {
        throw new Error("Missing the required parameter 'instrumentationId' when calling updateSpecificationsOfInstrumentation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpecificationsOfInstrumentation");
      }


      var pathParams = {
        'instrumentation_id': instrumentationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of an instrumentation
     * Update the specification object of an instrumentation in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} instrumentationId Id of the specified instrumentation
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSpecificationsOfInstrumentation = function(instrumentationId, body) {
      return this.updateSpecificationsOfInstrumentationWithHttpInfo(instrumentationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload an instrumentation picture
     * Upload a new instrumentation picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @param {Number} id Id of the instrumentation
     * @param {File} image the image to upload (up to 1 MB)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    this.uploadInstrumentationPictureWithHttpInfo = function(id, image) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadInstrumentationPicture");
      }

      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling uploadInstrumentationPicture");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image': image
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{id}/pictures', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload an instrumentation picture
     * Upload a new instrumentation picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @param {Number} id Id of the instrumentation
     * @param {File} image the image to upload (up to 1 MB)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    this.uploadInstrumentationPicture = function(id, image) {
      return this.uploadInstrumentationPictureWithHttpInfo(id, image)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
