/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AssetIDs from '../model/AssetIDs';
import AssetsResponse from '../model/AssetsResponse';
import BillOfMaterialIDs from '../model/BillOfMaterialIDs';
import BillOfMaterialsResponse from '../model/BillOfMaterialsResponse';
import DocumentIDs from '../model/DocumentIDs';
import DocumentsResponse from '../model/DocumentsResponse';
import ErrorResponse from '../model/ErrorResponse';
import EventRequestNoInstrumentations from '../model/EventRequestNoInstrumentations';
import EventResponse from '../model/EventResponse';
import EventsResponse from '../model/EventsResponse';
import InstrumentationAssetsHistoryResponse from '../model/InstrumentationAssetsHistoryResponse';
import InstrumentationRequest from '../model/InstrumentationRequest';
import InstrumentationResponse from '../model/InstrumentationResponse';
import InstrumentationStatusResponse from '../model/InstrumentationStatusResponse';
import InstrumentationTypeResponse from '../model/InstrumentationTypeResponse';
import InstrumentationsResponse from '../model/InstrumentationsResponse';
import NodeIDs from '../model/NodeIDs';
import NodesResponse from '../model/NodesResponse';
import PictureLinkRequest from '../model/PictureLinkRequest';
import PictureResponse from '../model/PictureResponse';
import PicturesResponse from '../model/PicturesResponse';
import SpecificationHistoryResponse from '../model/SpecificationHistoryResponse';
import SpecificationRequest from '../model/SpecificationRequest';
import SpecificationsRename from '../model/SpecificationsRename';
import SpecificationsResponse from '../model/SpecificationsResponse';
import ThresholdRequest from '../model/ThresholdRequest';
import ThresholdResponse from '../model/ThresholdResponse';
import ThresholdsResponse from '../model/ThresholdsResponse';

/**
* Instrumentation service.
* @module api/InstrumentationApi
* @version 01.00.00
*/
export default class InstrumentationApi {

    /**
    * Constructs a new InstrumentationApi. 
    * @alias module:api/InstrumentationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add assets to an instrumentation
     * Add one or more assets to an instrumentation. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addAssetsToInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add assets to an instrumentation
     * Add one or more assets to an instrumentation. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addAssetsToInstrumentation(body, instrumentationId) {
      return this.addAssetsToInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add bill of materials to an instrumentation
     * Add one or more bill of materials to an instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addBillOfMaterialsToInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/bill_of_materials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add bill of materials to an instrumentation
     * Add one or more bill of materials to an instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addBillOfMaterialsToInstrumentation(body, instrumentationId) {
      return this.addBillOfMaterialsToInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to an instrumentation
     * Add one or more documents to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDocumentsToInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to an instrumentation
     * Add one or more documents to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDocumentsToInstrumentation(body, instrumentationId) {
      return this.addDocumentsToInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a link as instrumentation picture
     * Add an external resource as instrumentation picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    addInstrumentationPictureLinkWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{id}/pictures/links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a link as instrumentation picture
     * Add an external resource as instrumentation picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    addInstrumentationPictureLink(body, id) {
      return this.addInstrumentationPictureLinkWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add nodes to an instrumentation
     * Add one or more nodes to an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addNodesToInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/nodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add nodes to an instrumentation
     * Add one or more nodes to an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addNodesToInstrumentation(body, instrumentationId) {
      return this.addNodesToInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new event for an instrumentation
     * Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventResponse} and HTTP response
     */
    createEventForInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new event for an instrumentation
     * Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventResponse}
     */
    createEventForInstrumentation(body, instrumentationId) {
      return this.createEventForInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new instrumentation
     * Create a new instrumentation. The tag of the given instrumentation needs to be unique within its parent. The instrumentation will not be created when this constraint is violated.  To assign a parent instrumentation the user needs &#x60;can_permit&#x60; permission on the parent.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationResponse} and HTTP response
     */
    createInstrumentationWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstrumentationResponse;

      return this.apiClient.callApi(
        '/instrumentations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new instrumentation
     * Create a new instrumentation. The tag of the given instrumentation needs to be unique within its parent. The instrumentation will not be created when this constraint is violated.  To assign a parent instrumentation the user needs &#x60;can_permit&#x60; permission on the parent.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationResponse}
     */
    createInstrumentation(body) {
      return this.createInstrumentationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an instrumentation threshold
     * Create a new instrumentation threshold. Thresholds value order must be &#x60;&#x60;&#x60;low_low &lt; low &lt; high &lt; high_high&#x60;&#x60;&#x60;. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    createInstrumentationThresholdWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an instrumentation threshold
     * Create a new instrumentation threshold. Thresholds value order must be &#x60;&#x60;&#x60;low_low &lt; low &lt; high &lt; high_high&#x60;&#x60;&#x60;. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    createInstrumentationThreshold(body, instrumentationId) {
      return this.createInstrumentationThresholdWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an instrumentation
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteInstrumentationWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an instrumentation
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteInstrumentation(id) {
      return this.deleteInstrumentationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an instrumentation picture
     * Delete an instrumentation picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteInstrumentationPictureWithHttpInfo(instrumentationId, id) {
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an instrumentation picture
     * Delete an instrumentation picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteInstrumentationPicture(instrumentationId, id) {
      return this.deleteInstrumentationPictureWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an instrumentation threshold
     * Delete an instrumentation threshold.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteInstrumentationThresholdWithHttpInfo(instrumentationId, id) {
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an instrumentation threshold
     * Delete an instrumentation threshold.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteInstrumentationThreshold(instrumentationId, id) {
      return this.deleteInstrumentationThresholdWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download an instrumentation picture
     * Download an instrumentation picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    downloadInstrumentationPictureWithHttpInfo(instrumentationId, id) {
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download an instrumentation picture
     * Download an instrumentation picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    downloadInstrumentationPicture(instrumentationId, id) {
      return this.downloadInstrumentationPictureWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all assets of one instrumentation
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,                             product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetsResponse} and HTTP response
     */
    getAssetsOfInstrumentationWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'serial_number': opts['serialNumber'],
        'product_id': opts['productId'],
        'product_category_id': opts['productCategoryId'],
        'parent_id': opts['parentId'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'status_code': opts['statusCode'],
        'tenant_id': opts['tenantId'],
        'production_date': opts['productionDate'],
        'production_date_from': opts['productionDateFrom'],
        'production_date_to': opts['productionDateTo'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'node_id': opts['nodeId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all assets of one instrumentation
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,                             product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetsResponse}
     */
    getAssetsOfInstrumentation(instrumentationId, opts) {
      return this.getAssetsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all assets an instrumentation was assigned to
     * Returns a list of all assets history available in your scope which have been assigned to the specified instrumentation. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationAssetsHistoryResponse} and HTTP response
     */
    getAssetsOfInstrumentationHistoryWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'asset_id': opts['assetId'],
        'event': opts['event'],
        'event_datetime_from': opts['eventDatetimeFrom'],
        'event_datetime_to': opts['eventDatetimeTo'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentationAssetsHistoryResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all assets an instrumentation was assigned to
     * Returns a list of all assets history available in your scope which have been assigned to the specified instrumentation. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationAssetsHistoryResponse}
     */
    getAssetsOfInstrumentationHistory(instrumentationId, opts) {
      return this.getAssetsOfInstrumentationHistoryWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all bill of materials of an instrumentation
     * Returns a list of all bill of materials that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialsResponse} and HTTP response
     */
    getBillOfMaterialsOfInstrumentationWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'author': opts['author'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BillOfMaterialsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/bill_of_materials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all bill of materials of an instrumentation
     * Returns a list of all bill of materials that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialsResponse}
     */
    getBillOfMaterialsOfInstrumentation(instrumentationId, opts) {
      return this.getBillOfMaterialsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of an instrumentation
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    getDocumentsOfInstrumentationWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'valid_from': opts['validFrom'],
        'valid_until': opts['validUntil'],
        'valid_at': opts['validAt']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of an instrumentation
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    getDocumentsOfInstrumentation(instrumentationId, opts) {
      return this.getDocumentsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all events of one instrumentation
     * Returns a list of all events belonging to an instrumentation in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsResponse} and HTTP response
     */
    getEventsOfInstrumentationWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'type_id': opts['typeId'],
        'status_id': opts['statusId'],
        'start_datetime': opts['startDatetime'],
        'start_datetime_from': opts['startDatetimeFrom'],
        'start_datetime_to': opts['startDatetimeTo'],
        'end_datetime': opts['endDatetime'],
        'end_datetime_from': opts['endDatetimeFrom'],
        'end_datetime_to': opts['endDatetimeTo'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all events of one instrumentation
     * Returns a list of all events belonging to an instrumentation in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventsResponse}
     */
    getEventsOfInstrumentation(instrumentationId, opts) {
      return this.getEventsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single instrumentation
     * Get a specific instrumentation in your accessible scope, identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type, type.parent, type.tenant, values, values.unit, values.asset &#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationResponse} and HTTP response
     */
    getInstrumentationByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentationResponse;

      return this.apiClient.callApi(
        '/instrumentations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single instrumentation
     * Get a specific instrumentation in your accessible scope, identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type, type.parent, type.tenant, values, values.unit, values.asset &#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationResponse}
     */
    getInstrumentationById(id, opts) {
      return this.getInstrumentationByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific instrumentation
     * Returns the status of the instrumentation. Needed if only permission on instrumentation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationStatusResponse} and HTTP response
     */
    getInstrumentationIdStatusWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentationStatusResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific instrumentation
     * Returns the status of the instrumentation. Needed if only permission on instrumentation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationStatusResponse}
     */
    getInstrumentationIdStatus(instrumentationId, opts) {
      return this.getInstrumentationIdStatusWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the type of the specific instrumentation
     * Returns the type of the instrumentation. Needed if only permission on instrumentation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationTypeResponse} and HTTP response
     */
    getInstrumentationIdTypeWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentationTypeResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the type of the specific instrumentation
     * Returns the type of the instrumentation. Needed if only permission on instrumentation but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationTypeResponse}
     */
    getInstrumentationIdType(instrumentationId, opts) {
      return this.getInstrumentationIdTypeWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an instrumentation picture
     * Get a single picture of an instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    getInstrumentationPictureWithHttpInfo(instrumentationId, id) {
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an instrumentation picture
     * Get a single picture of an instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    getInstrumentationPicture(instrumentationId, id) {
      return this.getInstrumentationPictureWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get instrumentation pictures
     * Get all pictures of an instrumentation.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PicturesResponse} and HTTP response
     */
    getInstrumentationPicturesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'width': opts['width'],
        'width_from': opts['widthFrom'],
        'width_to': opts['widthTo'],
        'height': opts['height'],
        'height_from': opts['heightFrom'],
        'height_to': opts['heightTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PicturesResponse;

      return this.apiClient.callApi(
        '/instrumentations/{id}/pictures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get instrumentation pictures
     * Get all pictures of an instrumentation.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PicturesResponse}
     */
    getInstrumentationPictures(id, opts) {
      return this.getInstrumentationPicturesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible statuses of the specified instrumentation
     * Returns a list of all possible instrumentation statuses for the specified instrument. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getInstrumentationStatusesOptionsWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'tenant_id': opts['tenantId'],
        'name': opts['name'],
        'code': opts['code']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/status-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible statuses of the specified instrumentation
     * Returns a list of all possible instrumentation statuses for the specified instrument. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getInstrumentationStatusesOptions(instrumentationId, opts) {
      return this.getInstrumentationStatusesOptionsWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an instrumentation threshold
     * Get a single threshold of an instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    getInstrumentationThresholdWithHttpInfo(instrumentationId, id) {
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an instrumentation threshold
     * Get a single threshold of an instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    getInstrumentationThreshold(instrumentationId, id) {
      return this.getInstrumentationThresholdWithHttpInfo(instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get instrumentation thresholds
     * Get all thresholds of an instrumentation.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdsResponse} and HTTP response
     */
    getInstrumentationThresholdsWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'key': opts['key'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThresholdsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get instrumentation thresholds
     * Get all thresholds of an instrumentation.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdsResponse}
     */
    getInstrumentationThresholds(instrumentationId, opts) {
      return this.getInstrumentationThresholdsWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible types of the specified instrumentation
     * Returns a list of all possible instrumentation types for the specified instrument. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getInstrumentationTypesOptionsWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'tenant_id': opts['tenantId'],
        'name': opts['name'],
        'code': opts['code']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/type-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible types of the specified instrumentation
     * Returns a list of all possible instrumentation types for the specified instrument. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getInstrumentationTypesOptions(instrumentationId, opts) {
      return this.getInstrumentationTypesOptionsWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of instrumentations
     * Returns a list of instrumentations in your accessible scope. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type, type.tenant, type.parent, values, values.unit&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationsResponse} and HTTP response
     */
    getInstrumentationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'tag': opts['tag'],
        'status_id': opts['statusId'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'criticality': opts['criticality'],
        'accessibility': opts['accessibility'],
        'node_id': opts['nodeId'],
        'asset_id': opts['assetId'],
        'asset_status_id': opts['assetStatusId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentationsResponse;

      return this.apiClient.callApi(
        '/instrumentations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of instrumentations
     * Returns a list of instrumentations in your accessible scope. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type, type.tenant, type.parent, values, values.unit&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationsResponse}
     */
    getInstrumentations(opts) {
      return this.getInstrumentationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all nodes of one Instrumentation
     * Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodesResponse} and HTTP response
     */
    getNodesOfInstrumentationWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'hidden': opts['hidden'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodesResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all nodes of one Instrumentation
     * Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodesResponse}
     */
    getNodesOfInstrumentation(instrumentationId, opts) {
      return this.getNodesOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the history of one specification attribute of an instrumentation.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationHistoryResponse} and HTTP response
     */
    getSpecificationHistoryOfInstrumentationWithHttpInfo(instrumentationId, key, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'key': key
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'source_timestamp_from': opts['sourceTimestampFrom'],
        'source_timestamp_to': opts['sourceTimestampTo'],
        'updated_at_from': opts['updatedAtFrom'],
        'updated_at_to': opts['updatedAtTo'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpecificationHistoryResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications/{key}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the history of one specification attribute of an instrumentation.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationHistoryResponse}
     */
    getSpecificationHistoryOfInstrumentation(instrumentationId, key, opts) {
      return this.getSpecificationHistoryOfInstrumentationWithHttpInfo(instrumentationId, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of an instrumentation
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    getSpecificationsOfInstrumentationWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of an instrumentation
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    getSpecificationsOfInstrumentation(instrumentationId, opts) {
      return this.getSpecificationsOfInstrumentationWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove assets from an instrumentation
     * Remove one or more assets from an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeAssetsFromInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove assets from an instrumentation
     * Remove one or more assets from an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeAssetsFromInstrumentation(body, instrumentationId) {
      return this.removeAssetsFromInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove bill of materials from an instrumentation
     * Remove one or more bill of materials from an instrumentation in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeBillOfMaterialsFromInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/bill_of_materials', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove bill of materials from an instrumentation
     * Remove one or more bill of materials from an instrumentation in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeBillOfMaterialsFromInstrumentation(body, instrumentationId) {
      return this.removeBillOfMaterialsFromInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from an instrumentation
     * Remove one or more documents from an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDocumentsFromInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from an instrumentation
     * Remove one or more documents from an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDocumentsFromInstrumentation(body, instrumentationId) {
      return this.removeDocumentsFromInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove events from an instrumentation
     * Remove one or more events from an instrumentation in your accessible scope. If the event has no more related instrumentations, the event will be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeEventFromInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/events', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove events from an instrumentation
     * Remove one or more events from an instrumentation in your accessible scope. If the event has no more related instrumentations, the event will be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeEventFromInstrumentation(body, instrumentationId) {
      return this.removeEventFromInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove nodes from an instrumentation
     * Remove one or more nodes from an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeNodesFromInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/nodes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove nodes from an instrumentation
     * Remove one or more nodes from an instrumentation in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeNodesFromInstrumentation(body, instrumentationId) {
      return this.removeNodesFromInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of an instrumentation
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeSpecificationsFromInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of an instrumentation
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeSpecificationsFromInstrumentation(body, instrumentationId) {
      return this.removeSpecificationsFromInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of an instrumentation in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    renameSpecificationsOfInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of an instrumentation in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    renameSpecificationsOfInstrumentation(body, instrumentationId) {
      return this.renameSpecificationsOfInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the assets of an instrumentation
     * Replaces all assets belonging to an instrumentation. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceAssetsOfInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/assets', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the assets of an instrumentation
     * Replaces all assets belonging to an instrumentation. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceAssetsOfInstrumentation(body, instrumentationId) {
      return this.replaceAssetsOfInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the bill of materials of an instrumentation
     * Replaces all bill of materials belonging to an instrumentation. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceBillOfMaterialsOfInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/bill_of_materials', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the bill of materials of an instrumentation
     * Replaces all bill of materials belonging to an instrumentation. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceBillOfMaterialsOfInstrumentation(body, instrumentationId) {
      return this.replaceBillOfMaterialsOfInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of an instrumentation
     * Replaces all documents belonging to an instrumentation. You can send a list of resources that will replace all previous values. This action requires &#x60;can_udpate&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceDocumentsOfInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/documents', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of an instrumentation
     * Replaces all documents belonging to an instrumentation. You can send a list of resources that will replace all previous values. This action requires &#x60;can_udpate&#x60; permission on the instrumentation and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceDocumentsOfInstrumentation(body, instrumentationId) {
      return this.replaceDocumentsOfInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the nodes of an instrumentation
     * Replaces all nodes belonging to an instrumentation in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceNodesOfInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/nodes', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the nodes of an instrumentation
     * Replaces all nodes belonging to an instrumentation in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the instrumentation and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceNodesOfInstrumentation(body, instrumentationId) {
      return this.replaceNodesOfInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation
     * Update accessible parameters of the requested resource in your accessible scope. To assign a parent instrumentation the user needs &#x60;can_permit&#x60; permission on the parent and on the current instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateInstrumentationWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation
     * Update accessible parameters of the requested resource in your accessible scope. To assign a parent instrumentation the user needs &#x60;can_permit&#x60; permission on the parent and on the current instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateInstrumentation(body, id) {
      return this.updateInstrumentationWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation picture
     * Upload a new instrumentation picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    updateInstrumentationPictureWithHttpInfo(image, instrumentationId, id) {
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation picture
     * Upload a new instrumentation picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    updateInstrumentationPicture(image, instrumentationId, id) {
      return this.updateInstrumentationPictureWithHttpInfo(image, instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation picture link
     * Update an instrumentation picture link.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    updateInstrumentationPictureLinkWithHttpInfo(body, instrumentationId, id) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/pictures/links/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation picture link
     * Update an instrumentation picture link.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    updateInstrumentationPictureLink(body, instrumentationId, id) {
      return this.updateInstrumentationPictureLinkWithHttpInfo(body, instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an instrumentation threshold
     * Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_udpate&#x60; permission on the instrumentation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThresholdResponse} and HTTP response
     */
    updateInstrumentationThresholdWithHttpInfo(body, instrumentationId, id) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThresholdResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/thresholds/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an instrumentation threshold
     * Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_udpate&#x60; permission on the instrumentation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ThresholdResponse}
     */
    updateInstrumentationThreshold(body, instrumentationId, id) {
      return this.updateInstrumentationThresholdWithHttpInfo(body, instrumentationId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of an instrumentation
     * Update the specification object of an instrumentation in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateSpecificationsOfInstrumentationWithHttpInfo(body, instrumentationId) {
      let postBody = body;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/specifications', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of an instrumentation
     * Update the specification object of an instrumentation in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateSpecificationsOfInstrumentation(body, instrumentationId) {
      return this.updateSpecificationsOfInstrumentationWithHttpInfo(body, instrumentationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload an instrumentation picture
     * Upload a new instrumentation picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    uploadInstrumentationPictureWithHttpInfo(image, id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/instrumentations/{id}/pictures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload an instrumentation picture
     * Upload a new instrumentation picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    uploadInstrumentationPicture(image, id) {
      return this.uploadInstrumentationPictureWithHttpInfo(image, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
