/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessRightsResponse', 'model/CurrentUserResponse', 'model/DataExportRequest', 'model/DataExportResponse', 'model/DataExportsResponse', 'model/EmailChangeRequest', 'model/ErrorResponse', 'model/Notifications', 'model/PasswordChangeRequest', 'model/ResetPasswordRequest', 'model/ResetTokenRequest', 'model/SignInsResponse', 'model/SpecificationsDelete', 'model/SpecificationsRename', 'model/SpecificationsRequest', 'model/SpecificationsResponse', 'model/TechnicalUserCreateResponse', 'model/TechnicalUserPasswordResponse', 'model/TechnicalUserRequest', 'model/TechnicalUsersResponse', 'model/UsageResponse', 'model/UserChangeRequest', 'model/UserGroupIDs', 'model/UserGroupsWithUsers', 'model/UserPublicResponse', 'model/UserRequest', 'model/UserResponse', 'model/UserRoleIDs', 'model/UserRolesResponse', 'model/UsersResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessRightsResponse'), require('../model/CurrentUserResponse'), require('../model/DataExportRequest'), require('../model/DataExportResponse'), require('../model/DataExportsResponse'), require('../model/EmailChangeRequest'), require('../model/ErrorResponse'), require('../model/Notifications'), require('../model/PasswordChangeRequest'), require('../model/ResetPasswordRequest'), require('../model/ResetTokenRequest'), require('../model/SignInsResponse'), require('../model/SpecificationsDelete'), require('../model/SpecificationsRename'), require('../model/SpecificationsRequest'), require('../model/SpecificationsResponse'), require('../model/TechnicalUserCreateResponse'), require('../model/TechnicalUserPasswordResponse'), require('../model/TechnicalUserRequest'), require('../model/TechnicalUsersResponse'), require('../model/UsageResponse'), require('../model/UserChangeRequest'), require('../model/UserGroupIDs'), require('../model/UserGroupsWithUsers'), require('../model/UserPublicResponse'), require('../model/UserRequest'), require('../model/UserResponse'), require('../model/UserRoleIDs'), require('../model/UserRolesResponse'), require('../model/UsersResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.UserApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.AccessRightsResponse, root.NetilionApiDocumentation.CurrentUserResponse, root.NetilionApiDocumentation.DataExportRequest, root.NetilionApiDocumentation.DataExportResponse, root.NetilionApiDocumentation.DataExportsResponse, root.NetilionApiDocumentation.EmailChangeRequest, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.Notifications, root.NetilionApiDocumentation.PasswordChangeRequest, root.NetilionApiDocumentation.ResetPasswordRequest, root.NetilionApiDocumentation.ResetTokenRequest, root.NetilionApiDocumentation.SignInsResponse, root.NetilionApiDocumentation.SpecificationsDelete, root.NetilionApiDocumentation.SpecificationsRename, root.NetilionApiDocumentation.SpecificationsRequest, root.NetilionApiDocumentation.SpecificationsResponse, root.NetilionApiDocumentation.TechnicalUserCreateResponse, root.NetilionApiDocumentation.TechnicalUserPasswordResponse, root.NetilionApiDocumentation.TechnicalUserRequest, root.NetilionApiDocumentation.TechnicalUsersResponse, root.NetilionApiDocumentation.UsageResponse, root.NetilionApiDocumentation.UserChangeRequest, root.NetilionApiDocumentation.UserGroupIDs, root.NetilionApiDocumentation.UserGroupsWithUsers, root.NetilionApiDocumentation.UserPublicResponse, root.NetilionApiDocumentation.UserRequest, root.NetilionApiDocumentation.UserResponse, root.NetilionApiDocumentation.UserRoleIDs, root.NetilionApiDocumentation.UserRolesResponse, root.NetilionApiDocumentation.UsersResponse);
  }
}(this, function(ApiClient, AccessRightsResponse, CurrentUserResponse, DataExportRequest, DataExportResponse, DataExportsResponse, EmailChangeRequest, ErrorResponse, Notifications, PasswordChangeRequest, ResetPasswordRequest, ResetTokenRequest, SignInsResponse, SpecificationsDelete, SpecificationsRename, SpecificationsRequest, SpecificationsResponse, TechnicalUserCreateResponse, TechnicalUserPasswordResponse, TechnicalUserRequest, TechnicalUsersResponse, UsageResponse, UserChangeRequest, UserGroupIDs, UserGroupsWithUsers, UserPublicResponse, UserRequest, UserResponse, UserRoleIDs, UserRolesResponse, UsersResponse) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 01.00.00
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add user groups to a user
     * Add one or more user groups to a user identified by id in the url.
     * @param {Number} userId Id of the user to whom the user groups will be added
     * @param {module:model/UserGroupIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addUserGroupsToUserWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserGroupsToUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addUserGroupsToUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/usergroups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add user groups to a user
     * Add one or more user groups to a user identified by id in the url.
     * @param {Number} userId Id of the user to whom the user groups will be added
     * @param {module:model/UserGroupIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addUserGroupsToUser = function(userId, body) {
      return this.addUserGroupsToUserWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add user roles to a user
     * Add one or more user roles to a user. To work with roles, admin role is required.
     * @param {Number} userId Id of the user to which the user roles will be added
     * @param {module:model/UserRoleIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addUserRolesToUserWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserRolesToUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addUserRolesToUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/userroles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add user roles to a user
     * Add one or more user roles to a user. To work with roles, admin role is required.
     * @param {Number} userId Id of the user to which the user roles will be added
     * @param {module:model/UserRoleIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addUserRolesToUser = function(userId, body) {
      return this.addUserRolesToUserWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create users data export for current user
     * create the data export of the authenticated user in the current context.
     * @param {module:model/DataExportRequest} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataExportResponse} and HTTP response
     */
    this.createCurrentUserDataExportWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCurrentUserDataExport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataExportResponse;

      return this.apiClient.callApi(
        '/users/current/data_exports', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * create users data export for current user
     * create the data export of the authenticated user in the current context.
     * @param {module:model/DataExportRequest} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataExportResponse}
     */
    this.createCurrentUserDataExport = function(body) {
      return this.createCurrentUserDataExportWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new technical user
     * Creates a new technical user. Password is automatically generated an can not be defined. The generated password is part of the response (but cannot be later received again) Technical users must not be confirmed via eMail link. 
     * @param {module:model/TechnicalUserRequest} body Technical User object that needs to be registered
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TechnicalUserCreateResponse} and HTTP response
     */
    this.createTechnicalUserWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTechnicalUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TechnicalUserCreateResponse;

      return this.apiClient.callApi(
        '/technical_users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new technical user
     * Creates a new technical user. Password is automatically generated an can not be defined. The generated password is part of the response (but cannot be later received again) Technical users must not be confirmed via eMail link. 
     * @param {module:model/TechnicalUserRequest} body Technical User object that needs to be registered
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TechnicalUserCreateResponse}
     */
    this.createTechnicalUser = function(body) {
      return this.createTechnicalUserWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete users data export for current user
     * delete the data export of the authenticated user in the current context.
     * @param {Number} id Id of the data_export to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCurrentUserDatasExportWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCurrentUserDatasExport");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/current/data_exports/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * delete users data export for current user
     * delete the data export of the authenticated user in the current context.
     * @param {Number} id Id of the data_export to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCurrentUserDatasExport = function(id) {
      return this.deleteCurrentUserDatasExportWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the given notification for the current user
     * Delete the given notification for the currently authenticated user.
     * @param {Number} id Id of the notification to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCurrentUserNotificationsWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCurrentUserNotifications");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/current/notifications/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete the given notification for the current user
     * Delete the given notification for the currently authenticated user.
     * @param {Number} id Id of the notification to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCurrentUserNotifications = function(id) {
      return this.deleteCurrentUserNotificationsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a technical user
     * Delete a technical user identified by the id in the URL.
     * @param {Number} id Id of the technical user to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteTechnicalUserWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTechnicalUser");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/technical_users/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a technical user
     * Delete a technical user identified by the id in the URL.
     * @param {Number} id Id of the technical user to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteTechnicalUser = function(id) {
      return this.deleteTechnicalUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user
     * Delete a specific resource in your permission scope identified by the id in the URL.
     * @param {Number} id Id of the user to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteUserWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a user
     * Delete a specific resource in your permission scope identified by the id in the URL.
     * @param {Number} id Id of the user to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteUser = function(id) {
      return this.deleteUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * change email of current user
     * Change the email of the user if current password is valid
     * @param {module:model/EmailChangeRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.emailChangeWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling emailChange");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/current/email', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * change email of current user
     * Change the email of the user if current password is valid
     * @param {module:model/EmailChangeRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.emailChange = function(body) {
      return this.emailChangeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current user
     * Get the user authenticated in the current context. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CurrentUserResponse} and HTTP response
     */
    this.getCurrentUserWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CurrentUserResponse;

      return this.apiClient.callApi(
        '/users/current', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get current user
     * Get the user authenticated in the current context. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CurrentUserResponse}
     */
    this.getCurrentUser = function(opts) {
      return this.getCurrentUserWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current users access rights for a permitable
     * Get the access rights for a permitable of the authenticated user in the current context.
     * @param {Number} permitableId id of the permitable.
     * @param {String} permitableType permitable type eg. Asset, Node, EDM::EdgeDevice.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccessRightsResponse} and HTTP response
     */
    this.getCurrentUserAccessRightsWithHttpInfo = function(permitableId, permitableType) {
      var postBody = null;

      // verify the required parameter 'permitableId' is set
      if (permitableId === undefined || permitableId === null) {
        throw new Error("Missing the required parameter 'permitableId' when calling getCurrentUserAccessRights");
      }

      // verify the required parameter 'permitableType' is set
      if (permitableType === undefined || permitableType === null) {
        throw new Error("Missing the required parameter 'permitableType' when calling getCurrentUserAccessRights");
      }


      var pathParams = {
      };
      var queryParams = {
        'permitable_id': permitableId,
        'permitable_type': permitableType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccessRightsResponse;

      return this.apiClient.callApi(
        '/users/current/access_rights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get current users access rights for a permitable
     * Get the access rights for a permitable of the authenticated user in the current context.
     * @param {Number} permitableId id of the permitable.
     * @param {String} permitableType permitable type eg. Asset, Node, EDM::EdgeDevice.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccessRightsResponse}
     */
    this.getCurrentUserAccessRights = function(permitableId, permitableType) {
      return this.getCurrentUserAccessRightsWithHttpInfo(permitableId, permitableType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single user data export
     * Get the data exports of the authenticated user.
     * @param {Number} id Id of the data_export to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataExportResponse} and HTTP response
     */
    this.getCurrentUserDataExportbyIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCurrentUserDataExportbyId");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataExportResponse;

      return this.apiClient.callApi(
        '/users/current/data_exports/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single user data export
     * Get the data exports of the authenticated user.
     * @param {Number} id Id of the data_export to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataExportResponse}
     */
    this.getCurrentUserDataExportbyId = function(id) {
      return this.getCurrentUserDataExportbyIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current users data exports
     * Get the data exports of the authenticated user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type type of data export, can be complete or measurements.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataExportsResponse} and HTTP response
     */
    this.getCurrentUserDataExportsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'type': opts['type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataExportsResponse;

      return this.apiClient.callApi(
        '/users/current/data_exports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get current users data exports
     * Get the data exports of the authenticated user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type type of data export, can be complete or measurements.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataExportsResponse}
     */
    this.getCurrentUserDataExports = function(opts) {
      return this.getCurrentUserDataExportsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current users data export zip file
     * Get the data export file of the authenticated user in the current context. Content-Transfer-Encoding header is set to binary.
     * @param {Number} id Id of the data_export to download
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getCurrentUserDataExportsFileWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCurrentUserDataExportsFile");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/current/data_exports/{id}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get current users data export zip file
     * Get the data export file of the authenticated user in the current context. Content-Transfer-Encoding header is set to binary.
     * @param {Number} id Id of the data_export to download
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getCurrentUserDataExportsFile = function(id) {
      return this.getCurrentUserDataExportsFileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get relevant notifications for the current authenticated user
     * Returns a list of all notifications available for the authenticated user on the current client application. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.startDatetime Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.startDatetimeFrom Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.startDatetimeTo Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.endDatetime Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.endDatetimeFrom Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.endDatetimeTo Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Notifications} and HTTP response
     */
    this.getCurrentUserNotificationsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'start_datetime': opts['startDatetime'],
        'start_datetime_from': opts['startDatetimeFrom'],
        'start_datetime_to': opts['startDatetimeTo'],
        'end_datetime': opts['endDatetime'],
        'end_datetime_from': opts['endDatetimeFrom'],
        'end_datetime_to': opts['endDatetimeTo'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Notifications;

      return this.apiClient.callApi(
        '/users/current/notifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get relevant notifications for the current authenticated user
     * Returns a list of all notifications available for the authenticated user on the current client application. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.startDatetime Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.startDatetimeFrom Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.startDatetimeTo Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.endDatetime Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.endDatetimeFrom Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.endDatetimeTo Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Notifications}
     */
    this.getCurrentUserNotifications = function(opts) {
      return this.getCurrentUserNotificationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get sign_ins of a user
     * Returns a list of all sign ins of a specific user identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#39;
     * @param {Number} userId Id of the user to fetch
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignInsResponse} and HTTP response
     */
    this.getSignInsOfUserWithHttpInfo = function(userId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getSignInsOfUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SignInsResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/sign_ins', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get sign_ins of a user
     * Returns a list of all sign ins of a specific user identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#39;
     * @param {Number} userId Id of the user to fetch
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignInsResponse}
     */
    this.getSignInsOfUser = function(userId, opts) {
      return this.getSignInsOfUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of a user
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} userId Id of the specified user
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    this.getSpecificationsOfUserWithHttpInfo = function(userId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getSpecificationsOfUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of a user
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Number} userId Id of the specified user
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Filter accepts &#39;*&#39; as wildcard
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    this.getSpecificationsOfUser = function(userId, opts) {
      return this.getSpecificationsOfUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of technical users
     * Returns a list of technical users. If the query has no matches, the response is an empty list. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.email Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TechnicalUsersResponse} and HTTP response
     */
    this.getTechnicalUsersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'email': opts['email'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TechnicalUsersResponse;

      return this.apiClient.callApi(
        '/technical_users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of technical users
     * Returns a list of technical users. If the query has no matches, the response is an empty list. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.email Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TechnicalUsersResponse}
     */
    this.getTechnicalUsers = function(opts) {
      return this.getTechnicalUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the use of storage and the number of assets registred of a user
     * Returns the storage and number of assets of a specific user identified by id in the url.&#39;
     * @param {Number} userId Id of the user to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsageResponse} and HTTP response
     */
    this.getUsageOfUserWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUsageOfUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsageResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/usage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the use of storage and the number of assets registred of a user
     * Returns the storage and number of assets of a specific user identified by id in the url.&#39;
     * @param {Number} userId Id of the user to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsageResponse}
     */
    this.getUsageOfUser = function(userId) {
      return this.getUsageOfUserWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single user
     * Get a specific user in your permission scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;
     * @param {Number} id Id of the user to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResponse} and HTTP response
     */
    this.getUserByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResponse;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single user
     * Get a specific user in your permission scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;
     * @param {Number} id Id of the user to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResponse}
     */
    this.getUserById = function(id, opts) {
      return this.getUserByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the user groups of one user
     * Returns a list of all usergroups of a specific user identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#39;
     * @param {Number} userId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserGroupsWithUsers} and HTTP response
     */
    this.getUserGroupsOfUserWithHttpInfo = function(userId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserGroupsOfUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserGroupsWithUsers;

      return this.apiClient.callApi(
        '/users/{user_id}/usergroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the user groups of one user
     * Returns a list of all usergroups of a specific user identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#39;
     * @param {Number} userId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserGroupsWithUsers}
     */
    this.getUserGroupsOfUser = function(userId, opts) {
      return this.getUserGroupsOfUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all user roles of one user
     * Returns a list of all user roles that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} userId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRolesResponse} and HTTP response
     */
    this.getUserRolesOfUserWithHttpInfo = function(userId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserRolesOfUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserRolesResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/userroles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all user roles of one user
     * Returns a list of all user roles that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} userId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRolesResponse}
     */
    this.getUserRolesOfUser = function(userId, opts) {
      return this.getUserRolesOfUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of users
     * Returns a list of users in your permission scope. If the query has no matches, the response is an empty list. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;. Specification filters and includes are only available for admin users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.email Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.firstName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.lastName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersResponse} and HTTP response
     */
    this.getUsersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'email': opts['email'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersResponse;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of users
     * Returns a list of users in your permission scope. If the query has no matches, the response is an empty list. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;. Specification filters and includes are only available for admin users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.email Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.firstName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.lastName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersResponse}
     */
    this.getUsers = function(opts) {
      return this.getUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Lookup user by email
     * Get a user for a given email adress.
     * @param {String} email email of the user to lookup.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserPublicResponse} and HTTP response
     */
    this.lookupUserWithHttpInfo = function(email) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling lookupUser");
      }


      var pathParams = {
      };
      var queryParams = {
        'email': email,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserPublicResponse;

      return this.apiClient.callApi(
        '/users/lookup', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Lookup user by email
     * Get a user for a given email adress.
     * @param {String} email email of the user to lookup.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserPublicResponse}
     */
    this.lookupUser = function(email) {
      return this.lookupUserWithHttpInfo(email)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * change password of current user
     * Change the password of the user if current password is valid
     * @param {module:model/PasswordChangeRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.passwordChangeWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling passwordChange");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/current/password', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * change password of current user
     * Change the password of the user if current password is valid
     * @param {module:model/PasswordChangeRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.passwordChange = function(body) {
      return this.passwordChangeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Register a new user
     * Creates a new, unconfirmed user. Will send out an email to the given email-address with a confirmation link. User created via this API can access the Netilion Hub API by sending their credentials in the Authorization Header with Basic Auth 
     * @param {module:model/UserRequest} body User object that needs to be registered
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResponse} and HTTP response
     */
    this.registerUserWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling registerUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResponse;

      return this.apiClient.callApi(
        '/register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Register a new user
     * Creates a new, unconfirmed user. Will send out an email to the given email-address with a confirmation link. User created via this API can access the Netilion Hub API by sending their credentials in the Authorization Header with Basic Auth 
     * @param {module:model/UserRequest} body User object that needs to be registered
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResponse}
     */
    this.registerUser = function(body) {
      return this.registerUserWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of a user
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeSpecificationsFromUsersWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeSpecificationsFromUsers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeSpecificationsFromUsers");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of a user
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsDelete} body Array of keys to delete from specifications
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeSpecificationsFromUsers = function(userId, body) {
      return this.removeSpecificationsFromUsersWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user groups from a user
     * Remove one or more user groups from a user identified by id in the url.
     * @param {Number} userId Id of the user from which the user groups will be removed
     * @param {module:model/UserGroupIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeUserGroupFromUserWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeUserGroupFromUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeUserGroupFromUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/usergroups', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove user groups from a user
     * Remove one or more user groups from a user identified by id in the url.
     * @param {Number} userId Id of the user from which the user groups will be removed
     * @param {module:model/UserGroupIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeUserGroupFromUser = function(userId, body) {
      return this.removeUserGroupFromUserWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user roles from a user
     * Remove one or more user roles from a user. To work with roles, admin role is required.
     * @param {Number} userId Id of the user from which the user roles will be removed
     * @param {module:model/UserRoleIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeUserRolesFromUserWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeUserRolesFromUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeUserRolesFromUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/userroles', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove user roles from a user
     * Remove one or more user roles from a user. To work with roles, admin role is required.
     * @param {Number} userId Id of the user from which the user roles will be removed
     * @param {module:model/UserRoleIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeUserRolesFromUser = function(userId, body) {
      return this.removeUserRolesFromUserWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of a user in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.renameSpecificationsOfUsersWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling renameSpecificationsOfUsers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renameSpecificationsOfUsers");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of a user in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsRename} body The specifications object to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.renameSpecificationsOfUsers = function(userId, body) {
      return this.renameSpecificationsOfUsersWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the user groups of a user
     * Replaces all user groups belonging to a user. You can send a list of resources that will replace all previous values.
     * @param {Number} userId Id of the user of which the user groups will be replaced
     * @param {module:model/UserGroupIDs} body Resources that shall be replaced.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceUserGroupsOfUserWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling replaceUserGroupsOfUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceUserGroupsOfUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/usergroups', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the user groups of a user
     * Replaces all user groups belonging to a user. You can send a list of resources that will replace all previous values.
     * @param {Number} userId Id of the user of which the user groups will be replaced
     * @param {module:model/UserGroupIDs} body Resources that shall be replaced.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceUserGroupsOfUser = function(userId, body) {
      return this.replaceUserGroupsOfUserWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the user roles of a user
     * Replaces all user roles belonging to a user. You can send a list of resources that will replace all previous values. To work with roles, admin role is required.
     * @param {Number} userId Id of the user of which the user roles will be replaced
     * @param {module:model/UserRoleIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceUserRolesOfUserWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling replaceUserRolesOfUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceUserRolesOfUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/userroles', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the user roles of a user
     * Replaces all user roles belonging to a user. You can send a list of resources that will replace all previous values. To work with roles, admin role is required.
     * @param {Number} userId Id of the user of which the user roles will be replaced
     * @param {module:model/UserRoleIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceUserRolesOfUser = function(userId, body) {
      return this.replaceUserRolesOfUserWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * request password reset instructions
     * Requests a password reset, instructions will be send by mail to user
     * @param {module:model/ResetTokenRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.requestPasswordResetWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling requestPasswordReset");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/request_password_reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * request password reset instructions
     * Requests a password reset, instructions will be send by mail to user
     * @param {module:model/ResetTokenRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.requestPasswordReset = function(body) {
      return this.requestPasswordResetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * reset password with token
     * reset a password of a user with a password_reset_token
     * @param {module:model/ResetPasswordRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.resetPasswordWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resetPassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/reset_password', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * reset password with token
     * reset a password of a user with a password_reset_token
     * @param {module:model/ResetPasswordRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.resetPassword = function(body) {
      return this.resetPasswordWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create a new password for a technical user
     *  Password is automatically generated an can not be defined. The generated password is part of the response (but cannot be later received again). 
     * @param {Number} id Id of the technical user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TechnicalUserPasswordResponse} and HTTP response
     */
    this.resetPasswordTechnicalUserWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetPasswordTechnicalUser");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TechnicalUserPasswordResponse;

      return this.apiClient.callApi(
        '/technical_users/{id}/reset_password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * create a new password for a technical user
     *  Password is automatically generated an can not be defined. The generated password is part of the response (but cannot be later received again). 
     * @param {Number} id Id of the technical user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TechnicalUserPasswordResponse}
     */
    this.resetPasswordTechnicalUser = function(id) {
      return this.resetPasswordTechnicalUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of a user
     * Update the specification object of a user in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSpecificationsOfUsersWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateSpecificationsOfUsers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSpecificationsOfUsers");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of a user
     * Update the specification object of a user in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @param {Number} userId Id of the specified user
     * @param {module:model/SpecificationsRequest} body The specifications objects to patch.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSpecificationsOfUsers = function(userId, body) {
      return this.updateSpecificationsOfUsersWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the user to update
     * @param {module:model/UserChangeRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUserWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUser");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a user
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the user to update
     * @param {module:model/UserChangeRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUser = function(id, body) {
      return this.updateUserWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
