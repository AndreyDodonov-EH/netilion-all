/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AccessRightsResponse from '../model/AccessRightsResponse';
import CurrentUserResponse from '../model/CurrentUserResponse';
import DataExportRequest from '../model/DataExportRequest';
import DataExportResponse from '../model/DataExportResponse';
import DataExportsResponse from '../model/DataExportsResponse';
import ErrorResponse from '../model/ErrorResponse';
import SignInsResponse from '../model/SignInsResponse';
import SpecificationRequest from '../model/SpecificationRequest';
import SpecificationsRename from '../model/SpecificationsRename';
import SpecificationsResponse from '../model/SpecificationsResponse';
import TechnicalUserCreateResponse from '../model/TechnicalUserCreateResponse';
import TechnicalUserPasswordResponse from '../model/TechnicalUserPasswordResponse';
import TechnicalUserRequest from '../model/TechnicalUserRequest';
import TechnicalUsersResponse from '../model/TechnicalUsersResponse';
import UsageResponse from '../model/UsageResponse';
import UserChangeRequest from '../model/UserChangeRequest';
import UserGroupIDs from '../model/UserGroupIDs';
import UserGroupsWithUsers from '../model/UserGroupsWithUsers';
import UserPublicResponse from '../model/UserPublicResponse';
import UserResponse from '../model/UserResponse';
import UserRoleIDs from '../model/UserRoleIDs';
import UserRolesResponse from '../model/UserRolesResponse';
import UsersResponse from '../model/UsersResponse';

/**
* User service.
* @module api/UserApi
* @version 01.00.00
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add user groups to a user
     * Add one or more user groups to a user identified by id in the url.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addUserGroupsToUserWithHttpInfo(body, userId) {
      let postBody = body;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/usergroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add user groups to a user
     * Add one or more user groups to a user identified by id in the url.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addUserGroupsToUser(body, userId) {
      return this.addUserGroupsToUserWithHttpInfo(body, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add user roles to a user
     * Add one or more user roles to a user. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addUserRolesToUserWithHttpInfo(body, userId) {
      let postBody = body;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/userroles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add user roles to a user
     * Add one or more user roles to a user. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addUserRolesToUser(body, userId) {
      return this.addUserRolesToUserWithHttpInfo(body, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create users data export for current user
     * create the data export of the authenticated user in the current context.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataExportResponse} and HTTP response
     */
    createCurrentUserDataExportWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataExportResponse;

      return this.apiClient.callApi(
        '/users/current/data_exports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * create users data export for current user
     * create the data export of the authenticated user in the current context.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataExportResponse}
     */
    createCurrentUserDataExport(body) {
      return this.createCurrentUserDataExportWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new technical user
     * Creates a new technical user. Password is automatically generated an can not be defined. The generated password is part of the response (but cannot be later received again) Technical users must not be confirmed via eMail link. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TechnicalUserCreateResponse} and HTTP response
     */
    createTechnicalUserWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TechnicalUserCreateResponse;

      return this.apiClient.callApi(
        '/technical_users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new technical user
     * Creates a new technical user. Password is automatically generated an can not be defined. The generated password is part of the response (but cannot be later received again) Technical users must not be confirmed via eMail link. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TechnicalUserCreateResponse}
     */
    createTechnicalUser(body) {
      return this.createTechnicalUserWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete users data export for current user
     * delete the data export of the authenticated user in the current context.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCurrentUserDatasExportWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/current/data_exports/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * delete users data export for current user
     * delete the data export of the authenticated user in the current context.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCurrentUserDatasExport(id) {
      return this.deleteCurrentUserDatasExportWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the given notification for the current user
     * Delete the given notification for the currently authenticated user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCurrentUserNotificationsWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/current/notifications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete the given notification for the current user
     * Delete the given notification for the currently authenticated user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCurrentUserNotifications(id) {
      return this.deleteCurrentUserNotificationsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a technical user
     * Delete a technical user identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTechnicalUserWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/technical_users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a technical user
     * Delete a technical user identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTechnicalUser(id) {
      return this.deleteTechnicalUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user
     * Delete a specific resource in your permission scope identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUserWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a user
     * Delete a specific resource in your permission scope identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUser(id) {
      return this.deleteUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current user
     * Get the user authenticated in the current context. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CurrentUserResponse} and HTTP response
     */
    getCurrentUserWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurrentUserResponse;

      return this.apiClient.callApi(
        '/users/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get current user
     * Get the user authenticated in the current context. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CurrentUserResponse}
     */
    getCurrentUser(opts) {
      return this.getCurrentUserWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current users access rights for a permitable
     * Get the access rights for a permitable of the authenticated user in the current context.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccessRightsResponse} and HTTP response
     */
    getCurrentUserAccessRightsWithHttpInfo(permitableId, permitableType) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'permitable_id': permitableId,
        'permitable_type': permitableType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessRightsResponse;

      return this.apiClient.callApi(
        '/users/current/access_rights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get current users access rights for a permitable
     * Get the access rights for a permitable of the authenticated user in the current context.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccessRightsResponse}
     */
    getCurrentUserAccessRights(permitableId, permitableType) {
      return this.getCurrentUserAccessRightsWithHttpInfo(permitableId, permitableType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single user data export
     * Get the data exports of the authenticated user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataExportResponse} and HTTP response
     */
    getCurrentUserDataExportbyIdWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataExportResponse;

      return this.apiClient.callApi(
        '/users/current/data_exports/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single user data export
     * Get the data exports of the authenticated user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataExportResponse}
     */
    getCurrentUserDataExportbyId(id) {
      return this.getCurrentUserDataExportbyIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current users data exports
     * Get the data exports of the authenticated user.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataExportsResponse} and HTTP response
     */
    getCurrentUserDataExportsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataExportsResponse;

      return this.apiClient.callApi(
        '/users/current/data_exports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get current users data exports
     * Get the data exports of the authenticated user.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataExportsResponse}
     */
    getCurrentUserDataExports(opts) {
      return this.getCurrentUserDataExportsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current users data export zip file
     * Get the data export file of the authenticated user in the current context. Content-Transfer-Encoding header is set to binary.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getCurrentUserDataExportsFileWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/current/data_exports/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get current users data export zip file
     * Get the data export file of the authenticated user in the current context. Content-Transfer-Encoding header is set to binary.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getCurrentUserDataExportsFile(id) {
      return this.getCurrentUserDataExportsFileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get relevant notifications for the current authenticated user
     * Returns a list of all notifications available for the authenticated user on the current client application. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCurrentUserNotificationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'start_datetime': opts['startDatetime'],
        'start_datetime_from': opts['startDatetimeFrom'],
        'start_datetime_to': opts['startDatetimeTo'],
        'end_datetime': opts['endDatetime'],
        'end_datetime_from': opts['endDatetimeFrom'],
        'end_datetime_to': opts['endDatetimeTo'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/users/current/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get relevant notifications for the current authenticated user
     * Returns a list of all notifications available for the authenticated user on the current client application. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCurrentUserNotifications(opts) {
      return this.getCurrentUserNotificationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get sign_ins of a user
     * Returns a list of all sign ins of a specific user identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignInsResponse} and HTTP response
     */
    getSignInsOfUserWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SignInsResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/sign_ins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get sign_ins of a user
     * Returns a list of all sign ins of a specific user identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignInsResponse}
     */
    getSignInsOfUser(userId, opts) {
      return this.getSignInsOfUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of a user
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    getSpecificationsOfUserWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of a user
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    getSpecificationsOfUser(userId, opts) {
      return this.getSpecificationsOfUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of technical users
     * Returns a list of technical users. If the query has no matches, the response is an empty list. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TechnicalUsersResponse} and HTTP response
     */
    getTechnicalUsersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'email': opts['email'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TechnicalUsersResponse;

      return this.apiClient.callApi(
        '/technical_users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of technical users
     * Returns a list of technical users. If the query has no matches, the response is an empty list. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TechnicalUsersResponse}
     */
    getTechnicalUsers(opts) {
      return this.getTechnicalUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the use of storage and the number of assets registred of a user
     * Returns the storage and number of assets of a specific user identified by id in the url.&#x27;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsageResponse} and HTTP response
     */
    getUsageOfUserWithHttpInfo(userId) {
      let postBody = null;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the use of storage and the number of assets registred of a user
     * Returns the storage and number of assets of a specific user identified by id in the url.&#x27;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsageResponse}
     */
    getUsageOfUser(userId) {
      return this.getUsageOfUserWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single user
     * Get a specific user in your permission scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResponse} and HTTP response
     */
    getUserByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponse;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single user
     * Get a specific user in your permission scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResponse}
     */
    getUserById(id, opts) {
      return this.getUserByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the user groups of one user
     * Returns a list of all usergroups of a specific user identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserGroupsWithUsers} and HTTP response
     */
    getUserGroupsOfUserWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserGroupsWithUsers;

      return this.apiClient.callApi(
        '/users/{user_id}/usergroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the user groups of one user
     * Returns a list of all usergroups of a specific user identified by id in the url. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserGroupsWithUsers}
     */
    getUserGroupsOfUser(userId, opts) {
      return this.getUserGroupsOfUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all user roles of one user
     * Returns a list of all user roles that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRolesResponse} and HTTP response
     */
    getUserRolesOfUserWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserRolesResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/userroles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all user roles of one user
     * Returns a list of all user roles that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRolesResponse}
     */
    getUserRolesOfUser(userId, opts) {
      return this.getUserRolesOfUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of users
     * Returns a list of users in your permission scope. If the query has no matches, the response is an empty list. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;. Specification filters and includes are only available for admin users
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersResponse} and HTTP response
     */
    getUsersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'email': opts['email'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersResponse;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of users
     * Returns a list of users in your permission scope. If the query has no matches, the response is an empty list. Possible include values: &#x60;&#x60;&#x60;userroles, usergroups, specifications, specifications[key1,key2]&#x60;&#x60;&#x60;. Specification filters and includes are only available for admin users
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersResponse}
     */
    getUsers(opts) {
      return this.getUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Lookup user by email
     * Get a user for a given email adress.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserPublicResponse} and HTTP response
     */
    lookupUserWithHttpInfo(email) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserPublicResponse;

      return this.apiClient.callApi(
        '/users/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Lookup user by email
     * Get a user for a given email adress.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserPublicResponse}
     */
    lookupUser(email) {
      return this.lookupUserWithHttpInfo(email)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of a user
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeSpecificationsFromUsersWithHttpInfo(body, userId) {
      let postBody = body;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of a user
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeSpecificationsFromUsers(body, userId) {
      return this.removeSpecificationsFromUsersWithHttpInfo(body, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user groups from a user
     * Remove one or more user groups from a user identified by id in the url.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeUserGroupFromUserWithHttpInfo(body, userId) {
      let postBody = body;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/usergroups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove user groups from a user
     * Remove one or more user groups from a user identified by id in the url.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeUserGroupFromUser(body, userId) {
      return this.removeUserGroupFromUserWithHttpInfo(body, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user roles from a user
     * Remove one or more user roles from a user. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeUserRolesFromUserWithHttpInfo(body, userId) {
      let postBody = body;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/userroles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove user roles from a user
     * Remove one or more user roles from a user. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeUserRolesFromUser(body, userId) {
      return this.removeUserRolesFromUserWithHttpInfo(body, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of a user in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    renameSpecificationsOfUsersWithHttpInfo(body, userId) {
      let postBody = body;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of a user in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    renameSpecificationsOfUsers(body, userId) {
      return this.renameSpecificationsOfUsersWithHttpInfo(body, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the user groups of a user
     * Replaces all user groups belonging to a user. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceUserGroupsOfUserWithHttpInfo(body, userId) {
      let postBody = body;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/usergroups', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the user groups of a user
     * Replaces all user groups belonging to a user. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceUserGroupsOfUser(body, userId) {
      return this.replaceUserGroupsOfUserWithHttpInfo(body, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the user roles of a user
     * Replaces all user roles belonging to a user. You can send a list of resources that will replace all previous values. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceUserRolesOfUserWithHttpInfo(body, userId) {
      let postBody = body;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/userroles', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the user roles of a user
     * Replaces all user roles belonging to a user. You can send a list of resources that will replace all previous values. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceUserRolesOfUser(body, userId) {
      return this.replaceUserRolesOfUserWithHttpInfo(body, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create a new password for a technical user
     *  Password is automatically generated an can not be defined. The generated password is part of the response (but cannot be later received again). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TechnicalUserPasswordResponse} and HTTP response
     */
    resetPasswordTechnicalUserWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TechnicalUserPasswordResponse;

      return this.apiClient.callApi(
        '/technical_users/{id}/reset_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * create a new password for a technical user
     *  Password is automatically generated an can not be defined. The generated password is part of the response (but cannot be later received again). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TechnicalUserPasswordResponse}
     */
    resetPasswordTechnicalUser(id) {
      return this.resetPasswordTechnicalUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of a user
     * Update the specification object of a user in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateSpecificationsOfUsersWithHttpInfo(body, userId) {
      let postBody = body;

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/specifications', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of a user
     * Update the specification object of a user in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateSpecificationsOfUsers(body, userId) {
      return this.updateSpecificationsOfUsersWithHttpInfo(body, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUserWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a user
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUser(body, id) {
      return this.updateUserWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
