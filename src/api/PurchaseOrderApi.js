/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DeliveriesResponse from '../model/DeliveriesResponse';
import DeliveryIDs from '../model/DeliveryIDs';
import DocumentIDs from '../model/DocumentIDs';
import DocumentsResponse from '../model/DocumentsResponse';
import ErrorResponse from '../model/ErrorResponse';
import ProductIDs from '../model/ProductIDs';
import ProductQuantity from '../model/ProductQuantity';
import ProductsResponse from '../model/ProductsResponse';
import PurchaseOrderRequest from '../model/PurchaseOrderRequest';
import PurchaseOrderResponse from '../model/PurchaseOrderResponse';
import PurchaseOrderStatusResponse from '../model/PurchaseOrderStatusResponse';
import PurchaseOrdersResponse from '../model/PurchaseOrdersResponse';

/**
* PurchaseOrder service.
* @module api/PurchaseOrderApi
* @version 01.00.00
*/
export default class PurchaseOrderApi {

    /**
    * Constructs a new PurchaseOrderApi. 
    * @alias module:api/PurchaseOrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add deliveries to a purchase order
     * Add one or more deliveries to a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDeliviersToPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/deliveries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add deliveries to a purchase order
     * Add one or more deliveries to a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDeliviersToPurchaseOrder(body, purchaseOrderId) {
      return this.addDeliviersToPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to a purchase order
     * Add one or more documents to a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDocumentsToPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a purchase order
     * Add one or more documents to a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDocumentsToPurchaseOrder(body, purchaseOrderId) {
      return this.addDocumentsToPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add products to a purchase order
     * Add one or more products to a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addProductsToPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add products to a purchase order
     * Add one or more products to a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addProductsToPurchaseOrder(body, purchaseOrderId) {
      return this.addProductsToPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new purchase order
     * Create a new purchase order with a sender and a receiver.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrderResponse} and HTTP response
     */
    createPurchaseOrderWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseOrderResponse;

      return this.apiClient.callApi(
        '/purchase_orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new purchase order
     * Create a new purchase order with a sender and a receiver.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrderResponse}
     */
    createPurchaseOrder(body) {
      return this.createPurchaseOrderWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a purchase order
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deletePurchaseOrderWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a purchase order
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deletePurchaseOrder(id) {
      return this.deletePurchaseOrderWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all deliveries of one purchase order
     * Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveriesResponse} and HTTP response
     */
    getDeliviersOfPurchaseOrderWithHttpInfo(purchaseOrderId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'number': opts['_number'],
        'name': opts['name'],
        'date_of_shipment': opts['dateOfShipment'],
        'date_of_shipment_from': opts['dateOfShipmentFrom'],
        'date_of_shipment_to': opts['dateOfShipmentTo'],
        'status_id': opts['statusId'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeliveriesResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/deliveries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all deliveries of one purchase order
     * Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveriesResponse}
     */
    getDeliviersOfPurchaseOrder(purchaseOrderId, opts) {
      return this.getDeliviersOfPurchaseOrderWithHttpInfo(purchaseOrderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of one purchase order
     * Returns a list of documents. If the query has no matches, the response is an empty list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    getDocumentsOfPurchaseOrderWithHttpInfo(purchaseOrderId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'valid_from': opts['validFrom'],
        'valid_until': opts['validUntil'],
        'valid_at': opts['validAt'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of one purchase order
     * Returns a list of documents. If the query has no matches, the response is an empty list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    getDocumentsOfPurchaseOrder(purchaseOrderId, opts) {
      return this.getDocumentsOfPurchaseOrderWithHttpInfo(purchaseOrderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all products of one purchase
     * Returns a list of all products that are available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductsResponse} and HTTP response
     */
    getProductsOfPurchaseOrderWithHttpInfo(purchaseOrderId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'product_code': opts['productCode'],
        'name': opts['name'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductsResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all products of one purchase
     * Returns a list of all products that are available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductsResponse}
     */
    getProductsOfPurchaseOrder(purchaseOrderId, opts) {
      return this.getProductsOfPurchaseOrderWithHttpInfo(purchaseOrderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single purchase order
     * Get a specific purchase order identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrderResponse} and HTTP response
     */
    getPurchaseOrderByIdWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PurchaseOrderResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single purchase order
     * Get a specific purchase order identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrderResponse}
     */
    getPurchaseOrderById(id) {
      return this.getPurchaseOrderByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific purchase order
     * Returns the status of the purchase order. Needed if only permission on purchase order but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrderStatusResponse} and HTTP response
     */
    getPurchaseOrderIdStatusWithHttpInfo(purchaseOrderId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PurchaseOrderStatusResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific purchase order
     * Returns the status of the purchase order. Needed if only permission on purchase order but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrderStatusResponse}
     */
    getPurchaseOrderIdStatus(purchaseOrderId, opts) {
      return this.getPurchaseOrderIdStatusWithHttpInfo(purchaseOrderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of purchase orders
     * Returns a list of purchase orders. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrdersResponse} and HTTP response
     */
    getPurchaseOrdersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'quotation_id': opts['quotationId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PurchaseOrdersResponse;

      return this.apiClient.callApi(
        '/purchase_orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of purchase orders
     * Returns a list of purchase orders. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrdersResponse}
     */
    getPurchaseOrders(opts) {
      return this.getPurchaseOrdersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove deliveries from a purchase order
     * Remove one or more deliveries from a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDeliviersFromPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/deliveries', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove deliveries from a purchase order
     * Remove one or more deliveries from a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDeliviersFromPurchaseOrder(body, purchaseOrderId) {
      return this.removeDeliviersFromPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a purchase order
     * Remove one or more documents from a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDocumentsFromPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a purchase order
     * Remove one or more documents from a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDocumentsFromPurchaseOrder(body, purchaseOrderId) {
      return this.removeDocumentsFromPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove products from a purchase order
     * Remove one or more products from a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeProductsFromPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove products from a purchase order
     * Remove one or more products from a purchase order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeProductsFromPurchaseOrder(body, purchaseOrderId) {
      return this.removeProductsFromPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the deliveries of a purchase order
     * Replaces all deliveries belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceDeliviersOfPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/deliveries', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the deliveries of a purchase order
     * Replaces all deliveries belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceDeliviersOfPurchaseOrder(body, purchaseOrderId) {
      return this.replaceDeliviersOfPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a purchase order
     * Replaces all documents belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceDocumentsOfPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/documents', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a purchase order
     * Replaces all documents belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceDocumentsOfPurchaseOrder(body, purchaseOrderId) {
      return this.replaceDocumentsOfPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the products of a purchase order
     * Replaces all products belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceProductsOfPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the products of a purchase order
     * Replaces all products belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceProductsOfPurchaseOrder(body, purchaseOrderId) {
      return this.replaceProductsOfPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change the product quantity in a purchase order
     * Sets a new quantity of a product in a purchase order or deletes the line in case quantity is zero.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateProductQuantitiesOfPurchaseOrderWithHttpInfo(body, purchaseOrderId) {
      let postBody = body;

      let pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products/quantity', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change the product quantity in a purchase order
     * Sets a new quantity of a product in a purchase order or deletes the line in case quantity is zero.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateProductQuantitiesOfPurchaseOrder(body, purchaseOrderId) {
      return this.updateProductQuantitiesOfPurchaseOrderWithHttpInfo(body, purchaseOrderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a purchase order
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updatePurchaseOrderWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a purchase order
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updatePurchaseOrder(body, id) {
      return this.updatePurchaseOrderWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
