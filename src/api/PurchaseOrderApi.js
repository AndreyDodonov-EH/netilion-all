/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeliveriesResponse', 'model/DeliveryIDs', 'model/DocumentIDs', 'model/DocumentsResponse', 'model/ErrorResponse', 'model/ProductIDs', 'model/ProductQuantity', 'model/ProductsResponse', 'model/PurchaseOrderRequest', 'model/PurchaseOrderResponse', 'model/PurchaseOrderStatusResponse', 'model/PurchaseOrdersResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeliveriesResponse'), require('../model/DeliveryIDs'), require('../model/DocumentIDs'), require('../model/DocumentsResponse'), require('../model/ErrorResponse'), require('../model/ProductIDs'), require('../model/ProductQuantity'), require('../model/ProductsResponse'), require('../model/PurchaseOrderRequest'), require('../model/PurchaseOrderResponse'), require('../model/PurchaseOrderStatusResponse'), require('../model/PurchaseOrdersResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.PurchaseOrderApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.DeliveriesResponse, root.NetilionApiDocumentation.DeliveryIDs, root.NetilionApiDocumentation.DocumentIDs, root.NetilionApiDocumentation.DocumentsResponse, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.ProductIDs, root.NetilionApiDocumentation.ProductQuantity, root.NetilionApiDocumentation.ProductsResponse, root.NetilionApiDocumentation.PurchaseOrderRequest, root.NetilionApiDocumentation.PurchaseOrderResponse, root.NetilionApiDocumentation.PurchaseOrderStatusResponse, root.NetilionApiDocumentation.PurchaseOrdersResponse);
  }
}(this, function(ApiClient, DeliveriesResponse, DeliveryIDs, DocumentIDs, DocumentsResponse, ErrorResponse, ProductIDs, ProductQuantity, ProductsResponse, PurchaseOrderRequest, PurchaseOrderResponse, PurchaseOrderStatusResponse, PurchaseOrdersResponse) {
  'use strict';

  /**
   * PurchaseOrder service.
   * @module api/PurchaseOrderApi
   * @version 01.00.00
   */

  /**
   * Constructs a new PurchaseOrderApi. 
   * @alias module:api/PurchaseOrderApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add deliveries to a purchase order
     * Add one or more deliveries to a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order to which the deliveries will be added
     * @param {module:model/DeliveryIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addDeliviersToPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling addDeliviersToPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDeliviersToPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/deliveries', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add deliveries to a purchase order
     * Add one or more deliveries to a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order to which the deliveries will be added
     * @param {module:model/DeliveryIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addDeliviersToPurchaseOrder = function(purchaseOrderId, body) {
      return this.addDeliviersToPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to a purchase order
     * Add one or more documents to a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addDocumentsToPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling addDocumentsToPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDocumentsToPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a purchase order
     * Add one or more documents to a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addDocumentsToPurchaseOrder = function(purchaseOrderId, body) {
      return this.addDocumentsToPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add products to a purchase order
     * Add one or more products to a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order to which the products will be added
     * @param {module:model/ProductIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addProductsToPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling addProductsToPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addProductsToPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add products to a purchase order
     * Add one or more products to a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order to which the products will be added
     * @param {module:model/ProductIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addProductsToPurchaseOrder = function(purchaseOrderId, body) {
      return this.addProductsToPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new purchase order
     * Create a new purchase order with a sender and a receiver.
     * @param {module:model/PurchaseOrderRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrderResponse} and HTTP response
     */
    this.createPurchaseOrderWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPurchaseOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseOrderResponse;

      return this.apiClient.callApi(
        '/purchase_orders', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new purchase order
     * Create a new purchase order with a sender and a receiver.
     * @param {module:model/PurchaseOrderRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrderResponse}
     */
    this.createPurchaseOrder = function(body) {
      return this.createPurchaseOrderWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a purchase order
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the purchase order to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deletePurchaseOrderWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePurchaseOrder");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a purchase order
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the purchase order to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deletePurchaseOrder = function(id) {
      return this.deletePurchaseOrderWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all deliveries of one purchase order
     * Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} purchaseOrderId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {Date} opts.dateOfShipment Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentTo Expected date format is YYYY-MM-DD
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveriesResponse} and HTTP response
     */
    this.getDeliviersOfPurchaseOrderWithHttpInfo = function(purchaseOrderId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling getDeliviersOfPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'number': opts['_number'],
        'name': opts['name'],
        'date_of_shipment': opts['dateOfShipment'],
        'date_of_shipment_from': opts['dateOfShipmentFrom'],
        'date_of_shipment_to': opts['dateOfShipmentTo'],
        'status_id': opts['statusId'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeliveriesResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/deliveries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all deliveries of one purchase order
     * Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} purchaseOrderId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {Date} opts.dateOfShipment Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentTo Expected date format is YYYY-MM-DD
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveriesResponse}
     */
    this.getDeliviersOfPurchaseOrder = function(purchaseOrderId, opts) {
      return this.getDeliviersOfPurchaseOrderWithHttpInfo(purchaseOrderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of one purchase order
     * Returns a list of documents. If the query has no matches, the response is an empty list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} purchaseOrderId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    this.getDocumentsOfPurchaseOrderWithHttpInfo = function(purchaseOrderId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling getDocumentsOfPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of one purchase order
     * Returns a list of documents. If the query has no matches, the response is an empty list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} purchaseOrderId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    this.getDocumentsOfPurchaseOrder = function(purchaseOrderId, opts) {
      return this.getDocumentsOfPurchaseOrderWithHttpInfo(purchaseOrderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all products of one purchase
     * Returns a list of all products that are available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
     * @param {Number} purchaseOrderId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.productCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.manufacturerId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductsResponse} and HTTP response
     */
    this.getProductsOfPurchaseOrderWithHttpInfo = function(purchaseOrderId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling getProductsOfPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'product_code': opts['productCode'],
        'name': opts['name'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductsResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all products of one purchase
     * Returns a list of all products that are available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
     * @param {Number} purchaseOrderId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.productCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.manufacturerId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductsResponse}
     */
    this.getProductsOfPurchaseOrder = function(purchaseOrderId, opts) {
      return this.getProductsOfPurchaseOrderWithHttpInfo(purchaseOrderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single purchase order
     * Get a specific purchase order identified by the id in the URL.
     * @param {Number} id Id of the purchase order to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrderResponse} and HTTP response
     */
    this.getPurchaseOrderByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPurchaseOrderById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseOrderResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single purchase order
     * Get a specific purchase order identified by the id in the URL.
     * @param {Number} id Id of the purchase order to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrderResponse}
     */
    this.getPurchaseOrderById = function(id) {
      return this.getPurchaseOrderByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific purchase order
     * Returns the status of the purchase order. Needed if only permission on purchase order but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Number} purchaseOrderId Id of the specified purchase order
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrderStatusResponse} and HTTP response
     */
    this.getPurchaseOrderIdStatusWithHttpInfo = function(purchaseOrderId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling getPurchaseOrderIdStatus");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseOrderStatusResponse;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific purchase order
     * Returns the status of the purchase order. Needed if only permission on purchase order but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Number} purchaseOrderId Id of the specified purchase order
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrderStatusResponse}
     */
    this.getPurchaseOrderIdStatus = function(purchaseOrderId, opts) {
      return this.getPurchaseOrderIdStatusWithHttpInfo(purchaseOrderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of purchase orders
     * Returns a list of purchase orders. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.quotationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseOrdersResponse} and HTTP response
     */
    this.getPurchaseOrdersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'quotation_id': opts['quotationId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseOrdersResponse;

      return this.apiClient.callApi(
        '/purchase_orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of purchase orders
     * Returns a list of purchase orders. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.quotationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseOrdersResponse}
     */
    this.getPurchaseOrders = function(opts) {
      return this.getPurchaseOrdersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove deliveries from a purchase order
     * Remove one or more deliveries from a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order from which the deliveries will be removed
     * @param {module:model/DeliveryIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeDeliviersFromPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling removeDeliviersFromPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeDeliviersFromPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/deliveries', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove deliveries from a purchase order
     * Remove one or more deliveries from a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order from which the deliveries will be removed
     * @param {module:model/DeliveryIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeDeliviersFromPurchaseOrder = function(purchaseOrderId, body) {
      return this.removeDeliviersFromPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a purchase order
     * Remove one or more documents from a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeDocumentsFromPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling removeDocumentsFromPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeDocumentsFromPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/documents', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a purchase order
     * Remove one or more documents from a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeDocumentsFromPurchaseOrder = function(purchaseOrderId, body) {
      return this.removeDocumentsFromPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove products from a purchase order
     * Remove one or more products from a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order from which the products will be removed
     * @param {module:model/ProductIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeProductsFromPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling removeProductsFromPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeProductsFromPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove products from a purchase order
     * Remove one or more products from a purchase order.
     * @param {Number} purchaseOrderId Id of the purchase order from which the products will be removed
     * @param {module:model/ProductIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeProductsFromPurchaseOrder = function(purchaseOrderId, body) {
      return this.removeProductsFromPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the deliveries of a purchase order
     * Replaces all deliveries belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @param {Number} purchaseOrderId Id of the purchase order of which the deliveries will be replaced
     * @param {module:model/DeliveryIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceDeliviersOfPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling replaceDeliviersOfPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceDeliviersOfPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/deliveries', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the deliveries of a purchase order
     * Replaces all deliveries belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @param {Number} purchaseOrderId Id of the purchase order of which the deliveries will be replaced
     * @param {module:model/DeliveryIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceDeliviersOfPurchaseOrder = function(purchaseOrderId, body) {
      return this.replaceDeliviersOfPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a purchase order
     * Replaces all documents belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @param {Number} purchaseOrderId Id of the purchase order of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceDocumentsOfPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling replaceDocumentsOfPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceDocumentsOfPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/documents', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a purchase order
     * Replaces all documents belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @param {Number} purchaseOrderId Id of the purchase order of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceDocumentsOfPurchaseOrder = function(purchaseOrderId, body) {
      return this.replaceDocumentsOfPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the products of a purchase order
     * Replaces all products belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @param {Number} purchaseOrderId Id of the purchase order of which the products will be replaced
     * @param {module:model/ProductIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceProductsOfPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling replaceProductsOfPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceProductsOfPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the products of a purchase order
     * Replaces all products belonging to a purchase order. You can send a list of resources that will replace all previous values.
     * @param {Number} purchaseOrderId Id of the purchase order of which the products will be replaced
     * @param {module:model/ProductIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceProductsOfPurchaseOrder = function(purchaseOrderId, body) {
      return this.replaceProductsOfPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change the product quantity in a purchase order
     * Sets a new quantity of a product in a purchase order or deletes the line in case quantity is zero.
     * @param {Number} purchaseOrderId Id of the purchase order of which the change will be done
     * @param {module:model/ProductQuantity} body Resources that shall be changed or removed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateProductQuantitiesOfPurchaseOrderWithHttpInfo = function(purchaseOrderId, body) {
      var postBody = body;

      // verify the required parameter 'purchaseOrderId' is set
      if (purchaseOrderId === undefined || purchaseOrderId === null) {
        throw new Error("Missing the required parameter 'purchaseOrderId' when calling updateProductQuantitiesOfPurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProductQuantitiesOfPurchaseOrder");
      }


      var pathParams = {
        'purchase_order_id': purchaseOrderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{purchase_order_id}/products/quantity', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change the product quantity in a purchase order
     * Sets a new quantity of a product in a purchase order or deletes the line in case quantity is zero.
     * @param {Number} purchaseOrderId Id of the purchase order of which the change will be done
     * @param {module:model/ProductQuantity} body Resources that shall be changed or removed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateProductQuantitiesOfPurchaseOrder = function(purchaseOrderId, body) {
      return this.updateProductQuantitiesOfPurchaseOrderWithHttpInfo(purchaseOrderId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a purchase order
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the purchase order to update
     * @param {module:model/PurchaseOrderRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updatePurchaseOrderWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePurchaseOrder");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePurchaseOrder");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/purchase_orders/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a purchase order
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the purchase order to update
     * @param {module:model/PurchaseOrderRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updatePurchaseOrder = function(id, body) {
      return this.updatePurchaseOrderWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
