/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import UserIDs from '../model/UserIDs';
import UserRoleRequest from '../model/UserRoleRequest';
import UserRoleResponse from '../model/UserRoleResponse';
import UserRolesResponse from '../model/UserRolesResponse';
import UsersPublicResponse from '../model/UsersPublicResponse';

/**
* UserRole service.
* @module api/UserRoleApi
* @version 01.00.00
*/
export default class UserRoleApi {

    /**
    * Constructs a new UserRoleApi. 
    * @alias module:api/UserRoleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add users to a user role
     * Add one or more users to a user role. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addUsersToUserRoleWithHttpInfo(body, userroleId) {
      let postBody = body;

      let pathParams = {
        'userrole_id': userroleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/userroles/{userrole_id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add users to a user role
     * Add one or more users to a user role. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addUsersToUserRole(body, userroleId) {
      return this.addUsersToUserRoleWithHttpInfo(body, userroleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new user role
     * A user role can have many users and users can belong to several roles. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRoleResponse} and HTTP response
     */
    createUserRoleWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserRoleResponse;

      return this.apiClient.callApi(
        '/userroles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new user role
     * A user role can have many users and users can belong to several roles. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRoleResponse}
     */
    createUserRole(body) {
      return this.createUserRoleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user role
     * Delete a specific resource identified by the id in the URL. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUserRoleWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/userroles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a user role
     * Delete a specific resource identified by the id in the URL. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUserRole(id) {
      return this.deleteUserRoleWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove users from a user role
     * Remove one or more users from an user role. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUsersFromUserRoleWithHttpInfo(body, userroleId) {
      let postBody = body;

      let pathParams = {
        'userrole_id': userroleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/userroles/{userrole_id}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove users from a user role
     * Remove one or more users from an user role. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUsersFromUserRole(body, userroleId) {
      return this.deleteUsersFromUserRoleWithHttpInfo(body, userroleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single user role
     * Get a specific user role identified by the id in the URL. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRoleResponse} and HTTP response
     */
    getUserRoleByIdWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserRoleResponse;

      return this.apiClient.callApi(
        '/userroles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single user role
     * Get a specific user role identified by the id in the URL. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRoleResponse}
     */
    getUserRoleById(id) {
      return this.getUserRoleByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of user roles
     * Returns a list of all user roles that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27; To work with roles, admin role is required.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRolesResponse} and HTTP response
     */
    getUserRolesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserRolesResponse;

      return this.apiClient.callApi(
        '/userroles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of user roles
     * Returns a list of all user roles that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27; To work with roles, admin role is required.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRolesResponse}
     */
    getUserRoles(opts) {
      return this.getUserRolesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all users of one user role. To work with roles, admin role is required.
     * Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersPublicResponse} and HTTP response
     */
    getUsersOfUserRoleWithHttpInfo(userroleId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'userrole_id': userroleId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPublicResponse;

      return this.apiClient.callApi(
        '/userroles/{userrole_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all users of one user role. To work with roles, admin role is required.
     * Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersPublicResponse}
     */
    getUsersOfUserRole(userroleId, opts) {
      return this.getUsersOfUserRoleWithHttpInfo(userroleId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the users of a user role
     * Replaces all users belonging to an user role. You can send a list of resources that will replace all previous values. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceUsersOfUserRoleWithHttpInfo(body, userroleId) {
      let postBody = body;

      let pathParams = {
        'userrole_id': userroleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/userroles/{userrole_id}/users', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the users of a user role
     * Replaces all users belonging to an user role. You can send a list of resources that will replace all previous values. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceUsersOfUserRole(body, userroleId) {
      return this.replaceUsersOfUserRoleWithHttpInfo(body, userroleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user role
     * Update accessible parameters of the requested resource. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateUserRoleWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/userroles/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a user role
     * Update accessible parameters of the requested resource. To work with roles, admin role is required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateUserRole(body, id) {
      return this.updateUserRoleWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
