/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/UserIDs', 'model/UserRoleRequest', 'model/UserRoleResponse', 'model/UserRolesResponse', 'model/UsersPublicResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/UserIDs'), require('../model/UserRoleRequest'), require('../model/UserRoleResponse'), require('../model/UserRolesResponse'), require('../model/UsersPublicResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.UserRoleApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.UserIDs, root.NetilionApiDocumentation.UserRoleRequest, root.NetilionApiDocumentation.UserRoleResponse, root.NetilionApiDocumentation.UserRolesResponse, root.NetilionApiDocumentation.UsersPublicResponse);
  }
}(this, function(ApiClient, ErrorResponse, UserIDs, UserRoleRequest, UserRoleResponse, UserRolesResponse, UsersPublicResponse) {
  'use strict';

  /**
   * UserRole service.
   * @module api/UserRoleApi
   * @version 01.00.00
   */

  /**
   * Constructs a new UserRoleApi. 
   * @alias module:api/UserRoleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add users to a user role
     * Add one or more users to a user role. To work with roles, admin role is required.
     * @param {Number} userroleId Id of the user role to which the users will be added
     * @param {module:model/UserIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addUsersToUserRoleWithHttpInfo = function(userroleId, body) {
      var postBody = body;

      // verify the required parameter 'userroleId' is set
      if (userroleId === undefined || userroleId === null) {
        throw new Error("Missing the required parameter 'userroleId' when calling addUsersToUserRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addUsersToUserRole");
      }


      var pathParams = {
        'userrole_id': userroleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userroles/{userrole_id}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add users to a user role
     * Add one or more users to a user role. To work with roles, admin role is required.
     * @param {Number} userroleId Id of the user role to which the users will be added
     * @param {module:model/UserIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addUsersToUserRole = function(userroleId, body) {
      return this.addUsersToUserRoleWithHttpInfo(userroleId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new user role
     * A user role can have many users and users can belong to several roles. To work with roles, admin role is required.
     * @param {module:model/UserRoleRequest} body User role to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRoleResponse} and HTTP response
     */
    this.createUserRoleWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUserRole");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserRoleResponse;

      return this.apiClient.callApi(
        '/userroles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new user role
     * A user role can have many users and users can belong to several roles. To work with roles, admin role is required.
     * @param {module:model/UserRoleRequest} body User role to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRoleResponse}
     */
    this.createUserRole = function(body) {
      return this.createUserRoleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user role
     * Delete a specific resource identified by the id in the URL. To work with roles, admin role is required.
     * @param {Number} id Id of the user role to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteUserRoleWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserRole");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userroles/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a user role
     * Delete a specific resource identified by the id in the URL. To work with roles, admin role is required.
     * @param {Number} id Id of the user role to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteUserRole = function(id) {
      return this.deleteUserRoleWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove users from a user role
     * Remove one or more users from an user role. To work with roles, admin role is required.
     * @param {Number} userroleId Id of the user role from which the users will be removed
     * @param {module:model/UserIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteUsersFromUserRoleWithHttpInfo = function(userroleId, body) {
      var postBody = body;

      // verify the required parameter 'userroleId' is set
      if (userroleId === undefined || userroleId === null) {
        throw new Error("Missing the required parameter 'userroleId' when calling deleteUsersFromUserRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteUsersFromUserRole");
      }


      var pathParams = {
        'userrole_id': userroleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userroles/{userrole_id}/users', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove users from a user role
     * Remove one or more users from an user role. To work with roles, admin role is required.
     * @param {Number} userroleId Id of the user role from which the users will be removed
     * @param {module:model/UserIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteUsersFromUserRole = function(userroleId, body) {
      return this.deleteUsersFromUserRoleWithHttpInfo(userroleId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single user role
     * Get a specific user role identified by the id in the URL. To work with roles, admin role is required.
     * @param {Number} id Id of the user role to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRoleResponse} and HTTP response
     */
    this.getUserRoleByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserRoleById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserRoleResponse;

      return this.apiClient.callApi(
        '/userroles/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single user role
     * Get a specific user role identified by the id in the URL. To work with roles, admin role is required.
     * @param {Number} id Id of the user role to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRoleResponse}
     */
    this.getUserRoleById = function(id) {
      return this.getUserRoleByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of user roles
     * Returns a list of all user roles that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#39; To work with roles, admin role is required.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRolesResponse} and HTTP response
     */
    this.getUserRolesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserRolesResponse;

      return this.apiClient.callApi(
        '/userroles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of user roles
     * Returns a list of all user roles that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#39; To work with roles, admin role is required.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRolesResponse}
     */
    this.getUserRoles = function(opts) {
      return this.getUserRolesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all users of one user role. To work with roles, admin role is required.
     * Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} userroleId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.firstName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.lastName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersPublicResponse} and HTTP response
     */
    this.getUsersOfUserRoleWithHttpInfo = function(userroleId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userroleId' is set
      if (userroleId === undefined || userroleId === null) {
        throw new Error("Missing the required parameter 'userroleId' when calling getUsersOfUserRole");
      }


      var pathParams = {
        'userrole_id': userroleId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersPublicResponse;

      return this.apiClient.callApi(
        '/userroles/{userrole_id}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all users of one user role. To work with roles, admin role is required.
     * Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} userroleId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.firstName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.lastName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersPublicResponse}
     */
    this.getUsersOfUserRole = function(userroleId, opts) {
      return this.getUsersOfUserRoleWithHttpInfo(userroleId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the users of a user role
     * Replaces all users belonging to an user role. You can send a list of resources that will replace all previous values. To work with roles, admin role is required.
     * @param {Number} userroleId Id of the user role of which the users will be replaced
     * @param {module:model/UserIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceUsersOfUserRoleWithHttpInfo = function(userroleId, body) {
      var postBody = body;

      // verify the required parameter 'userroleId' is set
      if (userroleId === undefined || userroleId === null) {
        throw new Error("Missing the required parameter 'userroleId' when calling replaceUsersOfUserRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceUsersOfUserRole");
      }


      var pathParams = {
        'userrole_id': userroleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userroles/{userrole_id}/users', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the users of a user role
     * Replaces all users belonging to an user role. You can send a list of resources that will replace all previous values. To work with roles, admin role is required.
     * @param {Number} userroleId Id of the user role of which the users will be replaced
     * @param {module:model/UserIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceUsersOfUserRole = function(userroleId, body) {
      return this.replaceUsersOfUserRoleWithHttpInfo(userroleId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user role
     * Update accessible parameters of the requested resource. To work with roles, admin role is required.
     * @param {Number} id Id of the user role to update
     * @param {module:model/UserRoleRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUserRoleWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUserRole");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/userroles/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a user role
     * Update accessible parameters of the requested resource. To work with roles, admin role is required.
     * @param {Number} id Id of the user role to update
     * @param {module:model/UserRoleRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUserRole = function(id, body) {
      return this.updateUserRoleWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
