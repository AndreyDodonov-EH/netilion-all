/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Companies', 'model/Companies1', 'model/CompanyRequest', 'model/CompanyResponse', 'model/DeliveriesResponse', 'model/ErrorResponse', 'model/ProductsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Companies'), require('../model/Companies1'), require('../model/CompanyRequest'), require('../model/CompanyResponse'), require('../model/DeliveriesResponse'), require('../model/ErrorResponse'), require('../model/ProductsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.CompanyApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.Companies, root.NetilionApiDocumentation.Companies1, root.NetilionApiDocumentation.CompanyRequest, root.NetilionApiDocumentation.CompanyResponse, root.NetilionApiDocumentation.DeliveriesResponse, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.ProductsResponse);
  }
}(this, function(ApiClient, Companies, Companies1, CompanyRequest, CompanyResponse, DeliveriesResponse, ErrorResponse, ProductsResponse) {
  'use strict';

  /**
   * Company service.
   * @module api/CompanyApi
   * @version 01.00.00
   */

  /**
   * Constructs a new CompanyApi. 
   * @alias module:api/CompanyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new company
     * A company can be manufacturer of products, or can have other roles. Every company has by default an &#39;unknown product&#39; which is returned in the response together with the new company that was created. It serves to connect assets to the manufacturer in case no further product information is available.
     * @param {module:model/CompanyRequest} body Company to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompanyResponse} and HTTP response
     */
    this.createCompanyWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCompany");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CompanyResponse;

      return this.apiClient.callApi(
        '/companies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new company
     * A company can be manufacturer of products, or can have other roles. Every company has by default an &#39;unknown product&#39; which is returned in the response together with the new company that was created. It serves to connect assets to the manufacturer in case no further product information is available.
     * @param {module:model/CompanyRequest} body Company to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompanyResponse}
     */
    this.createCompany = function(body) {
      return this.createCompanyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a company
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the company to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCompanyWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCompany");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/companies/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a company
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the company to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCompany = function(id) {
      return this.deleteCompanyWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible companies of the specified assets
     * Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Number} assetId Id of the specified asset
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Companies} and HTTP response
     */
    this.getAssetCompanyOptionsWithHttpInfo = function(assetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getAssetCompanyOptions");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Companies;

      return this.apiClient.callApi(
        '/assets/{asset_id}/company-options', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible companies of the specified assets
     * Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Number} assetId Id of the specified asset
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Companies}
     */
    this.getAssetCompanyOptions = function(assetId, opts) {
      return this.getAssetCompanyOptionsWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of companies
     * Returns a list of all companies that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Companies1} and HTTP response
     */
    this.getCompaniesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Companies1;

      return this.apiClient.callApi(
        '/companies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of companies
     * Returns a list of all companies that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Companies1}
     */
    this.getCompanies = function(opts) {
      return this.getCompaniesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single company
     * Get a specific company identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Number} id Id of the company to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompanyResponse} and HTTP response
     */
    this.getCompanyByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCompanyById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CompanyResponse;

      return this.apiClient.callApi(
        '/companies/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single company
     * Get a specific company identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Number} id Id of the company to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompanyResponse}
     */
    this.getCompanyById = function(id, opts) {
      return this.getCompanyByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all deliveries received of one company
     * Returns a list of all deliveries received that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} companyId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {Date} opts.dateOfShipment Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveriesResponse} and HTTP response
     */
    this.getDeliveriesReceivedOfCompanyWithHttpInfo = function(companyId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getDeliveriesReceivedOfCompany");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'number': opts['_number'],
        'name': opts['name'],
        'status_id': opts['statusId'],
        'date_of_shipment': opts['dateOfShipment'],
        'date_of_shipment_from': opts['dateOfShipmentFrom'],
        'date_of_shipment_to': opts['dateOfShipmentTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeliveriesResponse;

      return this.apiClient.callApi(
        '/companies/{company_id}/deliveries_received', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all deliveries received of one company
     * Returns a list of all deliveries received that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} companyId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {Date} opts.dateOfShipment Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveriesResponse}
     */
    this.getDeliveriesReceivedOfCompany = function(companyId, opts) {
      return this.getDeliveriesReceivedOfCompanyWithHttpInfo(companyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all deliveries sent of one company
     * Returns a list of all sent deliveries sent that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} companyId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {Date} opts.dateOfShipment Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveriesResponse} and HTTP response
     */
    this.getDeliveriesSentOfCompanyWithHttpInfo = function(companyId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getDeliveriesSentOfCompany");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'number': opts['_number'],
        'name': opts['name'],
        'status_id': opts['statusId'],
        'date_of_shipment': opts['dateOfShipment'],
        'date_of_shipment_from': opts['dateOfShipmentFrom'],
        'date_of_shipment_to': opts['dateOfShipmentTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeliveriesResponse;

      return this.apiClient.callApi(
        '/companies/{company_id}/deliveries_sent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all deliveries sent of one company
     * Returns a list of all sent deliveries sent that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} companyId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {Date} opts.dateOfShipment Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.dateOfShipmentTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveriesResponse}
     */
    this.getDeliveriesSentOfCompany = function(companyId, opts) {
      return this.getDeliveriesSentOfCompanyWithHttpInfo(companyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all products of a company
     * Receive a list of products of a specific company, identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translations set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
     * @param {Number} companyId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.productCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductsResponse} and HTTP response
     */
    this.getProductsOfCompanyWithHttpInfo = function(companyId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getProductsOfCompany");
      }


      var pathParams = {
        'company_id': companyId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'product_code': opts['productCode'],
        'name': opts['name'],
        'status_id': opts['statusId'],
        'category_id': opts['categoryId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductsResponse;

      return this.apiClient.callApi(
        '/companies/{company_id}/products', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all products of a company
     * Receive a list of products of a specific company, identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translations set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
     * @param {Number} companyId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.productCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductsResponse}
     */
    this.getProductsOfCompany = function(companyId, opts) {
      return this.getProductsOfCompanyWithHttpInfo(companyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a company
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the company to update
     * @param {module:model/CompanyRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateCompanyWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCompany");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCompany");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/companies/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a company
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the company to update
     * @param {module:model/CompanyRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateCompany = function(id, body) {
      return this.updateCompanyWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
