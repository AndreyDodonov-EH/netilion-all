/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AssetKeyValuesResponse from '../model/AssetKeyValuesResponse';
import AssetValuesResponse from '../model/AssetValuesResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* InstrumentationValues service.
* @module api/InstrumentationValuesApi
* @version 01.00.00
*/
export default class InstrumentationValuesApi {

    /**
    * Constructs a new InstrumentationValuesApi. 
    * @alias module:api/InstrumentationValuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get latest values for the instrumentation.
     * Returns a collection of the latest values for all keys of the instrumentation. Possible include values: &#x60;&#x60;&#x60;unit, asset&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetValuesResponse} and HTTP response
     */
    getInstrumentationValuesWithHttpInfo(instrumentationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'key': opts['key'],
        'key_unit_id': opts['keyUnitId'],
        'group': opts['group']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetValuesResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get latest values for the instrumentation.
     * Returns a collection of the latest values for all keys of the instrumentation. Possible include values: &#x60;&#x60;&#x60;unit, asset&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetValuesResponse}
     */
    getInstrumentationValues(instrumentationId, opts) {
      return this.getInstrumentationValuesWithHttpInfo(instrumentationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get instrumentation values for a specific key.
     * Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetKeyValuesResponse} and HTTP response
     */
    getInstrumentationValuesForKeyWithHttpInfo(instrumentationId, key, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'instrumentation_id': instrumentationId,
        'key': key
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'from': opts['from'],
        'to': opts['to'],
        'unit_id': opts['unitId'],
        'aggregation': opts['aggregation'],
        'interval': opts['interval'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetKeyValuesResponse;

      return this.apiClient.callApi(
        '/instrumentations/{instrumentation_id}/values/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get instrumentation values for a specific key.
     * Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetKeyValuesResponse}
     */
    getInstrumentationValuesForKey(instrumentationId, key, opts) {
      return this.getInstrumentationValuesForKeyWithHttpInfo(instrumentationId, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
