/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BillOfMaterialRequest', 'model/BillOfMaterialResponse', 'model/BillOfMaterialsResponse', 'model/DocumentIDs', 'model/DocumentsResponse', 'model/ErrorResponse', 'model/InstrumentationIDs', 'model/InstrumentationsResponse', 'model/RequestForQuotationIDs', 'model/RequestForQuotationsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BillOfMaterialRequest'), require('../model/BillOfMaterialResponse'), require('../model/BillOfMaterialsResponse'), require('../model/DocumentIDs'), require('../model/DocumentsResponse'), require('../model/ErrorResponse'), require('../model/InstrumentationIDs'), require('../model/InstrumentationsResponse'), require('../model/RequestForQuotationIDs'), require('../model/RequestForQuotationsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.BillOfMaterialApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.BillOfMaterialRequest, root.NetilionApiDocumentation.BillOfMaterialResponse, root.NetilionApiDocumentation.BillOfMaterialsResponse, root.NetilionApiDocumentation.DocumentIDs, root.NetilionApiDocumentation.DocumentsResponse, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.InstrumentationIDs, root.NetilionApiDocumentation.InstrumentationsResponse, root.NetilionApiDocumentation.RequestForQuotationIDs, root.NetilionApiDocumentation.RequestForQuotationsResponse);
  }
}(this, function(ApiClient, BillOfMaterialRequest, BillOfMaterialResponse, BillOfMaterialsResponse, DocumentIDs, DocumentsResponse, ErrorResponse, InstrumentationIDs, InstrumentationsResponse, RequestForQuotationIDs, RequestForQuotationsResponse) {
  'use strict';

  /**
   * BillOfMaterial service.
   * @module api/BillOfMaterialApi
   * @version 01.00.00
   */

  /**
   * Constructs a new BillOfMaterialApi. 
   * @alias module:api/BillOfMaterialApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add documents to a bill of material
     * Add one or more documents to a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addDocumentsToBillOfMaterialWithHttpInfo = function(billOfMaterialId, body) {
      var postBody = body;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling addDocumentsToBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDocumentsToBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a bill of material
     * Add one or more documents to a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material to which the documents will be added
     * @param {module:model/DocumentIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addDocumentsToBillOfMaterial = function(billOfMaterialId, body) {
      return this.addDocumentsToBillOfMaterialWithHttpInfo(billOfMaterialId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add instrumentations to a bill of material
     * Add one or more instrumentations to a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material to which the instrumentations will be added
     * @param {module:model/InstrumentationIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addInstrumentationsToBillOfMaterialWithHttpInfo = function(billOfMaterialId, body) {
      var postBody = body;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling addInstrumentationsToBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addInstrumentationsToBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/instrumentations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add instrumentations to a bill of material
     * Add one or more instrumentations to a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material to which the instrumentations will be added
     * @param {module:model/InstrumentationIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addInstrumentationsToBillOfMaterial = function(billOfMaterialId, body) {
      return this.addInstrumentationsToBillOfMaterialWithHttpInfo(billOfMaterialId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add request for quotations to a bill of material
     * Add one or more request for quotations to a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material to which the request for quotations will be added
     * @param {module:model/RequestForQuotationIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addRequestForQuotationsToBillOfMaterialWithHttpInfo = function(billOfMaterialId, body) {
      var postBody = body;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling addRequestForQuotationsToBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addRequestForQuotationsToBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/request_for_quotations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add request for quotations to a bill of material
     * Add one or more request for quotations to a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material to which the request for quotations will be added
     * @param {module:model/RequestForQuotationIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addRequestForQuotationsToBillOfMaterial = function(billOfMaterialId, body) {
      return this.addRequestForQuotationsToBillOfMaterialWithHttpInfo(billOfMaterialId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new bill of material
     * Create a new bill of material
     * @param {module:model/BillOfMaterialRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialResponse} and HTTP response
     */
    this.createBillOfMaterialWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBillOfMaterial");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BillOfMaterialResponse;

      return this.apiClient.callApi(
        '/bill_of_materials', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new bill of material
     * Create a new bill of material
     * @param {module:model/BillOfMaterialRequest} body Object body that will be created.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialResponse}
     */
    this.createBillOfMaterial = function(body) {
      return this.createBillOfMaterialWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a bill of material
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the bill of material to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteBillOfMaterialWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBillOfMaterial");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a bill of material
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} id Id of the bill of material to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteBillOfMaterial = function(id) {
      return this.deleteBillOfMaterialWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single bill of material
     * Get a specific bill of material identified by the id in the URL.
     * @param {Number} id Id of the bill of material to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialResponse} and HTTP response
     */
    this.getBillOfMaterialByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBillOfMaterialById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BillOfMaterialResponse;

      return this.apiClient.callApi(
        '/bill_of_materials/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single bill of material
     * Get a specific bill of material identified by the id in the URL.
     * @param {Number} id Id of the bill of material to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialResponse}
     */
    this.getBillOfMaterialById = function(id) {
      return this.getBillOfMaterialByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of bill of materials
     * Returns a list of bill of materials. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialsResponse} and HTTP response
     */
    this.getBillOfMaterialsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'author': opts['author'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BillOfMaterialsResponse;

      return this.apiClient.callApi(
        '/bill_of_materials', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of bill of materials
     * Returns a list of bill of materials. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialsResponse}
     */
    this.getBillOfMaterials = function(opts) {
      return this.getBillOfMaterialsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of a bill of material
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} billOfMaterialId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    this.getDocumentsOfBillOfMaterialWithHttpInfo = function(billOfMaterialId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling getDocumentsOfBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/documents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of a bill of material
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Number} billOfMaterialId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.documentVersion Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.classificationId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.categoryId One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+).
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    this.getDocumentsOfBillOfMaterial = function(billOfMaterialId, opts) {
      return this.getDocumentsOfBillOfMaterialWithHttpInfo(billOfMaterialId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all instrumentations of a bill of material
     * Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, type&#x60;&#x60;&#x60;
     * @param {Number} billOfMaterialId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.tag Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.criticality Filter accepts undefined, low, medium or high
     * @param {String} opts.accessibility Filter accepts undefined, easy, moderate or difficult
     * @param {String} opts.assetStatusId One or multiple ids (comma list). Expected id format is integer. This retrieves all Instrumentations where at least one of its assets has one of the given statuses.
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationsResponse} and HTTP response
     */
    this.getInstrumentationsOfBillOfMaterialWithHttpInfo = function(billOfMaterialId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling getInstrumentationsOfBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'tag': opts['tag'],
        'status_id': opts['statusId'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'criticality': opts['criticality'],
        'accessibility': opts['accessibility'],
        'asset_status_id': opts['assetStatusId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InstrumentationsResponse;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/instrumentations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all instrumentations of a bill of material
     * Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, type&#x60;&#x60;&#x60;
     * @param {Number} billOfMaterialId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.tag Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.typeId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.parentId One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent.
     * @param {String} opts.tenantId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.specificationsKey Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter
     * @param {String} opts.specificationsValue Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors
     * @param {String} opts.criticality Filter accepts undefined, low, medium or high
     * @param {String} opts.accessibility Filter accepts undefined, easy, moderate or difficult
     * @param {String} opts.assetStatusId One or multiple ids (comma list). Expected id format is integer. This retrieves all Instrumentations where at least one of its assets has one of the given statuses.
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationsResponse}
     */
    this.getInstrumentationsOfBillOfMaterial = function(billOfMaterialId, opts) {
      return this.getInstrumentationsOfBillOfMaterialWithHttpInfo(billOfMaterialId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all request for quotations of a bill of material
     * Returns a list of all request for quotations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} billOfMaterialId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationsResponse} and HTTP response
     */
    this.getRequestForQuotationsOfBillOfMaterialWithHttpInfo = function(billOfMaterialId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling getRequestForQuotationsOfBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'author': opts['author'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RequestForQuotationsResponse;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/request_for_quotations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all request for quotations of a bill of material
     * Returns a list of all request for quotations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} billOfMaterialId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts._number Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.statusId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts._date Expected date format is YYYY-MM-DD
     * @param {String} opts.dateFrom Expected date format is YYYY-MM-DD
     * @param {String} opts.dateTo Expected date format is YYYY-MM-DD
     * @param {String} opts.senderId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.receiverId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.author Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationsResponse}
     */
    this.getRequestForQuotationsOfBillOfMaterial = function(billOfMaterialId, opts) {
      return this.getRequestForQuotationsOfBillOfMaterialWithHttpInfo(billOfMaterialId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a bill of material
     * Remove one or more documents from a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeDocumentsFromBillOfMaterialWithHttpInfo = function(billOfMaterialId, body) {
      var postBody = body;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling removeDocumentsFromBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeDocumentsFromBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/documents', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a bill of material
     * Remove one or more documents from a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material from which the documents will be removed
     * @param {module:model/DocumentIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeDocumentsFromBillOfMaterial = function(billOfMaterialId, body) {
      return this.removeDocumentsFromBillOfMaterialWithHttpInfo(billOfMaterialId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove instrumentations from a bill of material
     * Remove one or more instrumentations from a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material from which the instrumentations will be removed
     * @param {module:model/InstrumentationIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeInstrumentationsFromBillOfMaterialWithHttpInfo = function(billOfMaterialId, body) {
      var postBody = body;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling removeInstrumentationsFromBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeInstrumentationsFromBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/instrumentations', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove instrumentations from a bill of material
     * Remove one or more instrumentations from a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material from which the instrumentations will be removed
     * @param {module:model/InstrumentationIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeInstrumentationsFromBillOfMaterial = function(billOfMaterialId, body) {
      return this.removeInstrumentationsFromBillOfMaterialWithHttpInfo(billOfMaterialId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove request for quotations from a bill of material
     * Remove one or more request for quotations from a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material from which the request for quotations will be removed
     * @param {module:model/RequestForQuotationIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeRequestForQuotationsOfBillOfMaterialWithHttpInfo = function(billOfMaterialId, body) {
      var postBody = body;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling removeRequestForQuotationsOfBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeRequestForQuotationsOfBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/request_for_quotations', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove request for quotations from a bill of material
     * Remove one or more request for quotations from a bill of material.
     * @param {Number} billOfMaterialId Id of the bill of material from which the request for quotations will be removed
     * @param {module:model/RequestForQuotationIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeRequestForQuotationsOfBillOfMaterial = function(billOfMaterialId, body) {
      return this.removeRequestForQuotationsOfBillOfMaterialWithHttpInfo(billOfMaterialId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a bill of material
     * Replaces all documents belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @param {Number} billOfMaterialId Id of the bill of material of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceDocumentsOfBillOfMaterialWithHttpInfo = function(billOfMaterialId, body) {
      var postBody = body;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling replaceDocumentsOfBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceDocumentsOfBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/documents', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a bill of material
     * Replaces all documents belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @param {Number} billOfMaterialId Id of the bill of material of which the documents will be replaced
     * @param {module:model/DocumentIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceDocumentsOfBillOfMaterial = function(billOfMaterialId, body) {
      return this.replaceDocumentsOfBillOfMaterialWithHttpInfo(billOfMaterialId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the instrumentations of a bill of material
     * Replaces all instrumentations belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @param {Number} billOfMaterialId Id of the bill of material of which the instrumentations will be replaced
     * @param {module:model/InstrumentationIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceInstrumentationsOfBillOfMaterialWithHttpInfo = function(billOfMaterialId, body) {
      var postBody = body;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling replaceInstrumentationsOfBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceInstrumentationsOfBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/instrumentations', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the instrumentations of a bill of material
     * Replaces all instrumentations belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @param {Number} billOfMaterialId Id of the bill of material of which the instrumentations will be replaced
     * @param {module:model/InstrumentationIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceInstrumentationsOfBillOfMaterial = function(billOfMaterialId, body) {
      return this.replaceInstrumentationsOfBillOfMaterialWithHttpInfo(billOfMaterialId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the request for quotations of a bill of material
     * Replaces all request for quotations belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @param {Number} billOfMaterialId Id of the bill of material of which the request for quotations will be replaced
     * @param {module:model/RequestForQuotationIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.replaceRequestForQuotationsOfBillOfMaterialWithHttpInfo = function(billOfMaterialId, body) {
      var postBody = body;

      // verify the required parameter 'billOfMaterialId' is set
      if (billOfMaterialId === undefined || billOfMaterialId === null) {
        throw new Error("Missing the required parameter 'billOfMaterialId' when calling replaceRequestForQuotationsOfBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceRequestForQuotationsOfBillOfMaterial");
      }


      var pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/request_for_quotations', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the request for quotations of a bill of material
     * Replaces all request for quotations belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @param {Number} billOfMaterialId Id of the bill of material of which the request for quotations will be replaced
     * @param {module:model/RequestForQuotationIDs} body Resources that shall be replaced
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.replaceRequestForQuotationsOfBillOfMaterial = function(billOfMaterialId, body) {
      return this.replaceRequestForQuotationsOfBillOfMaterialWithHttpInfo(billOfMaterialId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a bill of material
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the bill of material to update
     * @param {module:model/BillOfMaterialRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateBillOfMaterialWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBillOfMaterial");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBillOfMaterial");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a bill of material
     * Update accessible parameters of the requested resource.
     * @param {Number} id Id of the bill of material to update
     * @param {module:model/BillOfMaterialRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateBillOfMaterial = function(id, body) {
      return this.updateBillOfMaterialWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
