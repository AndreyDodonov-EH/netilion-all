/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BillOfMaterialRequest from '../model/BillOfMaterialRequest';
import BillOfMaterialResponse from '../model/BillOfMaterialResponse';
import BillOfMaterialsResponse from '../model/BillOfMaterialsResponse';
import DocumentIDs from '../model/DocumentIDs';
import DocumentsResponse from '../model/DocumentsResponse';
import ErrorResponse from '../model/ErrorResponse';
import InstrumentationIDs from '../model/InstrumentationIDs';
import InstrumentationsResponse from '../model/InstrumentationsResponse';
import RequestForQuotationIDs from '../model/RequestForQuotationIDs';
import RequestForQuotationsResponse from '../model/RequestForQuotationsResponse';

/**
* BillOfMaterial service.
* @module api/BillOfMaterialApi
* @version 01.00.00
*/
export default class BillOfMaterialApi {

    /**
    * Constructs a new BillOfMaterialApi. 
    * @alias module:api/BillOfMaterialApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add documents to a bill of material
     * Add one or more documents to a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDocumentsToBillOfMaterialWithHttpInfo(body, billOfMaterialId) {
      let postBody = body;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a bill of material
     * Add one or more documents to a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDocumentsToBillOfMaterial(body, billOfMaterialId) {
      return this.addDocumentsToBillOfMaterialWithHttpInfo(body, billOfMaterialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add instrumentations to a bill of material
     * Add one or more instrumentations to a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addInstrumentationsToBillOfMaterialWithHttpInfo(body, billOfMaterialId) {
      let postBody = body;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/instrumentations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add instrumentations to a bill of material
     * Add one or more instrumentations to a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addInstrumentationsToBillOfMaterial(body, billOfMaterialId) {
      return this.addInstrumentationsToBillOfMaterialWithHttpInfo(body, billOfMaterialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add request for quotations to a bill of material
     * Add one or more request for quotations to a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addRequestForQuotationsToBillOfMaterialWithHttpInfo(body, billOfMaterialId) {
      let postBody = body;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/request_for_quotations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add request for quotations to a bill of material
     * Add one or more request for quotations to a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addRequestForQuotationsToBillOfMaterial(body, billOfMaterialId) {
      return this.addRequestForQuotationsToBillOfMaterialWithHttpInfo(body, billOfMaterialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new bill of material
     * Create a new bill of material
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialResponse} and HTTP response
     */
    createBillOfMaterialWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BillOfMaterialResponse;

      return this.apiClient.callApi(
        '/bill_of_materials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new bill of material
     * Create a new bill of material
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialResponse}
     */
    createBillOfMaterial(body) {
      return this.createBillOfMaterialWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a bill of material
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBillOfMaterialWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a bill of material
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBillOfMaterial(id) {
      return this.deleteBillOfMaterialWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single bill of material
     * Get a specific bill of material identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialResponse} and HTTP response
     */
    getBillOfMaterialByIdWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BillOfMaterialResponse;

      return this.apiClient.callApi(
        '/bill_of_materials/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single bill of material
     * Get a specific bill of material identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialResponse}
     */
    getBillOfMaterialById(id) {
      return this.getBillOfMaterialByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of bill of materials
     * Returns a list of bill of materials. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BillOfMaterialsResponse} and HTTP response
     */
    getBillOfMaterialsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'author': opts['author'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BillOfMaterialsResponse;

      return this.apiClient.callApi(
        '/bill_of_materials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of bill of materials
     * Returns a list of bill of materials. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BillOfMaterialsResponse}
     */
    getBillOfMaterials(opts) {
      return this.getBillOfMaterialsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of a bill of material
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    getDocumentsOfBillOfMaterialWithHttpInfo(billOfMaterialId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'valid_from': opts['validFrom'],
        'valid_until': opts['validUntil'],
        'valid_at': opts['validAt'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of a bill of material
     * Returns a list of documents. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    getDocumentsOfBillOfMaterial(billOfMaterialId, opts) {
      return this.getDocumentsOfBillOfMaterialWithHttpInfo(billOfMaterialId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all instrumentations of a bill of material
     * Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, type&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationsResponse} and HTTP response
     */
    getInstrumentationsOfBillOfMaterialWithHttpInfo(billOfMaterialId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'tag': opts['tag'],
        'status_id': opts['statusId'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'criticality': opts['criticality'],
        'accessibility': opts['accessibility'],
        'asset_status_id': opts['assetStatusId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentationsResponse;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/instrumentations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all instrumentations of a bill of material
     * Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, type&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationsResponse}
     */
    getInstrumentationsOfBillOfMaterial(billOfMaterialId, opts) {
      return this.getInstrumentationsOfBillOfMaterialWithHttpInfo(billOfMaterialId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all request for quotations of a bill of material
     * Returns a list of all request for quotations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestForQuotationsResponse} and HTTP response
     */
    getRequestForQuotationsOfBillOfMaterialWithHttpInfo(billOfMaterialId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'date': opts['_date'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'author': opts['author'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestForQuotationsResponse;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/request_for_quotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all request for quotations of a bill of material
     * Returns a list of all request for quotations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestForQuotationsResponse}
     */
    getRequestForQuotationsOfBillOfMaterial(billOfMaterialId, opts) {
      return this.getRequestForQuotationsOfBillOfMaterialWithHttpInfo(billOfMaterialId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a bill of material
     * Remove one or more documents from a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDocumentsFromBillOfMaterialWithHttpInfo(body, billOfMaterialId) {
      let postBody = body;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a bill of material
     * Remove one or more documents from a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDocumentsFromBillOfMaterial(body, billOfMaterialId) {
      return this.removeDocumentsFromBillOfMaterialWithHttpInfo(body, billOfMaterialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove instrumentations from a bill of material
     * Remove one or more instrumentations from a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeInstrumentationsFromBillOfMaterialWithHttpInfo(body, billOfMaterialId) {
      let postBody = body;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/instrumentations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove instrumentations from a bill of material
     * Remove one or more instrumentations from a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeInstrumentationsFromBillOfMaterial(body, billOfMaterialId) {
      return this.removeInstrumentationsFromBillOfMaterialWithHttpInfo(body, billOfMaterialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove request for quotations from a bill of material
     * Remove one or more request for quotations from a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeRequestForQuotationsOfBillOfMaterialWithHttpInfo(body, billOfMaterialId) {
      let postBody = body;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/request_for_quotations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove request for quotations from a bill of material
     * Remove one or more request for quotations from a bill of material.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeRequestForQuotationsOfBillOfMaterial(body, billOfMaterialId) {
      return this.removeRequestForQuotationsOfBillOfMaterialWithHttpInfo(body, billOfMaterialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a bill of material
     * Replaces all documents belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceDocumentsOfBillOfMaterialWithHttpInfo(body, billOfMaterialId) {
      let postBody = body;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/documents', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a bill of material
     * Replaces all documents belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceDocumentsOfBillOfMaterial(body, billOfMaterialId) {
      return this.replaceDocumentsOfBillOfMaterialWithHttpInfo(body, billOfMaterialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the instrumentations of a bill of material
     * Replaces all instrumentations belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceInstrumentationsOfBillOfMaterialWithHttpInfo(body, billOfMaterialId) {
      let postBody = body;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/instrumentations', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the instrumentations of a bill of material
     * Replaces all instrumentations belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceInstrumentationsOfBillOfMaterial(body, billOfMaterialId) {
      return this.replaceInstrumentationsOfBillOfMaterialWithHttpInfo(body, billOfMaterialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the request for quotations of a bill of material
     * Replaces all request for quotations belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceRequestForQuotationsOfBillOfMaterialWithHttpInfo(body, billOfMaterialId) {
      let postBody = body;

      let pathParams = {
        'bill_of_material_id': billOfMaterialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{bill_of_material_id}/request_for_quotations', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the request for quotations of a bill of material
     * Replaces all request for quotations belonging to a bill of material. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceRequestForQuotationsOfBillOfMaterial(body, billOfMaterialId) {
      return this.replaceRequestForQuotationsOfBillOfMaterialWithHttpInfo(body, billOfMaterialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a bill of material
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateBillOfMaterialWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/bill_of_materials/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a bill of material
     * Update accessible parameters of the requested resource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateBillOfMaterial(body, id) {
      return this.updateBillOfMaterialWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
