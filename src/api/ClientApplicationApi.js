/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ClientApplicationPublicResponse', 'model/ClientApplicationRequest', 'model/ClientApplicationResponse', 'model/ClientApplicationsResponse', 'model/ErrorResponse', 'model/UserIDs', 'model/UsersPublicResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ClientApplicationPublicResponse'), require('../model/ClientApplicationRequest'), require('../model/ClientApplicationResponse'), require('../model/ClientApplicationsResponse'), require('../model/ErrorResponse'), require('../model/UserIDs'), require('../model/UsersPublicResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.ClientApplicationApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.ClientApplicationPublicResponse, root.NetilionApiDocumentation.ClientApplicationRequest, root.NetilionApiDocumentation.ClientApplicationResponse, root.NetilionApiDocumentation.ClientApplicationsResponse, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.UserIDs, root.NetilionApiDocumentation.UsersPublicResponse);
  }
}(this, function(ApiClient, ClientApplicationPublicResponse, ClientApplicationRequest, ClientApplicationResponse, ClientApplicationsResponse, ErrorResponse, UserIDs, UsersPublicResponse) {
  'use strict';

  /**
   * ClientApplication service.
   * @module api/ClientApplicationApi
   * @version 01.00.00
   */

  /**
   * Constructs a new ClientApplicationApi. 
   * @alias module:api/ClientApplicationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add users to a client application user role
     * Add one or more users to a user role.
     * @param {Number} clientApplicationId The resource defined in the URL
     * @param {Number} userroleId The resource defined in the URL
     * @param {module:model/UserIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addUsersToClientApplicationUserRoleWithHttpInfo = function(clientApplicationId, userroleId, body) {
      var postBody = body;

      // verify the required parameter 'clientApplicationId' is set
      if (clientApplicationId === undefined || clientApplicationId === null) {
        throw new Error("Missing the required parameter 'clientApplicationId' when calling addUsersToClientApplicationUserRole");
      }

      // verify the required parameter 'userroleId' is set
      if (userroleId === undefined || userroleId === null) {
        throw new Error("Missing the required parameter 'userroleId' when calling addUsersToClientApplicationUserRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addUsersToClientApplicationUserRole");
      }


      var pathParams = {
        'client_application_id': clientApplicationId,
        'userrole_id': userroleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/client_applications/{client_application_id}/roles/{userrole_id}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add users to a client application user role
     * Add one or more users to a user role.
     * @param {Number} clientApplicationId The resource defined in the URL
     * @param {Number} userroleId The resource defined in the URL
     * @param {module:model/UserIDs} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addUsersToClientApplicationUserRole = function(clientApplicationId, userroleId, body) {
      return this.addUsersToClientApplicationUserRoleWithHttpInfo(clientApplicationId, userroleId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new client_application
     * Create a new client_application.
     * @param {module:model/ClientApplicationRequest} body ClientApplication object that needs to be created. name and contact_person are required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientApplicationResponse} and HTTP response
     */
    this.createClientApplicationWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createClientApplication");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientApplicationResponse;

      return this.apiClient.callApi(
        '/client_applications', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new client_application
     * Create a new client_application.
     * @param {module:model/ClientApplicationRequest} body ClientApplication object that needs to be created. name and contact_person are required.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientApplicationResponse}
     */
    this.createClientApplication = function(body) {
      return this.createClientApplicationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an client_application
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the client_application to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteClientApplicationWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClientApplication");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/client_applications/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an client_application
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the client_application to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteClientApplication = function(id) {
      return this.deleteClientApplicationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove users from a client application user role
     * Remove one or more users from an user role. To work with roles, admin role is required.
     * @param {Number} clientApplicationId The resource defined in the URL
     * @param {Number} userroleId The resource defined in the URL
     * @param {module:model/UserIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteUsersFromClientApplicationUserRoleWithHttpInfo = function(clientApplicationId, userroleId, body) {
      var postBody = body;

      // verify the required parameter 'clientApplicationId' is set
      if (clientApplicationId === undefined || clientApplicationId === null) {
        throw new Error("Missing the required parameter 'clientApplicationId' when calling deleteUsersFromClientApplicationUserRole");
      }

      // verify the required parameter 'userroleId' is set
      if (userroleId === undefined || userroleId === null) {
        throw new Error("Missing the required parameter 'userroleId' when calling deleteUsersFromClientApplicationUserRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteUsersFromClientApplicationUserRole");
      }


      var pathParams = {
        'client_application_id': clientApplicationId,
        'userrole_id': userroleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/client_applications/{client_application_id}/roles/{userrole_id}/users', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove users from a client application user role
     * Remove one or more users from an user role. To work with roles, admin role is required.
     * @param {Number} clientApplicationId The resource defined in the URL
     * @param {Number} userroleId The resource defined in the URL
     * @param {module:model/UserIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteUsersFromClientApplicationUserRole = function(clientApplicationId, userroleId, body) {
      return this.deleteUsersFromClientApplicationUserRoleWithHttpInfo(clientApplicationId, userroleId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * GetAPI Keys of Client Application
     * Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
     * @param {Number} clientApplicationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.apiKey Filter accepts &#x60;*&#x60; as wildcard
     * @param {Date} opts.validFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validFromFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validFromTo Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntil Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntilFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntilTo Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientApplicationResponse} and HTTP response
     */
    this.getAPIKeysOfClientApplicationWithHttpInfo = function(clientApplicationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientApplicationId' is set
      if (clientApplicationId === undefined || clientApplicationId === null) {
        throw new Error("Missing the required parameter 'clientApplicationId' when calling getAPIKeysOfClientApplication");
      }


      var pathParams = {
        'client_application_id': clientApplicationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'api_key': opts['apiKey'],
        'valid_from': opts['validFrom'],
        'valid_from_from': opts['validFromFrom'],
        'valid_from_to': opts['validFromTo'],
        'valid_until': opts['validUntil'],
        'valid_until_from': opts['validUntilFrom'],
        'valid_until_to': opts['validUntilTo'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientApplicationResponse;

      return this.apiClient.callApi(
        '/client_applications/{client_application_id}/api_keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * GetAPI Keys of Client Application
     * Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
     * @param {Number} clientApplicationId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.apiKey Filter accepts &#x60;*&#x60; as wildcard
     * @param {Date} opts.validFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validFromFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validFromTo Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntil Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntilFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntilTo Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientApplicationResponse}
     */
    this.getAPIKeysOfClientApplication = function(clientApplicationId, opts) {
      return this.getAPIKeysOfClientApplicationWithHttpInfo(clientApplicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single client_application
     * Get a specific client_application in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the client_application to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientApplicationResponse} and HTTP response
     */
    this.getClientApplicationByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClientApplicationById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientApplicationResponse;

      return this.apiClient.callApi(
        '/client_applications/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single client_application
     * Get a specific client_application in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the client_application to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientApplicationResponse}
     */
    this.getClientApplicationById = function(id, opts) {
      return this.getClientApplicationByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of client_applications
     * Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.contactPersonId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientApplicationsResponse} and HTTP response
     */
    this.getClientApplicationsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'contact_person_id': opts['contactPersonId'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientApplicationsResponse;

      return this.apiClient.callApi(
        '/client_applications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of client_applications
     * Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.name Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.contactPersonId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientApplicationsResponse}
     */
    this.getClientApplications = function(opts) {
      return this.getClientApplicationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current client_application
     * Returns current client application used to access the api.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientApplicationPublicResponse} and HTTP response
     */
    this.getCurrentClientApplicationWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientApplicationPublicResponse;

      return this.apiClient.callApi(
        '/client_applications/current', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get current client_application
     * Returns current client application used to access the api.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientApplicationPublicResponse}
     */
    this.getCurrentClientApplication = function() {
      return this.getCurrentClientApplicationWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all users of a user role assigned to a client application
     * Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} clientApplicationId The resource defined in the URL
     * @param {Number} userroleId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.firstName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.lastName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UsersPublicResponse} and HTTP response
     */
    this.getUsersOfClientApplicationUserRoleWithHttpInfo = function(clientApplicationId, userroleId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientApplicationId' is set
      if (clientApplicationId === undefined || clientApplicationId === null) {
        throw new Error("Missing the required parameter 'clientApplicationId' when calling getUsersOfClientApplicationUserRole");
      }

      // verify the required parameter 'userroleId' is set
      if (userroleId === undefined || userroleId === null) {
        throw new Error("Missing the required parameter 'userroleId' when calling getUsersOfClientApplicationUserRole");
      }


      var pathParams = {
        'client_application_id': clientApplicationId,
        'userrole_id': userroleId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersPublicResponse;

      return this.apiClient.callApi(
        '/client_applications/{client_application_id}/roles/{userrole_id}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all users of a user role assigned to a client application
     * Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} clientApplicationId The resource defined in the URL
     * @param {Number} userroleId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.firstName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.lastName Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UsersPublicResponse}
     */
    this.getUsersOfClientApplicationUserRole = function(clientApplicationId, userroleId, opts) {
      return this.getUsersOfClientApplicationUserRoleWithHttpInfo(clientApplicationId, userroleId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an client_application
     * Update accessible parameters of the requested resource in your accessible scope.
     * @param {Number} id Id of the client_application to update
     * @param {module:model/ClientApplicationRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateClientApplicationWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClientApplication");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateClientApplication");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/client_applications/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an client_application
     * Update accessible parameters of the requested resource in your accessible scope.
     * @param {Number} id Id of the client_application to update
     * @param {module:model/ClientApplicationRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateClientApplication = function(id, body) {
      return this.updateClientApplicationWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
