/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/HealthConditionCauseIDs', 'model/HealthConditionsRequest', 'model/HealthConditionsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/HealthConditionCauseIDs'), require('../model/HealthConditionsRequest'), require('../model/HealthConditionsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.ProductHealthConditionApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.HealthConditionCauseIDs, root.NetilionApiDocumentation.HealthConditionsRequest, root.NetilionApiDocumentation.HealthConditionsResponse);
  }
}(this, function(ApiClient, ErrorResponse, HealthConditionCauseIDs, HealthConditionsRequest, HealthConditionsResponse) {
  'use strict';

  /**
   * ProductHealthCondition service.
   * @module api/ProductHealthConditionApi
   * @version 01.00.00
   */

  /**
   * Constructs a new ProductHealthConditionApi. 
   * @alias module:api/ProductHealthConditionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add health conditions to an product
     * Add one or more health conditions to an product.
     * @param {Number} productId The resource defined in the URL
     * @param {module:model/HealthConditionsRequest} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addHealthConditionsToProductWithHttpInfo = function(productId, body) {
      var postBody = body;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling addHealthConditionsToProduct");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addHealthConditionsToProduct");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/health_conditions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add health conditions to an product
     * Add one or more health conditions to an product.
     * @param {Number} productId The resource defined in the URL
     * @param {module:model/HealthConditionsRequest} body Resources that shall be added.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addHealthConditionsToProduct = function(productId, body) {
      return this.addHealthConditionsToProductWithHttpInfo(productId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all health conditions assigned to an product
     * Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
     * @param {Number} productId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.healthConditionId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.diagnosisCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.deviceIdent Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.protocol Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60; and &#x60;MODBUS&#x60;
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthConditionsResponse} and HTTP response
     */
    this.getProductHealthConditionsWithHttpInfo = function(productId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductHealthConditions");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'health_condition_id': opts['healthConditionId'],
        'diagnosis_code': opts['diagnosisCode'],
        'device_ident': opts['deviceIdent'],
        'protocol': opts['protocol'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HealthConditionsResponse;

      return this.apiClient.callApi(
        '/products/{product_id}/health_conditions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all health conditions assigned to an product
     * Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
     * @param {Number} productId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.healthConditionId One or multiple ids (comma list). Expected id format is integer
     * @param {String} opts.diagnosisCode Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.deviceIdent Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.protocol Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60; and &#x60;MODBUS&#x60;
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthConditionsResponse}
     */
    this.getProductHealthConditions = function(productId, opts) {
      return this.getProductHealthConditionsWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace health conditions of an product
     * Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
     * @param {Number} productId The resource defined in the URL
     * @param {module:model/HealthConditionsRequest} body Resources that shall be replaced.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.reaplaceHealthConditionsOfProductWithHttpInfo = function(productId, body) {
      var postBody = body;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling reaplaceHealthConditionsOfProduct");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reaplaceHealthConditionsOfProduct");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/health_conditions', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace health conditions of an product
     * Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
     * @param {Number} productId The resource defined in the URL
     * @param {module:model/HealthConditionsRequest} body Resources that shall be replaced.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.reaplaceHealthConditionsOfProduct = function(productId, body) {
      return this.reaplaceHealthConditionsOfProductWithHttpInfo(productId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove health conditions of an product
     * Remove one or more health conditions from an product.
     * @param {Number} productId The resource defined in the URL
     * @param {module:model/HealthConditionCauseIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeHealthConditionsOfProductWithHttpInfo = function(productId, body) {
      var postBody = body;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling removeHealthConditionsOfProduct");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeHealthConditionsOfProduct");
      }


      var pathParams = {
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/products/{product_id}/health_conditions', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove health conditions of an product
     * Remove one or more health conditions from an product.
     * @param {Number} productId The resource defined in the URL
     * @param {module:model/HealthConditionCauseIDs} body Resources that shall be removed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeHealthConditionsOfProduct = function(productId, body) {
      return this.removeHealthConditionsOfProductWithHttpInfo(productId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
