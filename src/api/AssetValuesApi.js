/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AssetKeyValuesResponse', 'model/AssetValuesRequest', 'model/AssetValuesResponse', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AssetKeyValuesResponse'), require('../model/AssetValuesRequest'), require('../model/AssetValuesResponse'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.AssetValuesApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.AssetKeyValuesResponse, root.NetilionApiDocumentation.AssetValuesRequest, root.NetilionApiDocumentation.AssetValuesResponse, root.NetilionApiDocumentation.ErrorResponse);
  }
}(this, function(ApiClient, AssetKeyValuesResponse, AssetValuesRequest, AssetValuesResponse, ErrorResponse) {
  'use strict';

  /**
   * AssetValues service.
   * @module api/AssetValuesApi
   * @version 01.00.00
   */

  /**
   * Constructs a new AssetValuesApi. 
   * @alias module:api/AssetValuesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create asset values
     * Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetValuesRequest} body Values to store to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createAssetValuesWithHttpInfo = function(assetId, body) {
      var postBody = body;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling createAssetValues");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAssetValues");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/values', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create asset values
     * Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
     * @param {Number} assetId The resource defined in the URL
     * @param {module:model/AssetValuesRequest} body Values to store to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createAssetValues = function(assetId, body) {
      return this.createAssetValuesWithHttpInfo(assetId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get latest values for the asset.
     * Returns a collection of the latest values for all keys of the asset. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
     * @param {Number} assetId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.key only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list.
     * @param {String} opts.keyUnitId value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be retruned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple vaöies can be provided in a comma seperated list.
     * @param {String} opts.group Group of the asset value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetValuesResponse} and HTTP response
     */
    this.getAssetValuesWithHttpInfo = function(assetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getAssetValues");
      }


      var pathParams = {
        'asset_id': assetId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'key': opts['key'],
        'key_unit_id': opts['keyUnitId'],
        'group': opts['group'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetValuesResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/values', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get latest values for the asset.
     * Returns a collection of the latest values for all keys of the asset. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
     * @param {Number} assetId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.key only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list.
     * @param {String} opts.keyUnitId value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be retruned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple vaöies can be provided in a comma seperated list.
     * @param {String} opts.group Group of the asset value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetValuesResponse}
     */
    this.getAssetValues = function(assetId, opts) {
      return this.getAssetValuesWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get asset values for a specific key.
     * Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
     * @param {Number} assetId The resource defined in the URL
     * @param {String} key key for the asset values
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page, default value is 500, maximum is 1000
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {Date} opts.from Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.to End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Number} opts.unitId Id of the unit in which the values are to be returned.
     * @param {String} opts.aggregation Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined.
     * @param {String} opts.interval Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;.
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;timestamp&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetKeyValuesResponse} and HTTP response
     */
    this.getAssetValuesForKeyWithHttpInfo = function(assetId, key, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getAssetValuesForKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAssetValuesForKey");
      }


      var pathParams = {
        'asset_id': assetId,
        'key': key
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'from': opts['from'],
        'to': opts['to'],
        'unit_id': opts['unitId'],
        'aggregation': opts['aggregation'],
        'interval': opts['interval'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetKeyValuesResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/values/{key}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get asset values for a specific key.
     * Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
     * @param {Number} assetId The resource defined in the URL
     * @param {String} key key for the asset values
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page, default value is 500, maximum is 1000
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {Date} opts.from Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Date} opts.to End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss
     * @param {Number} opts.unitId Id of the unit in which the values are to be returned.
     * @param {String} opts.aggregation Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined.
     * @param {String} opts.interval Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;.
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;timestamp&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetKeyValuesResponse}
     */
    this.getAssetValuesForKey = function(assetId, key, opts) {
      return this.getAssetValuesForKeyWithHttpInfo(assetId, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
