/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/HealthConditionRemedyRequest', 'model/HealthConditionRemedyResponse', 'model/Remedies'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/HealthConditionRemedyRequest'), require('../model/HealthConditionRemedyResponse'), require('../model/Remedies'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.HealthConditionRemedyApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.HealthConditionRemedyRequest, root.NetilionApiDocumentation.HealthConditionRemedyResponse, root.NetilionApiDocumentation.Remedies);
  }
}(this, function(ApiClient, ErrorResponse, HealthConditionRemedyRequest, HealthConditionRemedyResponse, Remedies) {
  'use strict';

  /**
   * HealthConditionRemedy service.
   * @module api/HealthConditionRemedyApi
   * @version 01.00.00
   */

  /**
   * Constructs a new HealthConditionRemedyApi. 
   * @alias module:api/HealthConditionRemedyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a remedy
     * Remedy must have a code and a description scope.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {module:model/HealthConditionRemedyRequest} body Parameters that shall be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthConditionRemedyResponse} and HTTP response
     */
    this.createHealthConditionRemedyWithHttpInfo = function(healthConditionId, causeId, body) {
      var postBody = body;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling createHealthConditionRemedy");
      }

      // verify the required parameter 'causeId' is set
      if (causeId === undefined || causeId === null) {
        throw new Error("Missing the required parameter 'causeId' when calling createHealthConditionRemedy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createHealthConditionRemedy");
      }


      var pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HealthConditionRemedyResponse;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a remedy
     * Remedy must have a code and a description scope.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {module:model/HealthConditionRemedyRequest} body Parameters that shall be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthConditionRemedyResponse}
     */
    this.createHealthConditionRemedy = function(healthConditionId, causeId, body) {
      return this.createHealthConditionRemedyWithHttpInfo(healthConditionId, causeId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a remedy
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {Number} id Id of the remedy to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteHealthConditionRemedyWithHttpInfo = function(healthConditionId, causeId, id) {
      var postBody = null;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling deleteHealthConditionRemedy");
      }

      // verify the required parameter 'causeId' is set
      if (causeId === undefined || causeId === null) {
        throw new Error("Missing the required parameter 'causeId' when calling deleteHealthConditionRemedy");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteHealthConditionRemedy");
      }


      var pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a remedy
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {Number} id Id of the remedy to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteHealthConditionRemedy = function(healthConditionId, causeId, id) {
      return this.deleteHealthConditionRemedyWithHttpInfo(healthConditionId, causeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all remedies of a cause
     * Returns a list of remedies for a specific cause. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.code Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.description Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;code&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Remedies} and HTTP response
     */
    this.getHealthConditionRemediesWithHttpInfo = function(healthConditionId, causeId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling getHealthConditionRemedies");
      }

      // verify the required parameter 'causeId' is set
      if (causeId === undefined || causeId === null) {
        throw new Error("Missing the required parameter 'causeId' when calling getHealthConditionRemedies");
      }


      var pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'code': opts['code'],
        'description': opts['description'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Remedies;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all remedies of a cause
     * Returns a list of remedies for a specific cause. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.code Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.description Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;code&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Remedies}
     */
    this.getHealthConditionRemedies = function(healthConditionId, causeId, opts) {
      return this.getHealthConditionRemediesWithHttpInfo(healthConditionId, causeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single remedy
     * Get a specific remedy identified by the id in the URL.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {Number} id Id of the remedy to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthConditionRemedyResponse} and HTTP response
     */
    this.getHealthConditionRemedyByIdWithHttpInfo = function(healthConditionId, causeId, id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling getHealthConditionRemedyById");
      }

      // verify the required parameter 'causeId' is set
      if (causeId === undefined || causeId === null) {
        throw new Error("Missing the required parameter 'causeId' when calling getHealthConditionRemedyById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHealthConditionRemedyById");
      }


      var pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HealthConditionRemedyResponse;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single remedy
     * Get a specific remedy identified by the id in the URL.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {Number} id Id of the remedy to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthConditionRemedyResponse}
     */
    this.getHealthConditionRemedyById = function(healthConditionId, causeId, id, opts) {
      return this.getHealthConditionRemedyByIdWithHttpInfo(healthConditionId, causeId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a remedy
     * Update accessible parameters of the requested resource.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {Number} id Id of the remedy to update
     * @param {module:model/HealthConditionRemedyRequest} body Parameters that shall be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentLanguage language of the content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateHealthConditionRemedyWithHttpInfo = function(healthConditionId, causeId, id, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling updateHealthConditionRemedy");
      }

      // verify the required parameter 'causeId' is set
      if (causeId === undefined || causeId === null) {
        throw new Error("Missing the required parameter 'causeId' when calling updateHealthConditionRemedy");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHealthConditionRemedy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateHealthConditionRemedy");
      }


      var pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Language': opts['contentLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a remedy
     * Update accessible parameters of the requested resource.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} causeId The resource defined in the URL
     * @param {Number} id Id of the remedy to update
     * @param {module:model/HealthConditionRemedyRequest} body Parameters that shall be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentLanguage language of the content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateHealthConditionRemedy = function(healthConditionId, causeId, id, body, opts) {
      return this.updateHealthConditionRemedyWithHttpInfo(healthConditionId, causeId, id, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
