/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import HealthConditionRemedyRequest from '../model/HealthConditionRemedyRequest';
import HealthConditionRemedyResponse from '../model/HealthConditionRemedyResponse';

/**
* HealthConditionRemedy service.
* @module api/HealthConditionRemedyApi
* @version 01.00.00
*/
export default class HealthConditionRemedyApi {

    /**
    * Constructs a new HealthConditionRemedyApi. 
    * @alias module:api/HealthConditionRemedyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a remedy
     * Remedy must have a code and a description scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthConditionRemedyResponse} and HTTP response
     */
    createHealthConditionRemedyWithHttpInfo(body, healthConditionId, causeId) {
      let postBody = body;

      let pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HealthConditionRemedyResponse;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a remedy
     * Remedy must have a code and a description scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthConditionRemedyResponse}
     */
    createHealthConditionRemedy(body, healthConditionId, causeId) {
      return this.createHealthConditionRemedyWithHttpInfo(body, healthConditionId, causeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a remedy
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteHealthConditionRemedyWithHttpInfo(healthConditionId, causeId, id) {
      let postBody = null;

      let pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a remedy
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteHealthConditionRemedy(healthConditionId, causeId, id) {
      return this.deleteHealthConditionRemedyWithHttpInfo(healthConditionId, causeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all remedies of a cause
     * Returns a list of remedies for a specific cause. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getHealthConditionRemediesWithHttpInfo(healthConditionId, causeId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'code': opts['code'],
        'description': opts['description'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all remedies of a cause
     * Returns a list of remedies for a specific cause. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getHealthConditionRemedies(healthConditionId, causeId, opts) {
      return this.getHealthConditionRemediesWithHttpInfo(healthConditionId, causeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single remedy
     * Get a specific remedy identified by the id in the URL.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthConditionRemedyResponse} and HTTP response
     */
    getHealthConditionRemedyByIdWithHttpInfo(healthConditionId, causeId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthConditionRemedyResponse;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single remedy
     * Get a specific remedy identified by the id in the URL.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthConditionRemedyResponse}
     */
    getHealthConditionRemedyById(healthConditionId, causeId, id, opts) {
      return this.getHealthConditionRemedyByIdWithHttpInfo(healthConditionId, causeId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a remedy
     * Update accessible parameters of the requested resource.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateHealthConditionRemedyWithHttpInfo(body, healthConditionId, causeId, id, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'health_condition_id': healthConditionId,
        'cause_id': causeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Language': opts['contentLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{cause_id}/remedies/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a remedy
     * Update accessible parameters of the requested resource.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateHealthConditionRemedy(body, healthConditionId, causeId, id, opts) {
      return this.updateHealthConditionRemedyWithHttpInfo(body, healthConditionId, causeId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
