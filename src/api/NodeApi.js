/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AssetIDs from '../model/AssetIDs';
import AssetsResponse from '../model/AssetsResponse';
import DocumentIDs from '../model/DocumentIDs';
import DocumentsResponse from '../model/DocumentsResponse';
import ErrorResponse from '../model/ErrorResponse';
import InstrumentationIDs from '../model/InstrumentationIDs';
import InstrumentationsResponse from '../model/InstrumentationsResponse';
import NodeRequest from '../model/NodeRequest';
import NodeResponse from '../model/NodeResponse';
import NodeTypeResponse from '../model/NodeTypeResponse';
import NodesResponse from '../model/NodesResponse';
import PictureLinkRequest from '../model/PictureLinkRequest';
import PictureResponse from '../model/PictureResponse';
import PicturesResponse from '../model/PicturesResponse';
import SpecificationRequest from '../model/SpecificationRequest';
import SpecificationsRename from '../model/SpecificationsRename';
import SpecificationsResponse from '../model/SpecificationsResponse';

/**
* Node service.
* @module api/NodeApi
* @version 01.00.00
*/
export default class NodeApi {

    /**
    * Constructs a new NodeApi. 
    * @alias module:api/NodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add assets to a node
     * Add one or more assets to a node. This action requires &#x60;can_permit&#x60; permission on the node and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addAssetsToNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add assets to a node
     * Add one or more assets to a node. This action requires &#x60;can_permit&#x60; permission on the node and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addAssetsToNode(body, nodeId) {
      return this.addAssetsToNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to a node
     * Add one or more documents to a node. This action requires &#x60;can_update&#x60; permission on the node and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDocumentsToNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to a node
     * Add one or more documents to a node. This action requires &#x60;can_update&#x60; permission on the node and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDocumentsToNode(body, nodeId) {
      return this.addDocumentsToNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add instrumentations to a node
     * Add one or more instrumentations to a node. This action requires &#x60;can_permit&#x60; permission on the node and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addInstrumentationsToNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/instrumentations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add instrumentations to a node
     * Add one or more instrumentations to a node. This action requires &#x60;can_permit&#x60; permission on the node and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addInstrumentationsToNode(body, nodeId) {
      return this.addInstrumentationsToNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a link as node picture
     * Add an external resource as node picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    addNodePictureLinkWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/nodes/{id}/pictures/links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a link as node picture
     * Add an external resource as node picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    addNodePictureLink(body, id) {
      return this.addNodePictureLinkWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new node
     * Create a new node. The name of the given node needs to be unique within its parent. The node will not be created when this constraint is violated. To assign a parent node the user needs &#x60;can_permit&#x60; permission on the parent.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodeResponse} and HTTP response
     */
    createNodesWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NodeResponse;

      return this.apiClient.callApi(
        '/nodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new node
     * Create a new node. The name of the given node needs to be unique within its parent. The node will not be created when this constraint is violated. To assign a parent node the user needs &#x60;can_permit&#x60; permission on the parent.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodeResponse}
     */
    createNodes(body) {
      return this.createNodesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a node
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteNodeWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a node
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteNode(id) {
      return this.deleteNodeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an node picture
     * Delete an node picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteNodePictureWithHttpInfo(nodeId, id) {
      let postBody = null;

      let pathParams = {
        'node_id': nodeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/pictures/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an node picture
     * Delete an node picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteNodePicture(nodeId, id) {
      return this.deleteNodePictureWithHttpInfo(nodeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download an node picture
     * Download an node picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    downloadNodePictureWithHttpInfo(nodeId, id) {
      let postBody = null;

      let pathParams = {
        'node_id': nodeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/pictures/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download an node picture
     * Download an node picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    downloadNodePicture(nodeId, id) {
      return this.downloadNodePictureWithHttpInfo(nodeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all assets of one node
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,                             product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetsResponse} and HTTP response
     */
    getAssetsOfNodeWithHttpInfo(nodeId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'serial_number': opts['serialNumber'],
        'product_id': opts['productId'],
        'product_category_id': opts['productCategoryId'],
        'parent_id': opts['parentId'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'status_code': opts['statusCode'],
        'production_date': opts['productionDate'],
        'production_date_from': opts['productionDateFrom'],
        'production_date_to': opts['productionDateTo'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetsResponse;

      return this.apiClient.callApi(
        '/nodes/{node_id}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all assets of one node
     * Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,                             product.manufacturer.tenant, status.tenant, instrumentations &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetsResponse}
     */
    getAssetsOfNode(nodeId, opts) {
      return this.getAssetsOfNodeWithHttpInfo(nodeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of a node
     * Returns a list of documents. If the query has no matches, the response is an empty list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    getDocumentsOfNodeWithHttpInfo(nodeId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'valid_from': opts['validFrom'],
        'valid_until': opts['validUntil'],
        'valid_at': opts['validAt']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/nodes/{node_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of a node
     * Returns a list of documents. If the query has no matches, the response is an empty list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    getDocumentsOfNode(nodeId, opts) {
      return this.getDocumentsOfNodeWithHttpInfo(nodeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all instrumentations of one node
     * Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationsResponse} and HTTP response
     */
    getInstrumentationsOfNodeWithHttpInfo(nodeId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'tag': opts['tag'],
        'status_id': opts['statusId'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'criticality': opts['criticality'],
        'accessibility': opts['accessibility'],
        'asset_status_id': opts['assetStatusId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentationsResponse;

      return this.apiClient.callApi(
        '/nodes/{node_id}/instrumentations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all instrumentations of one node
     * Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationsResponse}
     */
    getInstrumentationsOfNode(nodeId, opts) {
      return this.getInstrumentationsOfNodeWithHttpInfo(nodeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the type of the specific node
     * Returns the type of the node. Needed if only permission on node but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodeTypeResponse} and HTTP response
     */
    getNodeIdTypeWithHttpInfo(nodeId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeTypeResponse;

      return this.apiClient.callApi(
        '/nodes/{node_id}/type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the type of the specific node
     * Returns the type of the node. Needed if only permission on node but not on tenant. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodeTypeResponse}
     */
    getNodeIdType(nodeId, opts) {
      return this.getNodeIdTypeWithHttpInfo(nodeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an node picture
     * Get a single picture of an node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    getNodePictureWithHttpInfo(nodeId, id) {
      let postBody = null;

      let pathParams = {
        'node_id': nodeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/nodes/{node_id}/pictures/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an node picture
     * Get a single picture of an node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    getNodePicture(nodeId, id) {
      return this.getNodePictureWithHttpInfo(nodeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get node pictures
     * Get all pictures of an node.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PicturesResponse} and HTTP response
     */
    getNodePicturesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'width': opts['width'],
        'width_from': opts['widthFrom'],
        'width_to': opts['widthTo'],
        'height': opts['height'],
        'height_from': opts['heightFrom'],
        'height_to': opts['heightTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PicturesResponse;

      return this.apiClient.callApi(
        '/nodes/{id}/pictures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get node pictures
     * Get all pictures of an node.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PicturesResponse}
     */
    getNodePictures(id, opts) {
      return this.getNodePicturesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible types of the specified node
     * Returns a list of all possible node types for the specified node. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getNodeTypesOptionsWithHttpInfo(nodeId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'tenant_id': opts['tenantId'],
        'name': opts['name'],
        'code': opts['code']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/nodes/{node_id}/type-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible types of the specified node
     * Returns a list of all possible node types for the specified node. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getNodeTypesOptions(nodeId, opts) {
      return this.getNodeTypesOptionsWithHttpInfo(nodeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of nodes
     * Returns a list of nodes in your accessible scope. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;parent, tenant, type, type.parent, specifications, specifications[key1,key2], pictures, instrumentations, instrumentations.specifications, instrumentations.specifications[key1,key2], instrumentations.values instrumentations.values.unit&#x60;&#x60;&#x60; Hidden nodes are not returned by default, if the hidden nodes should be included, add \&quot;&#x60;&#x60;&#x60;hidden&#x60;&#x60;&#x60;\&quot; to the include parameter 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodesResponse} and HTTP response
     */
    getNodesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'hidden': opts['hidden'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodesResponse;

      return this.apiClient.callApi(
        '/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of nodes
     * Returns a list of nodes in your accessible scope. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;parent, tenant, type, type.parent, specifications, specifications[key1,key2], pictures, instrumentations, instrumentations.specifications, instrumentations.specifications[key1,key2], instrumentations.values instrumentations.values.unit&#x60;&#x60;&#x60; Hidden nodes are not returned by default, if the hidden nodes should be included, add \&quot;&#x60;&#x60;&#x60;hidden&#x60;&#x60;&#x60;\&quot; to the include parameter 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodesResponse}
     */
    getNodes(opts) {
      return this.getNodesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single node
     * Get a specific node in your accessible scope, identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;parent, tenant, type, specifications, specifications[key1,key2], pictures, instrumentations instrumentations.specifications instrumentations.specifications[key1,key2] instrumentations.values instrumentations.values.unit&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodeResponse} and HTTP response
     */
    getNodesByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeResponse;

      return this.apiClient.callApi(
        '/nodes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single node
     * Get a specific node in your accessible scope, identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;parent, tenant, type, specifications, specifications[key1,key2], pictures, instrumentations instrumentations.specifications instrumentations.specifications[key1,key2] instrumentations.values instrumentations.values.unit&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodeResponse}
     */
    getNodesById(id, opts) {
      return this.getNodesByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of a node
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    getSpecificationsOfNodeWithHttpInfo(nodeId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/nodes/{node_id}/specifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of a node
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    getSpecificationsOfNode(nodeId, opts) {
      return this.getSpecificationsOfNodeWithHttpInfo(nodeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove assets from a node
     * Remove one or more assets from a node in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the node and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeAssetsFromNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/assets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove assets from a node
     * Remove one or more assets from a node in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the node and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeAssetsFromNode(body, nodeId) {
      return this.removeAssetsFromNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from a node
     * Remove one or more documents from a node. This action requires &#x60;can_update&#x60; permission on the node and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDocumentsFromNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from a node
     * Remove one or more documents from a node. This action requires &#x60;can_update&#x60; permission on the node and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDocumentsFromNode(body, nodeId) {
      return this.removeDocumentsFromNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove instrumentations from a node
     * Remove one or more instrumentations from a node in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the node and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeInstrumentationsFromNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/instrumentations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove instrumentations from a node
     * Remove one or more instrumentations from a node in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the node and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeInstrumentationsFromNode(body, nodeId) {
      return this.removeInstrumentationsFromNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of a node
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeSpecificationsFromNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/specifications', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of a node
     * The specification keys in the body will be removed of the object in your accessible scope. If a key does not exist it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeSpecificationsFromNode(body, nodeId) {
      return this.removeSpecificationsFromNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of a node in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    renameSpecificationsOfNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of a node in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted to lower-case.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    renameSpecificationsOfNode(body, nodeId) {
      return this.renameSpecificationsOfNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the assets of a node
     * Replaces all assets belonging to a node in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the node and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceAssetsOfNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/assets', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the assets of a node
     * Replaces all assets belonging to a node in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the node and on the asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceAssetsOfNode(body, nodeId) {
      return this.replaceAssetsOfNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of a node
     * Replaces all documents belonging to a node. You can send a list of resources that will replace all previous values. This action requires &#x60;can_update&#x60; permission on the node and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceDocumentsOfNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/documents', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of a node
     * Replaces all documents belonging to a node. You can send a list of resources that will replace all previous values. This action requires &#x60;can_update&#x60; permission on the node and &#x60;can_read&#x60; permission on the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceDocumentsOfNode(body, nodeId) {
      return this.replaceDocumentsOfNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the instrumentations of a node
     * Replaces all instrumentations belonging to a node in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the node and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceInstrumentationsOfNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/instrumentations', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the instrumentations of a node
     * Replaces all instrumentations belonging to a node in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the node and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceInstrumentationsOfNode(body, nodeId) {
      return this.replaceInstrumentationsOfNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a node
     * Update accessible parameters of the requested resource in your accessible scope. To assign a parent node the user needs &#x60;can_permit&#x60; permission on the parent and on the current node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateNodeWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a node
     * Update accessible parameters of the requested resource in your accessible scope. To assign a parent node the user needs &#x60;can_permit&#x60; permission on the parent and on the current node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateNode(body, id) {
      return this.updateNodeWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an node picture
     * Upload a new node picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    updateNodePictureWithHttpInfo(image, nodeId, id) {
      let postBody = null;

      let pathParams = {
        'node_id': nodeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/nodes/{node_id}/pictures/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an node picture
     * Upload a new node picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    updateNodePicture(image, nodeId, id) {
      return this.updateNodePictureWithHttpInfo(image, nodeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a node picture link
     * Update a node picture link.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    updateNodePictureLinkWithHttpInfo(body, nodeId, id) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/nodes/{node_id}/pictures/links/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a node picture link
     * Update a node picture link.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    updateNodePictureLink(body, nodeId, id) {
      return this.updateNodePictureLinkWithHttpInfo(body, nodeId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of a node
     * Update the specification object of a node in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateSpecificationsOfNodeWithHttpInfo(body, nodeId) {
      let postBody = body;

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodes/{node_id}/specifications', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of a node
     * Update the specification object of a node in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateSpecificationsOfNode(body, nodeId) {
      return this.updateSpecificationsOfNodeWithHttpInfo(body, nodeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload an node picture
     * Upload a new node picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    uploadNodePictureWithHttpInfo(image, id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/nodes/{id}/pictures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload an node picture
     * Upload a new node picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    uploadNodePicture(image, id) {
      return this.uploadNodePictureWithHttpInfo(image, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
