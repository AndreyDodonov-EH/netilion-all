/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AssetHistoryResponse from '../model/AssetHistoryResponse';
import AssetInstrumentationsHistoryResponse from '../model/AssetInstrumentationsHistoryResponse';
import AssetRequest from '../model/AssetRequest';
import AssetResponse from '../model/AssetResponse';
import AssetStatusResponse from '../model/AssetStatusResponse';
import AssetsResponse from '../model/AssetsResponse';
import DeliveriesResponse from '../model/DeliveriesResponse';
import DeliveryIDs from '../model/DeliveryIDs';
import DocumentIDs from '../model/DocumentIDs';
import DocumentsResponse from '../model/DocumentsResponse';
import ErrorResponse from '../model/ErrorResponse';
import EventRequestNoAssets from '../model/EventRequestNoAssets';
import EventResponse from '../model/EventResponse';
import EventsResponse from '../model/EventsResponse';
import InstrumentationIDs from '../model/InstrumentationIDs';
import InstrumentationsResponse from '../model/InstrumentationsResponse';
import NodeIDs from '../model/NodeIDs';
import NodesResponse from '../model/NodesResponse';
import PictureLinkRequest from '../model/PictureLinkRequest';
import PictureResponse from '../model/PictureResponse';
import PicturesResponse from '../model/PicturesResponse';
import SoftwareIDs from '../model/SoftwareIDs';
import SoftwaresResponse from '../model/SoftwaresResponse';
import SpecificationHistoryResponse from '../model/SpecificationHistoryResponse';
import SpecificationRequest from '../model/SpecificationRequest';
import SpecificationsRename from '../model/SpecificationsRename';
import SpecificationsResponse from '../model/SpecificationsResponse';
import SubscriptionsResponse from '../model/SubscriptionsResponse';

/**
* Asset service.
* @module api/AssetApi
* @version 01.00.00
*/
export default class AssetApi {

    /**
    * Constructs a new AssetApi. 
    * @alias module:api/AssetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a link as asset picture
     * Add an external resource as asset picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    addAssetPictureLinkWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/assets/{id}/pictures/links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a link as asset picture
     * Add an external resource as asset picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    addAssetPictureLink(body, id) {
      return this.addAssetPictureLinkWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add deliveries to an asset
     * Add one or more deliveries to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDeliveriesToAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/deliveries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add deliveries to an asset
     * Add one or more deliveries to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDeliveriesToAsset(body, assetId) {
      return this.addDeliveriesToAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to an asset
     * Add one or more documents to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addDocumentsToAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add documents to an asset
     * Add one or more documents to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addDocumentsToAsset(body, assetId) {
      return this.addDocumentsToAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add instrumentations to an asset
     * Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addInstrumentationsToAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/instrumentations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add instrumentations to an asset
     * Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addInstrumentationsToAsset(body, assetId) {
      return this.addInstrumentationsToAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add nodes to an asset
     * Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addNodesToAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/nodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add nodes to an asset
     * Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addNodesToAsset(body, assetId) {
      return this.addNodesToAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add software to an asset
     * Add one or more software to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addSoftwaresToAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/softwares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add software to an asset
     * Add one or more software to an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addSoftwaresToAsset(body, assetId) {
      return this.addSoftwaresToAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new asset
     * Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetResponse} and HTTP response
     */
    createAssetWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetResponse;

      return this.apiClient.callApi(
        '/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new asset
     * Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetResponse}
     */
    createAsset(body) {
      return this.createAssetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new event for an asset
     * Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventResponse} and HTTP response
     */
    createEventForAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new event for an asset
     * Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventResponse}
     */
    createEventForAsset(body, assetId) {
      return this.createEventForAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an asset
     * Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAssetWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an asset
     * Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAsset(id) {
      return this.deleteAssetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an asset picture
     * Delete an asset picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAssetPictureWithHttpInfo(assetId, id) {
      let postBody = null;

      let pathParams = {
        'asset_id': assetId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/pictures/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an asset picture
     * Delete an asset picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAssetPicture(assetId, id) {
      return this.deleteAssetPictureWithHttpInfo(assetId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specifications of an asset
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSpecificationsOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete specifications of an asset
     * The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSpecificationsOfAsset(body, assetId) {
      return this.deleteSpecificationsOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download an asset picture
     * Download an asset picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    downloadAssetPictureWithHttpInfo(assetId, id) {
      let postBody = null;

      let pathParams = {
        'asset_id': assetId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/pictures/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download an asset picture
     * Download an asset picture.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    downloadAssetPicture(assetId, id) {
      return this.downloadAssetPictureWithHttpInfo(assetId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single asset
     * Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, values, values.units &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetResponse} and HTTP response
     */
    getAssetByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetResponse;

      return this.apiClient.callApi(
        '/assets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single asset
     * Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, values, values.units &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetResponse}
     */
    getAssetById(id, opts) {
      return this.getAssetByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible companies of the specified assets
     * Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getAssetCompanyOptionsWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/assets/{asset_id}/company-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible companies of the specified assets
     * Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getAssetCompanyOptions(assetId, opts) {
      return this.getAssetCompanyOptionsWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the history of an asset
     * Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetHistoryResponse} and HTTP response
     */
    getAssetHistoryWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'attribute': opts['attribute'],
        'from': opts['from'],
        'to': opts['to'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetHistoryResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the history of an asset
     * Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetHistoryResponse}
     */
    getAssetHistory(assetId, opts) {
      return this.getAssetHistoryWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the specific asset
     * Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetStatusResponse} and HTTP response
     */
    getAssetIdStatusWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetStatusResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the specific asset
     * Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetStatusResponse}
     */
    getAssetIdStatus(assetId, opts) {
      return this.getAssetIdStatusWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an asset picture
     * Get a single picture of an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    getAssetPictureWithHttpInfo(assetId, id) {
      let postBody = null;

      let pathParams = {
        'asset_id': assetId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/pictures/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an asset picture
     * Get a single picture of an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    getAssetPicture(assetId, id) {
      return this.getAssetPictureWithHttpInfo(assetId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get asset pictures
     * Get all pictures of an asset.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PicturesResponse} and HTTP response
     */
    getAssetPicturesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'width': opts['width'],
        'width_from': opts['widthFrom'],
        'width_to': opts['widthTo'],
        'height': opts['height'],
        'height_from': opts['heightFrom'],
        'height_to': opts['heightTo'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PicturesResponse;

      return this.apiClient.callApi(
        '/assets/{id}/pictures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get asset pictures
     * Get all pictures of an asset.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PicturesResponse}
     */
    getAssetPictures(id, opts) {
      return this.getAssetPicturesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible products of the specified assets
     * Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getAssetProductOptionsWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'product_code': opts['productCode'],
        'name': opts['name'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'category_id': opts['categoryId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/assets/{asset_id}/product-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible products of the specified assets
     * Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getAssetProductOptions(assetId, opts) {
      return this.getAssetProductOptionsWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible statuses of the specified assets
     * Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getAssetStatusesOptionsWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'tenant_id': opts['tenantId'],
        'code': opts['code'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/assets/{asset_id}/status-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible statuses of the specified assets
     * Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getAssetStatusesOptions(assetId, opts) {
      return this.getAssetStatusesOptionsWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all possible tenants of the specified assets
     * Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getAssetTenantOptionsWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/assets/{asset_id}/tenant-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all possible tenants of the specified assets
     * Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getAssetTenantOptions(assetId, opts) {
      return this.getAssetTenantOptionsWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of assets
     * Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, values, values.unit &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetsResponse} and HTTP response
     */
    getAssetsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'serial_number': opts['serialNumber'],
        'product_id': opts['productId'],
        'product_status_id': opts['productStatusId'],
        'product_category_id': opts['productCategoryId'],
        'parent_id': opts['parentId'],
        'manufacturer_id': opts['manufacturerId'],
        'status_id': opts['statusId'],
        'status_code': opts['statusCode'],
        'tenant_id': opts['tenantId'],
        'last_seen_at_from': opts['lastSeenAtFrom'],
        'last_seen_at_to': opts['lastSeenAtTo'],
        'production_date': opts['productionDate'],
        'production_date_from': opts['productionDateFrom'],
        'production_date_to': opts['productionDateTo'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'node_id': opts['nodeId'],
        'instrumentation_id': opts['instrumentationId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetsResponse;

      return this.apiClient.callApi(
        '/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of assets
     * Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, values, values.unit &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetsResponse}
     */
    getAssets(opts) {
      return this.getAssetsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all deliveries of one asset
     * Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeliveriesResponse} and HTTP response
     */
    getDeliveriesOfAssetWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'number': opts['_number'],
        'name': opts['name'],
        'status_id': opts['statusId'],
        'date_of_shipment': opts['dateOfShipment'],
        'date_of_shipment_from': opts['dateOfShipmentFrom'],
        'date_of_shipment_to': opts['dateOfShipmentTo'],
        'sender_id': opts['senderId'],
        'receiver_id': opts['receiverId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeliveriesResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/deliveries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all deliveries of one asset
     * Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeliveriesResponse}
     */
    getDeliveriesOfAsset(assetId, opts) {
      return this.getDeliveriesOfAssetWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of an asset
     * Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentsResponse} and HTTP response
     */
    getDocumentsOfAssetWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'document_version': opts['documentVersion'],
        'number': opts['_number'],
        'status_id': opts['statusId'],
        'classification_id': opts['classificationId'],
        'tenant_id': opts['tenantId'],
        'category_id': opts['categoryId'],
        'valid_from': opts['validFrom'],
        'valid_until': opts['validUntil'],
        'valid_at': opts['validAt'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all documents of an asset
     * Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentsResponse}
     */
    getDocumentsOfAsset(assetId, opts) {
      return this.getDocumentsOfAssetWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all events of one asset
     * Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsResponse} and HTTP response
     */
    getEventsOfAssetWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'type_id': opts['typeId'],
        'status_id': opts['statusId'],
        'start_datetime': opts['startDatetime'],
        'start_datetime_from': opts['startDatetimeFrom'],
        'start_datetime_to': opts['startDatetimeTo'],
        'end_datetime': opts['endDatetime'],
        'end_datetime_from': opts['endDatetimeFrom'],
        'end_datetime_to': opts['endDatetimeTo'],
        'tenant_id': opts['tenantId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all events of one asset
     * Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventsResponse}
     */
    getEventsOfAsset(assetId, opts) {
      return this.getEventsOfAssetWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all instrumentations of one asset
     * Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstrumentationsResponse} and HTTP response
     */
    getInstrumentationsOfAssetWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'tag': opts['tag'],
        'status_id': opts['statusId'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'criticality': opts['criticality'],
        'accessibility': opts['accessibility'],
        'node_id': opts['nodeId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentationsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/instrumentations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all instrumentations of one asset
     * Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstrumentationsResponse}
     */
    getInstrumentationsOfAsset(assetId, opts) {
      return this.getInstrumentationsOfAssetWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all instrumentations an asset was assigned to
     * Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetInstrumentationsHistoryResponse} and HTTP response
     */
    getInstrumentationsOfAssetHistoryWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'instrumentation_id': opts['instrumentationId'],
        'event': opts['event'],
        'event_datetime_from': opts['eventDatetimeFrom'],
        'event_datetime_to': opts['eventDatetimeTo'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetInstrumentationsHistoryResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/instrumentations/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all instrumentations an asset was assigned to
     * Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetInstrumentationsHistoryResponse}
     */
    getInstrumentationsOfAssetHistory(assetId, opts) {
      return this.getInstrumentationsOfAssetHistoryWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all nodes of one asset
     * Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodesResponse} and HTTP response
     */
    getNodesOfAssetWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'name': opts['name'],
        'type_id': opts['typeId'],
        'parent_id': opts['parentId'],
        'tenant_id': opts['tenantId'],
        'hidden': opts['hidden'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodesResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all nodes of one asset
     * Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodesResponse}
     */
    getNodesOfAsset(assetId, opts) {
      return this.getNodesOfAssetWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of software of one asset
     * Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SoftwaresResponse} and HTTP response
     */
    getSoftwaresOfSoftwareWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SoftwaresResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/softwares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of software of one asset
     * Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SoftwaresResponse}
     */
    getSoftwaresOfSoftware(assetId, opts) {
      return this.getSoftwaresOfSoftwareWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the history of one specification attribute of an asset.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationHistoryResponse} and HTTP response
     */
    getSpecificationHistoryOfAssetWithHttpInfo(assetId, key, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId,
        'key': key
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'source_timestamp_from': opts['sourceTimestampFrom'],
        'source_timestamp_to': opts['sourceTimestampTo'],
        'updated_at_from': opts['updatedAtFrom'],
        'updated_at_to': opts['updatedAtTo'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpecificationHistoryResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications/{key}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the history of one specification attribute of an asset.
     * This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationHistoryResponse}
     */
    getSpecificationHistoryOfAsset(assetId, key, opts) {
      return this.getSpecificationHistoryOfAssetWithHttpInfo(assetId, key, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get specifications of an asset
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecificationsResponse} and HTTP response
     */
    getSpecificationsOfAssetWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpecificationsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get specifications of an asset
     * Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecificationsResponse}
     */
    getSpecificationsOfAsset(assetId, opts) {
      return this.getSpecificationsOfAssetWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all subscriptions of asset
     * Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionsResponse} and HTTP response
     */
    getSubscriptionsOfAssetWithHttpInfo(assetId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'include': opts['include'],
        'user_id': opts['userId'],
        'client_application_id': opts['clientApplicationId'],
        'external_reference': opts['externalReference'],
        'status': opts['status'],
        'notification_status': opts['notificationStatus'],
        'specifications_key': opts['specificationsKey'],
        'specifications_value': opts['specificationsValue'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionsResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all subscriptions of asset
     * Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionsResponse}
     */
    getSubscriptionsOfAsset(assetId, opts) {
      return this.getSubscriptionsOfAssetWithHttpInfo(assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove deliveries from an asset
     * Remove one or more deliveries from an asset in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDeliveriesFromAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/deliveries', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove deliveries from an asset
     * Remove one or more deliveries from an asset in your accessible scope.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDeliveriesFromAsset(body, assetId) {
      return this.removeDeliveriesFromAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove documents from an asset
     * Remove one or more documents from an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDocumentsFromAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove documents from an asset
     * Remove one or more documents from an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDocumentsFromAsset(body, assetId) {
      return this.removeDocumentsFromAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove events from an asset
     * Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeEventFromAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/events', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove events from an asset
     * Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeEventFromAsset(body, assetId) {
      return this.removeEventFromAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove instrumentations from an asset
     * Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeInstrumentationsOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/instrumentations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove instrumentations from an asset
     * Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeInstrumentationsOfAsset(body, assetId) {
      return this.removeInstrumentationsOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove nodes from an asset
     * Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeNodesFromAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/nodes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove nodes from an asset
     * Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeNodesFromAsset(body, assetId) {
      return this.removeNodesFromAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove software from an asset
     * Remove one or more software from an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeSoftwaresOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/softwares', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove software from an asset
     * Remove one or more software from an asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeSoftwaresOfAsset(body, assetId) {
      return this.removeSoftwaresOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a specification key
     * Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    renameSpecificationsOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications/rename', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Rename a specification key
     * Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    renameSpecificationsOfAsset(body, assetId) {
      return this.renameSpecificationsOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the deliveries of an asset
     * Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceDeliveriesOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/deliveries', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the deliveries of an asset
     * Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceDeliveriesOfAsset(body, assetId) {
      return this.replaceDeliveriesOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the documents of an asset
     * Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceDocumentsOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/documents', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the documents of an asset
     * Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceDocumentsOfAsset(body, assetId) {
      return this.replaceDocumentsOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the instrumentations of an asset
     * Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceInstrumentationsOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/instrumentations', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the instrumentations of an asset
     * Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceInstrumentationsOfAsset(body, assetId) {
      return this.replaceInstrumentationsOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the nodes of an asset
     * Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceNodesOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/nodes', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the nodes of an asset
     * Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceNodesOfAsset(body, assetId) {
      return this.replaceNodesOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the software of an asset
     * Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceSoftwaresOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/softwares', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the software of an asset
     * Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceSoftwaresOfAsset(body, assetId) {
      return this.replaceSoftwaresOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an asset
     * Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateAssetWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an asset
     * Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateAsset(body, id) {
      return this.updateAssetWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an asset picture
     * Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    updateAssetPictureWithHttpInfo(image, assetId, id) {
      let postBody = null;

      let pathParams = {
        'asset_id': assetId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/pictures/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an asset picture
     * Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    updateAssetPicture(image, assetId, id) {
      return this.updateAssetPictureWithHttpInfo(image, assetId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an asset picture link
     * Update an asset picture link.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    updateAssetPictureLinkWithHttpInfo(body, assetId, id) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/assets/{asset_id}/pictures/links/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an asset picture link
     * Update an asset picture link.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    updateAssetPictureLink(body, assetId, id) {
      return this.updateAssetPictureLinkWithHttpInfo(body, assetId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update specifications of an asset
     * Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateSpecificationsOfAssetWithHttpInfo(body, assetId) {
      let postBody = body;

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/assets/{asset_id}/specifications', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update specifications of an asset
     * Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateSpecificationsOfAsset(body, assetId) {
      return this.updateSpecificationsOfAssetWithHttpInfo(body, assetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload an asset picture
     * Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PictureResponse} and HTTP response
     */
    uploadAssetPictureWithHttpInfo(image, id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PictureResponse;

      return this.apiClient.callApi(
        '/assets/{id}/pictures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload an asset picture
     * Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PictureResponse}
     */
    uploadAssetPicture(image, id) {
      return this.uploadAssetPictureWithHttpInfo(image, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
