/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AttachmentLinkRequest from '../model/AttachmentLinkRequest';
import AttachmentResponse from '../model/AttachmentResponse';
import AttachmentsResponse from '../model/AttachmentsResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* Attachment service.
* @module api/AttachmentApi
* @version 01.00.00
*/
export default class AttachmentApi {

    /**
    * Constructs a new AttachmentApi. 
    * @alias module:api/AttachmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new link as attachment
     * Create an attachments that links to an external resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AttachmentResponse} and HTTP response
     */
    createLinkAttachmentWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AttachmentResponse;

      return this.apiClient.callApi(
        '/attachments/links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new link as attachment
     * Create an attachments that links to an external resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AttachmentResponse}
     */
    createLinkAttachment(body) {
      return this.createLinkAttachmentWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an attachment and the file
     * Delete a specific attachment resource and file identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAttachmentWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/attachments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an attachment and the file
     * Delete a specific attachment resource and file identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAttachment(id) {
      return this.deleteAttachmentWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download the attachments file
     * Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    downloadAttachmentWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'disposition': opts['disposition']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/attachments/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download the attachments file
     * Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    downloadAttachment(id, opts) {
      return this.downloadAttachmentWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single attachment
     * specific attachment in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AttachmentResponse} and HTTP response
     */
    getAttachmentByIdWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentResponse;

      return this.apiClient.callApi(
        '/attachments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single attachment
     * specific attachment in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AttachmentResponse}
     */
    getAttachmentById(id) {
      return this.getAttachmentByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of attachments
     * Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AttachmentsResponse} and HTTP response
     */
    getAttachmentsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'content_author': opts['contentAuthor'],
        'content_version': opts['contentVersion'],
        'remarks': opts['remarks'],
        'content_date': opts['contentDate'],
        'content_date_from': opts['contentDateFrom'],
        'content_date_to': opts['contentDateTo'],
        'file_name': opts['fileName'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentsResponse;

      return this.apiClient.callApi(
        '/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of attachments
     * Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AttachmentsResponse}
     */
    getAttachments(opts) {
      return this.getAttachmentsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an attachment and especially its file
     * The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateAttachmentWithHttpInfo(id, opts) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'document_id': opts['documentId'],
        'content_author': opts['contentAuthor'],
        'content_date': opts['contentDate'],
        'remarks': opts['remarks'],
        'languages': opts['languages']
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/attachments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an attachment and especially its file
     * The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateAttachment(id, opts) {
      return this.updateAttachmentWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an attachment with a link
     * update an attachment that has a link
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AttachmentResponse} and HTTP response
     */
    updateLinkAttachmentWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AttachmentResponse;

      return this.apiClient.callApi(
        '/attachments/links/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an attachment with a link
     * update an attachment that has a link
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AttachmentResponse}
     */
    updateLinkAttachment(body, id) {
      return this.updateLinkAttachmentWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create and upload a new attachment
     * the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AttachmentResponse} and HTTP response
     */
    uploadAttachmentWithHttpInfo(file, documentId, contentAuthor, contentVersion, contentDate, remarks, languages) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'document_id': documentId,
        'content_author': contentAuthor,
        'content_version': contentVersion,
        'content_date': contentDate,
        'remarks': remarks,
        'languages': languages
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AttachmentResponse;

      return this.apiClient.callApi(
        '/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create and upload a new attachment
     * the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AttachmentResponse}
     */
    uploadAttachment(file, documentId, contentAuthor, contentVersion, contentDate, remarks, languages) {
      return this.uploadAttachmentWithHttpInfo(file, documentId, contentAuthor, contentVersion, contentDate, remarks, languages)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
