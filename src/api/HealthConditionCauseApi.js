/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Causes', 'model/ErrorResponse', 'model/HealthConditionCauseRequest', 'model/HealthConditionCauseResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Causes'), require('../model/ErrorResponse'), require('../model/HealthConditionCauseRequest'), require('../model/HealthConditionCauseResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.HealthConditionCauseApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.Causes, root.NetilionApiDocumentation.ErrorResponse, root.NetilionApiDocumentation.HealthConditionCauseRequest, root.NetilionApiDocumentation.HealthConditionCauseResponse);
  }
}(this, function(ApiClient, Causes, ErrorResponse, HealthConditionCauseRequest, HealthConditionCauseResponse) {
  'use strict';

  /**
   * HealthConditionCause service.
   * @module api/HealthConditionCauseApi
   * @version 01.00.00
   */

  /**
   * Constructs a new HealthConditionCauseApi. 
   * @alias module:api/HealthConditionCauseApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a health condition cause
     * Cause must have a code and at least one health condition
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {module:model/HealthConditionCauseRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthConditionCauseResponse} and HTTP response
     */
    this.createHealthConditionCauseWithHttpInfo = function(healthConditionId, body) {
      var postBody = body;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling createHealthConditionCause");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createHealthConditionCause");
      }


      var pathParams = {
        'health_condition_id': healthConditionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HealthConditionCauseResponse;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a health condition cause
     * Cause must have a code and at least one health condition
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {module:model/HealthConditionCauseRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthConditionCauseResponse}
     */
    this.createHealthConditionCause = function(healthConditionId, body) {
      return this.createHealthConditionCauseWithHttpInfo(healthConditionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a health condition cause
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} id Id of the cause to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCauseWithHttpInfo = function(healthConditionId, id) {
      var postBody = null;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling deleteCause");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCause");
      }


      var pathParams = {
        'health_condition_id': healthConditionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a health condition cause
     * Delete a specific resource identified by the id in the URL.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} id Id of the cause to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCause = function(healthConditionId, id) {
      return this.deleteCauseWithHttpInfo(healthConditionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single health condition cause
     * Get a specific cause identified by the id in the URL. Possible include value: &#x60;&#x60;remedies&#x60;&#x60;
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} id Id of the cause to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthConditionCauseResponse} and HTTP response
     */
    this.getHealthConditionCauseByIdWithHttpInfo = function(healthConditionId, id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling getHealthConditionCauseById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHealthConditionCauseById");
      }


      var pathParams = {
        'health_condition_id': healthConditionId,
        'id': id
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HealthConditionCauseResponse;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single health condition cause
     * Get a specific cause identified by the id in the URL. Possible include value: &#x60;&#x60;remedies&#x60;&#x60;
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} id Id of the cause to fetch
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Comma separated list of objects to include in response
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthConditionCauseResponse}
     */
    this.getHealthConditionCauseById = function(healthConditionId, id, opts) {
      return this.getHealthConditionCauseByIdWithHttpInfo(healthConditionId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all causes of a health condition
     * Returns a list of causes of a health condition. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.code Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.description Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;code&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Causes} and HTTP response
     */
    this.getHealthConditionCausesWithHttpInfo = function(healthConditionId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling getHealthConditionCauses");
      }


      var pathParams = {
        'health_condition_id': healthConditionId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'code': opts['code'],
        'description': opts['description'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Causes;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all causes of a health condition
     * Returns a list of causes of a health condition. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.code Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.description Filter accepts &#x60;*&#x60; as wildcard
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;code&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @param {String} opts.acceptLanguage The client&#39;s accepted languages. One or several (e.g. fr,de,en)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Causes}
     */
    this.getHealthConditionCauses = function(healthConditionId, opts) {
      return this.getHealthConditionCausesWithHttpInfo(healthConditionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a health condition cause
     * Update accessible parameters of the requested resource.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} id Id of the cause to update
     * @param {module:model/HealthConditionCauseRequest} body Parameters that shall be updated.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentLanguage language of the content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateHealthConditionCauseWithHttpInfo = function(healthConditionId, id, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'healthConditionId' is set
      if (healthConditionId === undefined || healthConditionId === null) {
        throw new Error("Missing the required parameter 'healthConditionId' when calling updateHealthConditionCause");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHealthConditionCause");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateHealthConditionCause");
      }


      var pathParams = {
        'health_condition_id': healthConditionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Language': opts['contentLanguage']
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a health condition cause
     * Update accessible parameters of the requested resource.
     * @param {Number} healthConditionId The resource defined in the URL
     * @param {Number} id Id of the cause to update
     * @param {module:model/HealthConditionCauseRequest} body Parameters that shall be updated.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentLanguage language of the content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateHealthConditionCause = function(healthConditionId, id, body, opts) {
      return this.updateHealthConditionCauseWithHttpInfo(healthConditionId, id, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
