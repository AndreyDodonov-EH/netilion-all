/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import HealthConditionCauseRequest from '../model/HealthConditionCauseRequest';
import HealthConditionCauseResponse from '../model/HealthConditionCauseResponse';

/**
* HealthConditionCause service.
* @module api/HealthConditionCauseApi
* @version 01.00.00
*/
export default class HealthConditionCauseApi {

    /**
    * Constructs a new HealthConditionCauseApi. 
    * @alias module:api/HealthConditionCauseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a health condition cause
     * Cause must have a code and at least one health condition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthConditionCauseResponse} and HTTP response
     */
    createHealthConditionCauseWithHttpInfo(body, healthConditionId) {
      let postBody = body;

      let pathParams = {
        'health_condition_id': healthConditionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HealthConditionCauseResponse;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a health condition cause
     * Cause must have a code and at least one health condition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthConditionCauseResponse}
     */
    createHealthConditionCause(body, healthConditionId) {
      return this.createHealthConditionCauseWithHttpInfo(body, healthConditionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a health condition cause
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCauseWithHttpInfo(healthConditionId, id) {
      let postBody = null;

      let pathParams = {
        'health_condition_id': healthConditionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a health condition cause
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCause(healthConditionId, id) {
      return this.deleteCauseWithHttpInfo(healthConditionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single health condition cause
     * Get a specific cause identified by the id in the URL. Possible include value: &#x60;&#x60;remedies&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HealthConditionCauseResponse} and HTTP response
     */
    getHealthConditionCauseByIdWithHttpInfo(healthConditionId, id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'health_condition_id': healthConditionId,
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HealthConditionCauseResponse;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single health condition cause
     * Get a specific cause identified by the id in the URL. Possible include value: &#x60;&#x60;remedies&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HealthConditionCauseResponse}
     */
    getHealthConditionCauseById(healthConditionId, id, opts) {
      return this.getHealthConditionCauseByIdWithHttpInfo(healthConditionId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all causes of a health condition
     * Returns a list of causes of a health condition. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getHealthConditionCausesWithHttpInfo(healthConditionId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'health_condition_id': healthConditionId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'code': opts['code'],
        'description': opts['description'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all causes of a health condition
     * Returns a list of causes of a health condition. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getHealthConditionCauses(healthConditionId, opts) {
      return this.getHealthConditionCausesWithHttpInfo(healthConditionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a health condition cause
     * Update accessible parameters of the requested resource.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateHealthConditionCauseWithHttpInfo(body, healthConditionId, id, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'health_condition_id': healthConditionId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Language': opts['contentLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/health_conditions/{health_condition_id}/causes/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a health condition cause
     * Update accessible parameters of the requested resource.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateHealthConditionCause(body, healthConditionId, id, opts) {
      return this.updateHealthConditionCauseWithHttpInfo(body, healthConditionId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
