/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import APIKeyRequest from '../model/APIKeyRequest';
import APIKeyResponse from '../model/APIKeyResponse';
import APIKeysResponse from '../model/APIKeysResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* APIKey service.
* @module api/APIKeyApi
* @version 01.00.00
*/
export default class APIKeyApi {

    /**
    * Constructs a new APIKeyApi. 
    * @alias module:api/APIKeyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new APIKey
     * Create a new APIKey. The values of the api_key and the api_secret can&#x27;t be set and will be generated. To create an APIKey, the client_application must have an API Subscription assigned. valid_from and valid_until will be adopted from the API Subscription
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIKeyResponse} and HTTP response
     */
    createAPIKeyWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = APIKeyResponse;

      return this.apiClient.callApi(
        '/api_keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new APIKey
     * Create a new APIKey. The values of the api_key and the api_secret can&#x27;t be set and will be generated. To create an APIKey, the client_application must have an API Subscription assigned. valid_from and valid_until will be adopted from the API Subscription
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIKeyResponse}
     */
    createAPIKey(body) {
      return this.createAPIKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an APIKey
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAPIKeyWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api_keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an APIKey
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAPIKey(id) {
      return this.deleteAPIKeyWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single APIKey
     * Get a specific APIKey in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIKeyResponse} and HTTP response
     */
    getAPIKeyByIdWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIKeyResponse;

      return this.apiClient.callApi(
        '/api_keys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single APIKey
     * Get a specific APIKey in your accessible scope, identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIKeyResponse}
     */
    getAPIKeyById(id) {
      return this.getAPIKeyByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of APIKeys
     * Returns a list of APIKeys in your accessible scope. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIKeysResponse} and HTTP response
     */
    getAPIKeysWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'api_key': opts['apiKey'],
        'valid_from': opts['validFrom'],
        'valid_from_from': opts['validFromFrom'],
        'valid_from_to': opts['validFromTo'],
        'valid_until': opts['validUntil'],
        'valid_until_from': opts['validUntilFrom'],
        'valid_until_to': opts['validUntilTo'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIKeysResponse;

      return this.apiClient.callApi(
        '/api_keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of APIKeys
     * Returns a list of APIKeys in your accessible scope. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIKeysResponse}
     */
    getAPIKeys(opts) {
      return this.getAPIKeysWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an APIKey
     * Update accessible parameters of the requested resource in your accessible scope. The value of the api_key and api_secret can&#x27;t be changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateAPIKeyWithHttpInfo(body, id) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api_keys/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an APIKey
     * Update accessible parameters of the requested resource in your accessible scope. The value of the api_key and api_secret can&#x27;t be changed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateAPIKey(body, id) {
      return this.updateAPIKeyWithHttpInfo(body, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
