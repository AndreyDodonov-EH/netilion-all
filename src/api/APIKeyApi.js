/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/APIKeyRequest', 'model/APIKeyResponse', 'model/APIKeysResponse', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/APIKeyRequest'), require('../model/APIKeyResponse'), require('../model/APIKeysResponse'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NetilionApiDocumentation) {
      root.NetilionApiDocumentation = {};
    }
    root.NetilionApiDocumentation.APIKeyApi = factory(root.NetilionApiDocumentation.ApiClient, root.NetilionApiDocumentation.APIKeyRequest, root.NetilionApiDocumentation.APIKeyResponse, root.NetilionApiDocumentation.APIKeysResponse, root.NetilionApiDocumentation.ErrorResponse);
  }
}(this, function(ApiClient, APIKeyRequest, APIKeyResponse, APIKeysResponse, ErrorResponse) {
  'use strict';

  /**
   * APIKey service.
   * @module api/APIKeyApi
   * @version 01.00.00
   */

  /**
   * Constructs a new APIKeyApi. 
   * @alias module:api/APIKeyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new APIKey
     * Create a new APIKey. The values of the api_key and the api_secret can&#39;t be set and will be generated. To create an APIKey, the client_application must have an API Subscription assigned. valid_from and valid_until will be adopted from the API Subscription
     * @param {module:model/APIKeyRequest} body APIKey object that needs to be created. client_application
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIKeyResponse} and HTTP response
     */
    this.createAPIKeyWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAPIKey");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = APIKeyResponse;

      return this.apiClient.callApi(
        '/api_keys', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new APIKey
     * Create a new APIKey. The values of the api_key and the api_secret can&#39;t be set and will be generated. To create an APIKey, the client_application must have an API Subscription assigned. valid_from and valid_until will be adopted from the API Subscription
     * @param {module:model/APIKeyRequest} body APIKey object that needs to be created. client_application
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIKeyResponse}
     */
    this.createAPIKey = function(body) {
      return this.createAPIKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an APIKey
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the APIKey to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAPIKeyWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAPIKey");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api_keys/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an APIKey
     * Delete a specific resource in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the APIKey to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAPIKey = function(id) {
      return this.deleteAPIKeyWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single APIKey
     * Get a specific APIKey in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the APIKey to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIKeyResponse} and HTTP response
     */
    this.getAPIKeyByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAPIKeyById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = APIKeyResponse;

      return this.apiClient.callApi(
        '/api_keys/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single APIKey
     * Get a specific APIKey in your accessible scope, identified by the id in the URL.
     * @param {Number} id Id of the APIKey to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIKeyResponse}
     */
    this.getAPIKeyById = function(id) {
      return this.getAPIKeyByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of APIKeys
     * Returns a list of APIKeys in your accessible scope. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.apiKey Filter accepts &#x60;*&#x60; as wildcard
     * @param {Date} opts.validFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validFromFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validFromTo Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntil Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntilFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntilTo Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIKeysResponse} and HTTP response
     */
    this.getAPIKeysWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'api_key': opts['apiKey'],
        'valid_from': opts['validFrom'],
        'valid_from_from': opts['validFromFrom'],
        'valid_from_to': opts['validFromTo'],
        'valid_until': opts['validUntil'],
        'valid_until_from': opts['validUntilFrom'],
        'valid_until_to': opts['validUntilTo'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = APIKeysResponse;

      return this.apiClient.callApi(
        '/api_keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of APIKeys
     * Returns a list of APIKeys in your accessible scope. If the query has no matches, the response is an empty list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number to load
     * @param {Number} opts.perPage Number of items to load per page
     * @param {String} opts.apiKey Filter accepts &#x60;*&#x60; as wildcard
     * @param {Date} opts.validFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validFromFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validFromTo Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntil Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntilFrom Expected date format is YYYY-MM-DD
     * @param {Date} opts.validUntilTo Expected date format is YYYY-MM-DD
     * @param {String} opts.orderBy Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIKeysResponse}
     */
    this.getAPIKeys = function(opts) {
      return this.getAPIKeysWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an APIKey
     * Update accessible parameters of the requested resource in your accessible scope. The value of the api_key and api_secret can&#39;t be changed.
     * @param {Number} id Id of the APIKey to update
     * @param {module:model/APIKeyRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateAPIKeyWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAPIKey");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAPIKey");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key', 'Authentication'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api_keys/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an APIKey
     * Update accessible parameters of the requested resource in your accessible scope. The value of the api_key and api_secret can&#39;t be changed.
     * @param {Number} id Id of the APIKey to update
     * @param {module:model/APIKeyRequest} body Parameters that shall be updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateAPIKey = function(id, body) {
      return this.updateAPIKeyWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
