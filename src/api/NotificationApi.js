/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ClientApplicationIDs from '../model/ClientApplicationIDs';
import ClientApplicationsResponse from '../model/ClientApplicationsResponse';
import ErrorResponse from '../model/ErrorResponse';
import NotificationRequest from '../model/NotificationRequest';
import NotificationResponse from '../model/NotificationResponse';

/**
* Notification service.
* @module api/NotificationApi
* @version 01.00.00
*/
export default class NotificationApi {

    /**
    * Constructs a new NotificationApi. 
    * @alias module:api/NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * add client_applications to a notification
     * Add one or more client_applications to a notification.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addClientApplicationsToNotificationWithHttpInfo(body, notificationId) {
      let postBody = body;

      let pathParams = {
        'notification_id': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/notifications/{notification_id}/client_applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * add client_applications to a notification
     * Add one or more client_applications to a notification.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addClientApplicationsToNotification(body, notificationId) {
      return this.addClientApplicationsToNotificationWithHttpInfo(body, notificationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new notification
     * The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationResponse} and HTTP response
     */
    createNotificationWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationResponse;

      return this.apiClient.callApi(
        '/notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new notification
     * The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationResponse}
     */
    createNotification(body) {
      return this.createNotificationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a notification
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteNotificationWithHttpInfo(id) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/notifications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a notification
     * Delete a specific resource identified by the id in the URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteNotification(id) {
      return this.deleteNotificationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all client_applications assigned to a notification
     * Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientApplicationsResponse} and HTTP response
     */
    getClientApplicationsOfNotificationWithHttpInfo(notificationId, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'notification_id': notificationId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'name': opts['name'],
        'contact_person_id': opts['contactPersonId'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientApplicationsResponse;

      return this.apiClient.callApi(
        '/notifications/{notification_id}/client_applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all client_applications assigned to a notification
     * Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClientApplicationsResponse}
     */
    getClientApplicationsOfNotification(notificationId, opts) {
      return this.getClientApplicationsOfNotificationWithHttpInfo(notificationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single notification
     * Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationResponse} and HTTP response
     */
    getNotificationByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationResponse;

      return this.apiClient.callApi(
        '/notifications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single notification
     * Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationResponse}
     */
    getNotificationById(id, opts) {
      return this.getNotificationByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a range of notifications
     * Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getNotificationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'client_application_id': opts['clientApplicationId'],
        'start_datetime': opts['startDatetime'],
        'start_datetime_from': opts['startDatetimeFrom'],
        'start_datetime_to': opts['startDatetimeTo'],
        'end_datetime': opts['endDatetime'],
        'end_datetime_from': opts['endDatetimeFrom'],
        'end_datetime_to': opts['endDatetimeTo'],
        'name': opts['name'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a range of notifications
     * Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getNotifications(opts) {
      return this.getNotificationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove client_application form a notification
     * Remove one or more client_applications from a notification
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    remoteClientApplicationsFromNotificationWithHttpInfo(body, notificationId) {
      let postBody = body;

      let pathParams = {
        'notification_id': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/notifications/{notification_id}/client_applications', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove client_application form a notification
     * Remove one or more client_applications from a notification
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    remoteClientApplicationsFromNotification(body, notificationId) {
      return this.remoteClientApplicationsFromNotificationWithHttpInfo(body, notificationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the client_applications of a notification
     * Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceClientApplicationsOfNotificationWithHttpInfo(body, notificationId) {
      let postBody = body;

      let pathParams = {
        'notification_id': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/notifications/{notification_id}/client_applications', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace the client_applications of a notification
     * Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceClientApplicationsOfNotification(body, notificationId) {
      return this.replaceClientApplicationsOfNotificationWithHttpInfo(body, notificationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a notification
     * Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateNotificationWithHttpInfo(body, id, opts) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Language': opts['contentLanguage']
      };
      let formParams = {
      };

      let authNames = ['API-Key', 'Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/notifications/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a notification
     * Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateNotification(body, id, opts) {
      return this.updateNotificationWithHttpInfo(body, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
