/**
 * Netilion API Documentation
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetilionApiDocumentation);
  }
}(this, function(expect, NetilionApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetilionApiDocumentation.NodeTypeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NodeTypeApi', function() {
    describe('createNodeType', function() {
      it('should call createNodeType successfully', function(done) {
        //uncomment below and update the code to test createNodeType
        //instance.createNodeType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNodeType', function() {
      it('should call deleteNodeType successfully', function(done) {
        //uncomment below and update the code to test deleteNodeType
        //instance.deleteNodeType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeIdType', function() {
      it('should call getNodeIdType successfully', function(done) {
        //uncomment below and update the code to test getNodeIdType
        //instance.getNodeIdType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeTypeById', function() {
      it('should call getNodeTypeById successfully', function(done) {
        //uncomment below and update the code to test getNodeTypeById
        //instance.getNodeTypeById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeTypes', function() {
      it('should call getNodeTypes successfully', function(done) {
        //uncomment below and update the code to test getNodeTypes
        //instance.getNodeTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeTypesOptions', function() {
      it('should call getNodeTypesOptions successfully', function(done) {
        //uncomment below and update the code to test getNodeTypesOptions
        //instance.getNodeTypesOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNodeType', function() {
      it('should call updateNodeType successfully', function(done) {
        //uncomment below and update the code to test updateNodeType
        //instance.updateNodeType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
